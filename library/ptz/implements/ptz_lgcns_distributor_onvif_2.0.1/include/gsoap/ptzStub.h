/* ptzStub.h
   Generated by gSOAP 2.7.16 from ptz.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef ptzStub_H
#define ptzStub_H
#define SOAP_NAMESPACE_OF_trt	"http://www.onvif.org/ver10/media/wsdl"
#define SOAP_NAMESPACE_OF_tt	"http://www.onvif.org/ver10/schema"
#define SOAP_NAMESPACE_OF_xmime5	"http://www.w3.org/2005/05/xmlmime"
#define SOAP_NAMESPACE_OF_wsnt	"http://docs.oasis-open.org/wsn/b-2"
#define SOAP_NAMESPACE_OF_xop	"http://www.w3.org/2004/08/xop/include"
#define SOAP_NAMESPACE_OF_wsa5	"http://www.w3.org/2005/08/addressing"
#define SOAP_NAMESPACE_OF_wsbf	"http://docs.oasis-open.org/wsrf/bf-2"
#define SOAP_NAMESPACE_OF_wstop	"http://docs.oasis-open.org/wsn/t-1"
#define SOAP_NAMESPACE_OF_tptz	"http://www.onvif.org/ver20/ptz/wsdl"
#define SOAP_NAMESPACE_OF_ns1	"http://www.lgcns.com/IntelliVMS/wsdl"
#ifndef WITH_NONAMESPACES
#define WITH_NONAMESPACES
#endif
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_wsu__tTimestampFault
#define SOAP_TYPE_wsu__tTimestampFault (12)
/* wsu:tTimestampFault */
enum wsu__tTimestampFault {wsu__MessageExpired = 0};
#endif
typedef enum wsu__tTimestampFault wsu__tTimestampFault;

#ifndef SOAP_TYPE_wsse__FaultcodeEnum
#define SOAP_TYPE_wsse__FaultcodeEnum (14)
/* wsse:FaultcodeEnum */
enum wsse__FaultcodeEnum {wsse__UnsupportedSecurityToken = 0, wsse__UnsupportedAlgorithm = 1, wsse__InvalidSecurity = 2, wsse__InvalidSecurityToken = 3, wsse__FailedAuthentication = 4, wsse__FailedCheck = 5, wsse__SecurityTokenUnavailable = 6};
#endif
typedef enum wsse__FaultcodeEnum wsse__FaultcodeEnum;

#ifndef SOAP_TYPE_tt__RotateMode
#define SOAP_TYPE_tt__RotateMode (924)
/* tt:RotateMode */
enum tt__RotateMode {tt__RotateMode__OFF = 0, tt__RotateMode__ON = 1, tt__RotateMode__AUTO = 2};
#endif

#ifndef SOAP_TYPE_tt__VideoEncoding
#define SOAP_TYPE_tt__VideoEncoding (925)
/* tt:VideoEncoding */
enum tt__VideoEncoding {tt__VideoEncoding__JPEG = 0, tt__VideoEncoding__MPEG4 = 1, tt__VideoEncoding__H264 = 2};
#endif

#ifndef SOAP_TYPE_tt__Mpeg4Profile
#define SOAP_TYPE_tt__Mpeg4Profile (926)
/* tt:Mpeg4Profile */
enum tt__Mpeg4Profile {tt__Mpeg4Profile__SP = 0, tt__Mpeg4Profile__ASP = 1};
#endif

#ifndef SOAP_TYPE_tt__H264Profile
#define SOAP_TYPE_tt__H264Profile (927)
/* tt:H264Profile */
enum tt__H264Profile {tt__H264Profile__Baseline = 0, tt__H264Profile__Main = 1, tt__H264Profile__Extended = 2, tt__H264Profile__High = 3};
#endif

#ifndef SOAP_TYPE_tt__AudioEncoding
#define SOAP_TYPE_tt__AudioEncoding (928)
/* tt:AudioEncoding */
enum tt__AudioEncoding {tt__AudioEncoding__G711 = 0, tt__AudioEncoding__G726 = 1, tt__AudioEncoding__AAC = 2};
#endif

#ifndef SOAP_TYPE_tt__StreamType
#define SOAP_TYPE_tt__StreamType (929)
/* tt:StreamType */
enum tt__StreamType {tt__StreamType__RTP_Unicast = 0, tt__StreamType__RTP_Multicast = 1};
#endif

#ifndef SOAP_TYPE_tt__TransportProtocol
#define SOAP_TYPE_tt__TransportProtocol (930)
/* tt:TransportProtocol */
enum tt__TransportProtocol {tt__TransportProtocol__UDP = 0, tt__TransportProtocol__TCP = 1, tt__TransportProtocol__RTSP = 2, tt__TransportProtocol__HTTP = 3};
#endif

#ifndef SOAP_TYPE_tt__ScopeDefinition
#define SOAP_TYPE_tt__ScopeDefinition (931)
/* tt:ScopeDefinition */
enum tt__ScopeDefinition {tt__ScopeDefinition__Fixed = 0, tt__ScopeDefinition__Configurable = 1};
#endif

#ifndef SOAP_TYPE_tt__DiscoveryMode
#define SOAP_TYPE_tt__DiscoveryMode (932)
/* tt:DiscoveryMode */
enum tt__DiscoveryMode {tt__DiscoveryMode__Discoverable = 0, tt__DiscoveryMode__NonDiscoverable = 1};
#endif

#ifndef SOAP_TYPE_tt__Duplex
#define SOAP_TYPE_tt__Duplex (934)
/* tt:Duplex */
enum tt__Duplex {tt__Duplex__Full = 0, tt__Duplex__Half = 1};
#endif

#ifndef SOAP_TYPE_tt__IPv6DHCPConfiguration
#define SOAP_TYPE_tt__IPv6DHCPConfiguration (936)
/* tt:IPv6DHCPConfiguration */
enum tt__IPv6DHCPConfiguration {tt__IPv6DHCPConfiguration__Auto = 0, tt__IPv6DHCPConfiguration__Stateful = 1, tt__IPv6DHCPConfiguration__Stateless = 2, tt__IPv6DHCPConfiguration__Off = 3};
#endif

#ifndef SOAP_TYPE_tt__NetworkProtocolType
#define SOAP_TYPE_tt__NetworkProtocolType (937)
/* tt:NetworkProtocolType */
enum tt__NetworkProtocolType {tt__NetworkProtocolType__HTTP = 0, tt__NetworkProtocolType__HTTPS = 1, tt__NetworkProtocolType__RTSP = 2};
#endif

#ifndef SOAP_TYPE_tt__NetworkHostType
#define SOAP_TYPE_tt__NetworkHostType (938)
/* tt:NetworkHostType */
enum tt__NetworkHostType {tt__NetworkHostType__IPv4 = 0, tt__NetworkHostType__IPv6 = 1, tt__NetworkHostType__DNS = 2};
#endif

#ifndef SOAP_TYPE_tt__IPType
#define SOAP_TYPE_tt__IPType (942)
/* tt:IPType */
enum tt__IPType {tt__IPType__IPv4 = 0, tt__IPType__IPv6 = 1};
#endif

#ifndef SOAP_TYPE_tt__IPAddressFilterType
#define SOAP_TYPE_tt__IPAddressFilterType (945)
/* tt:IPAddressFilterType */
enum tt__IPAddressFilterType {tt__IPAddressFilterType__Allow = 0, tt__IPAddressFilterType__Deny = 1};
#endif

#ifndef SOAP_TYPE_tt__DynamicDNSType
#define SOAP_TYPE_tt__DynamicDNSType (946)
/* tt:DynamicDNSType */
enum tt__DynamicDNSType {tt__DynamicDNSType__NoUpdate = 0, tt__DynamicDNSType__ClientUpdates = 1, tt__DynamicDNSType__ServerUpdates = 2};
#endif

#ifndef SOAP_TYPE_tt__Dot11StationMode
#define SOAP_TYPE_tt__Dot11StationMode (948)
/* tt:Dot11StationMode */
enum tt__Dot11StationMode {tt__Dot11StationMode__Ad_hoc = 0, tt__Dot11StationMode__Infrastructure = 1, tt__Dot11StationMode__Extended = 2};
#endif

#ifndef SOAP_TYPE_tt__Dot11SecurityMode
#define SOAP_TYPE_tt__Dot11SecurityMode (949)
/* tt:Dot11SecurityMode */
enum tt__Dot11SecurityMode {tt__Dot11SecurityMode__None = 0, tt__Dot11SecurityMode__WEP = 1, tt__Dot11SecurityMode__PSK = 2, tt__Dot11SecurityMode__Dot1X = 3, tt__Dot11SecurityMode__Extended = 4};
#endif

#ifndef SOAP_TYPE_tt__Dot11Cipher
#define SOAP_TYPE_tt__Dot11Cipher (950)
/* tt:Dot11Cipher */
enum tt__Dot11Cipher {tt__Dot11Cipher__CCMP = 0, tt__Dot11Cipher__TKIP = 1, tt__Dot11Cipher__Any = 2, tt__Dot11Cipher__Extended = 3};
#endif

#ifndef SOAP_TYPE_tt__Dot11SignalStrength
#define SOAP_TYPE_tt__Dot11SignalStrength (953)
/* tt:Dot11SignalStrength */
enum tt__Dot11SignalStrength {tt__Dot11SignalStrength__None = 0, tt__Dot11SignalStrength__Very_x0020Bad = 1, tt__Dot11SignalStrength__Bad = 2, tt__Dot11SignalStrength__Good = 3, tt__Dot11SignalStrength__Very_x0020Good = 4, tt__Dot11SignalStrength__Extended = 5};
#endif

#ifndef SOAP_TYPE_tt__Dot11AuthAndMangementSuite
#define SOAP_TYPE_tt__Dot11AuthAndMangementSuite (954)
/* tt:Dot11AuthAndMangementSuite */
enum tt__Dot11AuthAndMangementSuite {tt__Dot11AuthAndMangementSuite__None = 0, tt__Dot11AuthAndMangementSuite__Dot1X = 1, tt__Dot11AuthAndMangementSuite__PSK = 2, tt__Dot11AuthAndMangementSuite__Extended = 3};
#endif

#ifndef SOAP_TYPE_tt__CapabilityCategory
#define SOAP_TYPE_tt__CapabilityCategory (955)
/* tt:CapabilityCategory */
enum tt__CapabilityCategory {tt__CapabilityCategory__All = 0, tt__CapabilityCategory__Analytics = 1, tt__CapabilityCategory__Device = 2, tt__CapabilityCategory__Events = 3, tt__CapabilityCategory__Imaging = 4, tt__CapabilityCategory__Media = 5, tt__CapabilityCategory__PTZ = 6};
#endif

#ifndef SOAP_TYPE_tt__SystemLogType
#define SOAP_TYPE_tt__SystemLogType (956)
/* tt:SystemLogType */
enum tt__SystemLogType {tt__SystemLogType__System = 0, tt__SystemLogType__Access = 1};
#endif

#ifndef SOAP_TYPE_tt__FactoryDefaultType
#define SOAP_TYPE_tt__FactoryDefaultType (957)
/* tt:FactoryDefaultType */
enum tt__FactoryDefaultType {tt__FactoryDefaultType__Hard = 0, tt__FactoryDefaultType__Soft = 1};
#endif

#ifndef SOAP_TYPE_tt__SetDateTimeType
#define SOAP_TYPE_tt__SetDateTimeType (958)
/* tt:SetDateTimeType */
enum tt__SetDateTimeType {tt__SetDateTimeType__Manual = 0, tt__SetDateTimeType__NTP = 1};
#endif

#ifndef SOAP_TYPE_tt__UserLevel
#define SOAP_TYPE_tt__UserLevel (959)
/* tt:UserLevel */
enum tt__UserLevel {tt__UserLevel__Administrator = 0, tt__UserLevel__Operator = 1, tt__UserLevel__User = 2, tt__UserLevel__Anonymous = 3, tt__UserLevel__Extended = 4};
#endif

#ifndef SOAP_TYPE_tt__RelayLogicalState
#define SOAP_TYPE_tt__RelayLogicalState (960)
/* tt:RelayLogicalState */
enum tt__RelayLogicalState {tt__RelayLogicalState__active = 0, tt__RelayLogicalState__inactive = 1};
#endif

#ifndef SOAP_TYPE_tt__RelayIdleState
#define SOAP_TYPE_tt__RelayIdleState (961)
/* tt:RelayIdleState */
enum tt__RelayIdleState {tt__RelayIdleState__closed = 0, tt__RelayIdleState__open = 1};
#endif

#ifndef SOAP_TYPE_tt__RelayMode
#define SOAP_TYPE_tt__RelayMode (962)
/* tt:RelayMode */
enum tt__RelayMode {tt__RelayMode__Monostable = 0, tt__RelayMode__Bistable = 1};
#endif

#ifndef SOAP_TYPE_tt__EFlipMode
#define SOAP_TYPE_tt__EFlipMode (963)
/* tt:EFlipMode */
enum tt__EFlipMode {tt__EFlipMode__OFF = 0, tt__EFlipMode__ON = 1, tt__EFlipMode__Extended = 2};
#endif

#ifndef SOAP_TYPE_tt__ReverseMode
#define SOAP_TYPE_tt__ReverseMode (964)
/* tt:ReverseMode */
enum tt__ReverseMode {tt__ReverseMode__OFF = 0, tt__ReverseMode__ON = 1, tt__ReverseMode__AUTO = 2, tt__ReverseMode__Extended = 3};
#endif

#ifndef SOAP_TYPE_tt__MoveStatus
#define SOAP_TYPE_tt__MoveStatus (966)
/* tt:MoveStatus */
enum tt__MoveStatus {tt__MoveStatus__IDLE = 0, tt__MoveStatus__MOVING = 1, tt__MoveStatus__UNKNOWN = 2};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourState
#define SOAP_TYPE_tt__PTZPresetTourState (967)
/* tt:PTZPresetTourState */
enum tt__PTZPresetTourState {tt__PTZPresetTourState__Idle = 0, tt__PTZPresetTourState__Touring = 1, tt__PTZPresetTourState__Paused = 2, tt__PTZPresetTourState__Extended = 3};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourDirection
#define SOAP_TYPE_tt__PTZPresetTourDirection (968)
/* tt:PTZPresetTourDirection */
enum tt__PTZPresetTourDirection {tt__PTZPresetTourDirection__Forward = 0, tt__PTZPresetTourDirection__Backward = 1, tt__PTZPresetTourDirection__Extended = 2};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourOperation
#define SOAP_TYPE_tt__PTZPresetTourOperation (969)
/* tt:PTZPresetTourOperation */
enum tt__PTZPresetTourOperation {tt__PTZPresetTourOperation__Start = 0, tt__PTZPresetTourOperation__Stop = 1, tt__PTZPresetTourOperation__Pause = 2, tt__PTZPresetTourOperation__Extended = 3};
#endif

#ifndef SOAP_TYPE_tt__AutoFocusMode
#define SOAP_TYPE_tt__AutoFocusMode (970)
/* tt:AutoFocusMode */
enum tt__AutoFocusMode {tt__AutoFocusMode__AUTO = 0, tt__AutoFocusMode__MANUAL = 1};
#endif

#ifndef SOAP_TYPE_tt__WideDynamicMode
#define SOAP_TYPE_tt__WideDynamicMode (971)
/* tt:WideDynamicMode */
enum tt__WideDynamicMode {tt__WideDynamicMode__OFF = 0, tt__WideDynamicMode__ON = 1};
#endif

#ifndef SOAP_TYPE_tt__BacklightCompensationMode
#define SOAP_TYPE_tt__BacklightCompensationMode (972)
/* tt:BacklightCompensationMode */
enum tt__BacklightCompensationMode {tt__BacklightCompensationMode__OFF = 0, tt__BacklightCompensationMode__ON = 1};
#endif

#ifndef SOAP_TYPE_tt__ExposurePriority
#define SOAP_TYPE_tt__ExposurePriority (973)
/* tt:ExposurePriority */
enum tt__ExposurePriority {tt__ExposurePriority__LowNoise = 0, tt__ExposurePriority__FrameRate = 1};
#endif

#ifndef SOAP_TYPE_tt__ExposureMode
#define SOAP_TYPE_tt__ExposureMode (974)
/* tt:ExposureMode */
enum tt__ExposureMode {tt__ExposureMode__AUTO = 0, tt__ExposureMode__MANUAL = 1};
#endif

#ifndef SOAP_TYPE_tt__Enabled
#define SOAP_TYPE_tt__Enabled (975)
/* tt:Enabled */
enum tt__Enabled {tt__Enabled__ENABLED = 0, tt__Enabled__DISABLED = 1};
#endif

#ifndef SOAP_TYPE_tt__WhiteBalanceMode
#define SOAP_TYPE_tt__WhiteBalanceMode (976)
/* tt:WhiteBalanceMode */
enum tt__WhiteBalanceMode {tt__WhiteBalanceMode__AUTO = 0, tt__WhiteBalanceMode__MANUAL = 1};
#endif

#ifndef SOAP_TYPE_tt__IrCutFilterMode
#define SOAP_TYPE_tt__IrCutFilterMode (977)
/* tt:IrCutFilterMode */
enum tt__IrCutFilterMode {tt__IrCutFilterMode__ON = 0, tt__IrCutFilterMode__OFF = 1, tt__IrCutFilterMode__AUTO = 2};
#endif

#ifndef SOAP_TYPE_tt__ImageStabilizationMode
#define SOAP_TYPE_tt__ImageStabilizationMode (978)
/* tt:ImageStabilizationMode */
enum tt__ImageStabilizationMode {tt__ImageStabilizationMode__OFF = 0, tt__ImageStabilizationMode__ON = 1, tt__ImageStabilizationMode__AUTO = 2, tt__ImageStabilizationMode__Extended = 3};
#endif

#ifndef SOAP_TYPE_tt__IrCutFilterAutoBoundaryType
#define SOAP_TYPE_tt__IrCutFilterAutoBoundaryType (979)
/* tt:IrCutFilterAutoBoundaryType */
enum tt__IrCutFilterAutoBoundaryType {tt__IrCutFilterAutoBoundaryType__Common = 0, tt__IrCutFilterAutoBoundaryType__ToOn = 1, tt__IrCutFilterAutoBoundaryType__ToOff = 2, tt__IrCutFilterAutoBoundaryType__Extended = 3};
#endif

#ifndef SOAP_TYPE_tt__PropertyOperation
#define SOAP_TYPE_tt__PropertyOperation (981)
/* tt:PropertyOperation */
enum tt__PropertyOperation {tt__PropertyOperation__Initialized = 0, tt__PropertyOperation__Deleted = 1, tt__PropertyOperation__Changed = 2};
#endif

#ifndef SOAP_TYPE_tt__Direction
#define SOAP_TYPE_tt__Direction (982)
/* tt:Direction */
enum tt__Direction {tt__Direction__Left = 0, tt__Direction__Right = 1, tt__Direction__Any = 2};
#endif

#ifndef SOAP_TYPE_tt__ClassType
#define SOAP_TYPE_tt__ClassType (983)
/* tt:ClassType */
enum tt__ClassType {tt__ClassType__Animal = 0, tt__ClassType__Face = 1, tt__ClassType__Human = 2, tt__ClassType__Vehical = 3, tt__ClassType__Other = 4};
#endif

#ifndef SOAP_TYPE_tt__ReceiverMode
#define SOAP_TYPE_tt__ReceiverMode (984)
/* tt:ReceiverMode */
enum tt__ReceiverMode {tt__ReceiverMode__AutoConnect = 0, tt__ReceiverMode__AlwaysConnect = 1, tt__ReceiverMode__NeverConnect = 2, tt__ReceiverMode__Unknown = 3};
#endif

#ifndef SOAP_TYPE_tt__ReceiverState
#define SOAP_TYPE_tt__ReceiverState (985)
/* tt:ReceiverState */
enum tt__ReceiverState {tt__ReceiverState__NotConnected = 0, tt__ReceiverState__Connecting = 1, tt__ReceiverState__Connected = 2, tt__ReceiverState__Unknown = 3};
#endif

#ifndef SOAP_TYPE_tt__SearchState
#define SOAP_TYPE_tt__SearchState (988)
/* tt:SearchState */
enum tt__SearchState {tt__SearchState__Queued = 0, tt__SearchState__Searching = 1, tt__SearchState__Completed = 2, tt__SearchState__Unknown = 3};
#endif

#ifndef SOAP_TYPE_tt__RecordingStatus
#define SOAP_TYPE_tt__RecordingStatus (989)
/* tt:RecordingStatus */
enum tt__RecordingStatus {tt__RecordingStatus__Initiated = 0, tt__RecordingStatus__Recording = 1, tt__RecordingStatus__Stopped = 2, tt__RecordingStatus__Removing = 3, tt__RecordingStatus__Removed = 4, tt__RecordingStatus__Unknown = 5};
#endif

#ifndef SOAP_TYPE_tt__TrackType
#define SOAP_TYPE_tt__TrackType (990)
/* tt:TrackType */
enum tt__TrackType {tt__TrackType__Video = 0, tt__TrackType__Audio = 1, tt__TrackType__Metadata = 2, tt__TrackType__Extended = 3};
#endif

#ifndef SOAP_TYPE_tt__ModeOfOperation
#define SOAP_TYPE_tt__ModeOfOperation (993)
/* tt:ModeOfOperation */
enum tt__ModeOfOperation {tt__ModeOfOperation__Idle = 0, tt__ModeOfOperation__Active = 1, tt__ModeOfOperation__Unknown = 2};
#endif

#ifndef SOAP_TYPE_tt__OSDType
#define SOAP_TYPE_tt__OSDType (995)
/* tt:OSDType */
enum tt__OSDType {tt__OSDType__Text = 0, tt__OSDType__Image = 1, tt__OSDType__Extended = 2};
#endif

#ifndef SOAP_TYPE_wsa5__RelationshipType
#define SOAP_TYPE_wsa5__RelationshipType (996)
/* wsa5:RelationshipType */
enum wsa5__RelationshipType {wsa5__RelationshipType__http___x002f_x002fwww_x002ew3_x002eorg_x002f2005_x002f08_x002faddressing_x002freply = 0};
#endif

#ifndef SOAP_TYPE_wsa5__FaultCodesType
#define SOAP_TYPE_wsa5__FaultCodesType (997)
/* wsa5:FaultCodesType */
enum wsa5__FaultCodesType {wsa5__FaultCodesType__wsa5__InvalidAddressingHeader = 0, wsa5__FaultCodesType__wsa5__InvalidAddress = 1, wsa5__FaultCodesType__wsa5__InvalidEPR = 2, wsa5__FaultCodesType__wsa5__InvalidCardinality = 3, wsa5__FaultCodesType__wsa5__MissingAddressInEPR = 4, wsa5__FaultCodesType__wsa5__DuplicateMessageID = 5, wsa5__FaultCodesType__wsa5__ActionMismatch = 6, wsa5__FaultCodesType__wsa5__MessageAddressingHeaderRequired = 7, wsa5__FaultCodesType__wsa5__DestinationUnreachable = 8, wsa5__FaultCodesType__wsa5__ActionNotSupported = 9, wsa5__FaultCodesType__wsa5__EndpointUnavailable = 10};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (9)
typedef struct soap_dom_element xsd__anyType;
#endif
#ifndef SOAP_TYPE_xsd__anyAttribute
#define SOAP_TYPE_xsd__anyAttribute (11)
typedef struct soap_dom_attribute xsd__anyAttribute;
#endif
#ifndef SOAP_TYPE_xsd__duration
#define SOAP_TYPE_xsd__duration (69)
typedef LONG64 xsd__duration;
#endif

/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not redeclare here */

#endif





#ifndef SOAP_TYPE__wsu__Timestamp
#define SOAP_TYPE__wsu__Timestamp (13)
/* wsu:Timestamp */
struct _wsu__Timestamp
{
public:
	char *wsu__Id;	/* optional attribute of type xsd:string */
	char *Created;	/* optional element of type xsd:string */
	char *Expires;	/* optional element of type xsd:string */
};
#endif
typedef struct _wsu__Timestamp _wsu__Timestamp;

#ifndef SOAP_TYPE__wsse__UsernameToken
#define SOAP_TYPE__wsse__UsernameToken (15)
/* wsse:UsernameToken */
struct _wsse__UsernameToken
{
public:
	char *Username;	/* optional element of type xsd:string */
	struct _wsse__Password *Password;	/* optional element of type wsse:Password */
	char *Nonce;	/* optional element of type xsd:string */
	char *wsu__Created;	/* optional element of type xsd:string */
	char *wsu__Id;	/* optional attribute of type xsd:string */
};
#endif
typedef struct _wsse__UsernameToken _wsse__UsernameToken;

#ifndef SOAP_TYPE__wsse__BinarySecurityToken
#define SOAP_TYPE__wsse__BinarySecurityToken (18)
/* Primitive wsse:BinarySecurityToken schema type: */
struct _wsse__BinarySecurityToken
{
public:
	char *__item;
	char *wsu__Id;	/* optional attribute of type xsd:string */
	char *ValueType;	/* optional attribute of type xsd:string */
	char *EncodingType;	/* optional attribute of type xsd:string */
};
#endif
typedef struct _wsse__BinarySecurityToken _wsse__BinarySecurityToken;

#ifndef SOAP_TYPE__wsse__Reference
#define SOAP_TYPE__wsse__Reference (19)
/* wsse:Reference */
struct _wsse__Reference
{
public:
	char *URI;	/* optional attribute of type xsd:string */
	char *ValueType;	/* optional attribute of type xsd:string */
};
#endif
typedef struct _wsse__Reference _wsse__Reference;

#ifndef SOAP_TYPE__wsse__Embedded
#define SOAP_TYPE__wsse__Embedded (20)
/* wsse:Embedded */
struct _wsse__Embedded
{
public:
	char *wsu__Id;	/* optional attribute of type xsd:string */
	char *ValueType;	/* optional attribute of type xsd:string */
};
#endif
typedef struct _wsse__Embedded _wsse__Embedded;

#ifndef SOAP_TYPE__wsse__KeyIdentifier
#define SOAP_TYPE__wsse__KeyIdentifier (21)
/* Primitive wsse:KeyIdentifier schema type: */
struct _wsse__KeyIdentifier
{
public:
	char *__item;
	char *wsu__Id;	/* optional attribute of type xsd:string */
	char *ValueType;	/* optional attribute of type xsd:string */
	char *EncodingType;	/* optional attribute of type xsd:string */
};
#endif
typedef struct _wsse__KeyIdentifier _wsse__KeyIdentifier;

#ifndef SOAP_TYPE__wsse__SecurityTokenReference
#define SOAP_TYPE__wsse__SecurityTokenReference (22)
/* wsse:SecurityTokenReference */
struct _wsse__SecurityTokenReference
{
public:
	struct _wsse__Reference *Reference;	/* optional element of type wsse:Reference */
	struct _wsse__KeyIdentifier *KeyIdentifier;	/* optional element of type wsse:KeyIdentifier */
	struct _wsse__Embedded *Embedded;	/* optional element of type wsse:Embedded */
	char *wsu__Id;	/* optional attribute of type xsd:string */
	char *Usage;	/* optional attribute of type xsd:string */
};
#endif
typedef struct _wsse__SecurityTokenReference _wsse__SecurityTokenReference;

#ifndef SOAP_TYPE_ds__SignatureType
#define SOAP_TYPE_ds__SignatureType (26)
/* ds:SignatureType */
struct ds__SignatureType
{
public:
	struct ds__SignedInfoType *SignedInfo;	/* optional element of type ds:SignedInfoType */
	char *SignatureValue;	/* optional element of type xsd:string */
	struct ds__KeyInfoType *KeyInfo;	/* optional element of type ds:KeyInfoType */
	char *Id;	/* optional attribute of type xsd:string */
};
#endif
typedef struct ds__SignatureType ds__SignatureType;

#ifndef SOAP_TYPE__c14n__InclusiveNamespaces
#define SOAP_TYPE__c14n__InclusiveNamespaces (35)
/* c14n:InclusiveNamespaces */
struct _c14n__InclusiveNamespaces
{
public:
	char *PrefixList;	/* optional attribute of type xsd:string */
};
#endif
typedef struct _c14n__InclusiveNamespaces _c14n__InclusiveNamespaces;

#ifndef SOAP_TYPE_ds__TransformType
#define SOAP_TYPE_ds__TransformType (36)
/* ds:TransformType */
struct ds__TransformType
{
public:
	struct _c14n__InclusiveNamespaces *c14n__InclusiveNamespaces;	/* optional element of type c14n:InclusiveNamespaces */
	char *__any;
	char *Algorithm;	/* optional attribute of type xsd:string */
};
#endif
typedef struct ds__TransformType ds__TransformType;

#ifndef SOAP_TYPE_ds__KeyInfoType
#define SOAP_TYPE_ds__KeyInfoType (29)
/* ds:KeyInfoType */
struct ds__KeyInfoType
{
public:
	char *KeyName;	/* optional element of type xsd:string */
	struct ds__KeyValueType *KeyValue;	/* optional element of type ds:KeyValueType */
	struct ds__RetrievalMethodType *RetrievalMethod;	/* optional element of type ds:RetrievalMethodType */
	struct ds__X509DataType *X509Data;	/* optional element of type ds:X509DataType */
	struct _wsse__SecurityTokenReference *wsse__SecurityTokenReference;	/* optional element of type wsse:SecurityTokenReference */
	char *Id;	/* optional attribute of type xsd:string */
};
#endif
typedef struct ds__KeyInfoType ds__KeyInfoType;

#ifndef SOAP_TYPE_ds__SignedInfoType
#define SOAP_TYPE_ds__SignedInfoType (27)
/* ds:SignedInfoType */
struct ds__SignedInfoType
{
public:
	struct ds__CanonicalizationMethodType *CanonicalizationMethod;	/* required element of type ds:CanonicalizationMethodType */
	struct ds__SignatureMethodType *SignatureMethod;	/* required element of type ds:SignatureMethodType */
	int __sizeReference;	/* sequence of elements <Reference> */
	struct ds__ReferenceType **Reference;	/* required element of type ds:ReferenceType */
	char *Id;	/* optional attribute of type xsd:string */
};
#endif
typedef struct ds__SignedInfoType ds__SignedInfoType;

#ifndef SOAP_TYPE_ds__CanonicalizationMethodType
#define SOAP_TYPE_ds__CanonicalizationMethodType (31)
/* ds:CanonicalizationMethodType */
struct ds__CanonicalizationMethodType
{
public:
	char *Algorithm;	/* required attribute of type xsd:string */
	struct _c14n__InclusiveNamespaces *c14n__InclusiveNamespaces;	/* optional element of type c14n:InclusiveNamespaces */
};
#endif
typedef struct ds__CanonicalizationMethodType ds__CanonicalizationMethodType;

#ifndef SOAP_TYPE_ds__SignatureMethodType
#define SOAP_TYPE_ds__SignatureMethodType (32)
/* ds:SignatureMethodType */
struct ds__SignatureMethodType
{
public:
	int *HMACOutputLength;	/* optional element of type xsd:int */
	char *Algorithm;	/* required attribute of type xsd:string */
};
#endif
typedef struct ds__SignatureMethodType ds__SignatureMethodType;

#ifndef SOAP_TYPE_ds__ReferenceType
#define SOAP_TYPE_ds__ReferenceType (33)
/* ds:ReferenceType */
struct ds__ReferenceType
{
public:
	struct ds__TransformsType *Transforms;	/* optional element of type ds:TransformsType */
	struct ds__DigestMethodType *DigestMethod;	/* required element of type ds:DigestMethodType */
	char *DigestValue;	/* required element of type xsd:string */
	char *Id;	/* optional attribute of type xsd:string */
	char *URI;	/* optional attribute of type xsd:string */
	char *Type;	/* optional attribute of type xsd:string */
};
#endif
typedef struct ds__ReferenceType ds__ReferenceType;

#ifndef SOAP_TYPE_ds__TransformsType
#define SOAP_TYPE_ds__TransformsType (34)
/* ds:TransformsType */
struct ds__TransformsType
{
public:
	int __sizeTransform;	/* sequence of elements <Transform> */
	struct ds__TransformType *Transform;	/* required element of type ds:TransformType */
};
#endif
typedef struct ds__TransformsType ds__TransformsType;

#ifndef SOAP_TYPE_ds__DigestMethodType
#define SOAP_TYPE_ds__DigestMethodType (38)
/* ds:DigestMethodType */
struct ds__DigestMethodType
{
public:
	char *Algorithm;	/* required attribute of type xsd:string */
};
#endif
typedef struct ds__DigestMethodType ds__DigestMethodType;

#ifndef SOAP_TYPE_ds__KeyValueType
#define SOAP_TYPE_ds__KeyValueType (39)
/* ds:KeyValueType */
struct ds__KeyValueType
{
public:
	struct ds__DSAKeyValueType *DSAKeyValue;	/* required element of type ds:DSAKeyValueType */
	struct ds__RSAKeyValueType *RSAKeyValue;	/* required element of type ds:RSAKeyValueType */
};
#endif
typedef struct ds__KeyValueType ds__KeyValueType;

#ifndef SOAP_TYPE_ds__RetrievalMethodType
#define SOAP_TYPE_ds__RetrievalMethodType (41)
/* ds:RetrievalMethodType */
struct ds__RetrievalMethodType
{
public:
	struct ds__TransformsType *Transforms;	/* optional element of type ds:TransformsType */
	char *URI;	/* optional attribute of type xsd:string */
	char *Type;	/* optional attribute of type xsd:string */
};
#endif
typedef struct ds__RetrievalMethodType ds__RetrievalMethodType;

#ifndef SOAP_TYPE_ds__X509DataType
#define SOAP_TYPE_ds__X509DataType (43)
/* ds:X509DataType */
struct ds__X509DataType
{
public:
	struct ds__X509IssuerSerialType *X509IssuerSerial;	/* required element of type ds:X509IssuerSerialType */
	char *X509SKI;	/* required element of type xsd:string */
	char *X509SubjectName;	/* required element of type xsd:string */
	char *X509Certificate;	/* required element of type xsd:string */
	char *X509CRL;	/* required element of type xsd:string */
};
#endif
typedef struct ds__X509DataType ds__X509DataType;

#ifndef SOAP_TYPE_ds__X509IssuerSerialType
#define SOAP_TYPE_ds__X509IssuerSerialType (46)
/* ds:X509IssuerSerialType */
struct ds__X509IssuerSerialType
{
public:
	char *X509IssuerName;	/* required element of type xsd:string */
	int X509SerialNumber;	/* required element of type xsd:int */
};
#endif
typedef struct ds__X509IssuerSerialType ds__X509IssuerSerialType;

#ifndef SOAP_TYPE_ds__DSAKeyValueType
#define SOAP_TYPE_ds__DSAKeyValueType (47)
/* ds:DSAKeyValueType */
struct ds__DSAKeyValueType
{
public:
	char *G;	/* optional element of type xsd:string */
	char *Y;	/* required element of type xsd:string */
	char *J;	/* optional element of type xsd:string */
	char *P;	/* required element of type xsd:string */
	char *Q;	/* required element of type xsd:string */
	char *Seed;	/* required element of type xsd:string */
	char *PgenCounter;	/* required element of type xsd:string */
};
#endif
typedef struct ds__DSAKeyValueType ds__DSAKeyValueType;

#ifndef SOAP_TYPE_ds__RSAKeyValueType
#define SOAP_TYPE_ds__RSAKeyValueType (48)
/* ds:RSAKeyValueType */
struct ds__RSAKeyValueType
{
public:
	char *Modulus;	/* required element of type xsd:string */
	char *Exponent;	/* required element of type xsd:string */
};
#endif
typedef struct ds__RSAKeyValueType ds__RSAKeyValueType;

#ifndef SOAP_TYPE__wsse__Security
#define SOAP_TYPE__wsse__Security (60)
/* wsse:Security */
struct _wsse__Security
{
public:
	struct _wsu__Timestamp *wsu__Timestamp;	/* optional element of type wsu:Timestamp */
	struct _wsse__UsernameToken *UsernameToken;	/* optional element of type wsse:UsernameToken */
	struct _wsse__BinarySecurityToken *BinarySecurityToken;	/* optional element of type wsse:BinarySecurityToken */
	struct ds__SignatureType *ds__Signature;	/* optional element of type ds:SignatureType */
	char *SOAP_ENV__actor;	/* optional attribute of type xsd:string */
	char *SOAP_ENV__role;	/* optional attribute of type xsd:string */
};
#endif
typedef struct _wsse__Security _wsse__Security;

#ifndef SOAP_TYPE__wsse__Password
#define SOAP_TYPE__wsse__Password (16)
/* Primitive wsse:Password schema type: */
struct _wsse__Password
{
public:
	char *__item;
	char *Type;	/* optional attribute of type xsd:string */
};
#endif
typedef struct _wsse__Password _wsse__Password;

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (65)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	struct _wsse__Security *wsse__Security;	/* mustUnderstand */
};
#endif

#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (80)
/* Base64 schema type: */
class SOAP_CMAC xsd__base64Binary
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 80; } /* = unique id SOAP_TYPE_xsd__base64Binary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary(): __ptr(NULL), id(NULL), type(NULL), options(NULL), soap(NULL) { xsd__base64Binary::soap_default(NULL); }
	virtual ~xsd__base64Binary() { }
};
#endif

#ifndef SOAP_TYPE_xsd__hexBinary
#define SOAP_TYPE_xsd__hexBinary (86)
/* hexBinary schema type: */
class SOAP_CMAC xsd__hexBinary
{
public:
	unsigned char *__ptr;
	int __size;
public:
	virtual int soap_type() const { return 86; } /* = unique id SOAP_TYPE_xsd__hexBinary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__hexBinary(): __ptr(NULL) { xsd__hexBinary::soap_default(NULL); }
	virtual ~xsd__hexBinary() { }
};
#endif

#ifndef SOAP_TYPE__xop__Include
#define SOAP_TYPE__xop__Include (763)
/* Base64 schema type: */
struct _xop__Include
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
};
#endif
typedef struct _xop__Include _xop__Include;

#ifndef SOAP_TYPE_trt__Capabilities
#define SOAP_TYPE_trt__Capabilities (91)
/* trt:Capabilities */
class SOAP_CMAC trt__Capabilities
{
public:
	class trt__ProfileCapabilities *ProfileCapabilities;	/* required element of type trt:ProfileCapabilities */
	class trt__StreamingCapabilities *StreamingCapabilities;	/* required element of type trt:StreamingCapabilities */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	bool *SnapshotUri;	/* optional attribute */
	bool *Rotation;	/* optional attribute */
	bool *VideoSourceMode;	/* optional attribute */
	bool *OSD;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 91; } /* = unique id SOAP_TYPE_trt__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         trt__Capabilities(): ProfileCapabilities(NULL), StreamingCapabilities(NULL), __any(NULL), SnapshotUri(NULL), Rotation(NULL), VideoSourceMode(NULL), OSD(NULL), soap(NULL) { trt__Capabilities::soap_default(NULL); }
	virtual ~trt__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE_trt__ProfileCapabilities
#define SOAP_TYPE_trt__ProfileCapabilities (92)
/* trt:ProfileCapabilities */
class SOAP_CMAC trt__ProfileCapabilities
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	int *MaximumNumberOfProfiles;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 92; } /* = unique id SOAP_TYPE_trt__ProfileCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         trt__ProfileCapabilities(): __any(NULL), MaximumNumberOfProfiles(NULL), soap(NULL) { trt__ProfileCapabilities::soap_default(NULL); }
	virtual ~trt__ProfileCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_trt__StreamingCapabilities
#define SOAP_TYPE_trt__StreamingCapabilities (93)
/* trt:StreamingCapabilities */
class SOAP_CMAC trt__StreamingCapabilities
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	bool *RTPMulticast;	/* optional attribute */
	bool *RTP_USCORETCP;	/* optional attribute */
	bool *RTP_USCORERTSP_USCORETCP;	/* optional attribute */
	bool *NonAggregateControl;	/* optional attribute */
	bool *NoRTSPStreaming;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 93; } /* = unique id SOAP_TYPE_trt__StreamingCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         trt__StreamingCapabilities(): __any(NULL), RTPMulticast(NULL), RTP_USCORETCP(NULL), RTP_USCORERTSP_USCORETCP(NULL), NonAggregateControl(NULL), NoRTSPStreaming(NULL), soap(NULL) { trt__StreamingCapabilities::soap_default(NULL); }
	virtual ~trt__StreamingCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_trt__VideoSourceMode
#define SOAP_TYPE_trt__VideoSourceMode (94)
/* trt:VideoSourceMode */
class SOAP_CMAC trt__VideoSourceMode
{
public:
	float MaxFramerate;	/* required element of type xsd:float */
	class tt__VideoResolution *MaxResolution;	/* required element of type tt:VideoResolution */
	char *Encodings;	/* required element of type trt:EncodingTypes */
	bool Reboot;	/* required element of type xsd:boolean */
	char *Description;	/* optional element of type tt:Description */
	class trt__VideoSourceModeExtension *Extension;	/* optional element of type trt:VideoSourceModeExtension */
	char *token;	/* required attribute */
	bool *Enabled;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 94; } /* = unique id SOAP_TYPE_trt__VideoSourceMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         trt__VideoSourceMode(): MaxResolution(NULL), Encodings(NULL), Description(NULL), Extension(NULL), token(NULL), Enabled(NULL), soap(NULL) { trt__VideoSourceMode::soap_default(NULL); }
	virtual ~trt__VideoSourceMode() { }
};
#endif

#ifndef SOAP_TYPE_trt__VideoSourceModeExtension
#define SOAP_TYPE_trt__VideoSourceModeExtension (95)
/* trt:VideoSourceModeExtension */
class SOAP_CMAC trt__VideoSourceModeExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 95; } /* = unique id SOAP_TYPE_trt__VideoSourceModeExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         trt__VideoSourceModeExtension(): __any(NULL), soap(NULL) { trt__VideoSourceModeExtension::soap_default(NULL); }
	virtual ~trt__VideoSourceModeExtension() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetServiceCapabilities
#define SOAP_TYPE__trt__GetServiceCapabilities (96)
/* trt:GetServiceCapabilities */
class SOAP_CMAC _trt__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 96; } /* = unique id SOAP_TYPE__trt__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetServiceCapabilities(): soap(NULL) { _trt__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_trt__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetServiceCapabilitiesResponse
#define SOAP_TYPE__trt__GetServiceCapabilitiesResponse (97)
/* trt:GetServiceCapabilitiesResponse */
class SOAP_CMAC _trt__GetServiceCapabilitiesResponse
{
public:
	trt__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type trt:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 97; } /* = unique id SOAP_TYPE__trt__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetServiceCapabilitiesResponse(): Capabilities(NULL), soap(NULL) { _trt__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_trt__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSources
#define SOAP_TYPE__trt__GetVideoSources (98)
/* trt:GetVideoSources */
class SOAP_CMAC _trt__GetVideoSources
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 98; } /* = unique id SOAP_TYPE__trt__GetVideoSources */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSources(): soap(NULL) { _trt__GetVideoSources::soap_default(NULL); }
	virtual ~_trt__GetVideoSources() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourcesResponse
#define SOAP_TYPE__trt__GetVideoSourcesResponse (99)
/* trt:GetVideoSourcesResponse */
class SOAP_CMAC _trt__GetVideoSourcesResponse
{
public:
	int __sizeVideoSources;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <VideoSources> */
	class tt__VideoSource **VideoSources;	/* optional element of type tt:VideoSource */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 99; } /* = unique id SOAP_TYPE__trt__GetVideoSourcesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourcesResponse(): VideoSources(NULL), soap(NULL) { _trt__GetVideoSourcesResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoSourcesResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioSources
#define SOAP_TYPE__trt__GetAudioSources (100)
/* trt:GetAudioSources */
class SOAP_CMAC _trt__GetAudioSources
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 100; } /* = unique id SOAP_TYPE__trt__GetAudioSources */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSources(): soap(NULL) { _trt__GetAudioSources::soap_default(NULL); }
	virtual ~_trt__GetAudioSources() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourcesResponse
#define SOAP_TYPE__trt__GetAudioSourcesResponse (101)
/* trt:GetAudioSourcesResponse */
class SOAP_CMAC _trt__GetAudioSourcesResponse
{
public:
	int __sizeAudioSources;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <AudioSources> */
	class tt__AudioSource **AudioSources;	/* optional element of type tt:AudioSource */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 101; } /* = unique id SOAP_TYPE__trt__GetAudioSourcesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSourcesResponse(): AudioSources(NULL), soap(NULL) { _trt__GetAudioSourcesResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioSourcesResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputs
#define SOAP_TYPE__trt__GetAudioOutputs (102)
/* trt:GetAudioOutputs */
class SOAP_CMAC _trt__GetAudioOutputs
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 102; } /* = unique id SOAP_TYPE__trt__GetAudioOutputs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioOutputs(): soap(NULL) { _trt__GetAudioOutputs::soap_default(NULL); }
	virtual ~_trt__GetAudioOutputs() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputsResponse
#define SOAP_TYPE__trt__GetAudioOutputsResponse (103)
/* trt:GetAudioOutputsResponse */
class SOAP_CMAC _trt__GetAudioOutputsResponse
{
public:
	int __sizeAudioOutputs;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <AudioOutputs> */
	class tt__AudioOutput **AudioOutputs;	/* optional element of type tt:AudioOutput */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 103; } /* = unique id SOAP_TYPE__trt__GetAudioOutputsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioOutputsResponse(): AudioOutputs(NULL), soap(NULL) { _trt__GetAudioOutputsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioOutputsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__CreateProfile
#define SOAP_TYPE__trt__CreateProfile (104)
/* trt:CreateProfile */
class SOAP_CMAC _trt__CreateProfile
{
public:
	char *Name;	/* required element of type tt:Name */
	char *Token;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 104; } /* = unique id SOAP_TYPE__trt__CreateProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__CreateProfile(): Name(NULL), Token(NULL), soap(NULL) { _trt__CreateProfile::soap_default(NULL); }
	virtual ~_trt__CreateProfile() { }
};
#endif

#ifndef SOAP_TYPE__trt__CreateProfileResponse
#define SOAP_TYPE__trt__CreateProfileResponse (105)
/* trt:CreateProfileResponse */
class SOAP_CMAC _trt__CreateProfileResponse
{
public:
	class tt__Profile *Profile;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:Profile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 105; } /* = unique id SOAP_TYPE__trt__CreateProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__CreateProfileResponse(): Profile(NULL), soap(NULL) { _trt__CreateProfileResponse::soap_default(NULL); }
	virtual ~_trt__CreateProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetProfile
#define SOAP_TYPE__trt__GetProfile (106)
/* trt:GetProfile */
class SOAP_CMAC _trt__GetProfile
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 106; } /* = unique id SOAP_TYPE__trt__GetProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetProfile(): ProfileToken(NULL), soap(NULL) { _trt__GetProfile::soap_default(NULL); }
	virtual ~_trt__GetProfile() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetProfileResponse
#define SOAP_TYPE__trt__GetProfileResponse (107)
/* trt:GetProfileResponse */
class SOAP_CMAC _trt__GetProfileResponse
{
public:
	tt__Profile *Profile;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:Profile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 107; } /* = unique id SOAP_TYPE__trt__GetProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetProfileResponse(): Profile(NULL), soap(NULL) { _trt__GetProfileResponse::soap_default(NULL); }
	virtual ~_trt__GetProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetProfiles
#define SOAP_TYPE__trt__GetProfiles (108)
/* trt:GetProfiles */
class SOAP_CMAC _trt__GetProfiles
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 108; } /* = unique id SOAP_TYPE__trt__GetProfiles */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetProfiles(): soap(NULL) { _trt__GetProfiles::soap_default(NULL); }
	virtual ~_trt__GetProfiles() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetProfilesResponse
#define SOAP_TYPE__trt__GetProfilesResponse (109)
/* trt:GetProfilesResponse */
class SOAP_CMAC _trt__GetProfilesResponse
{
public:
	int __sizeProfiles;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <Profiles> */
	tt__Profile **Profiles;	/* optional element of type tt:Profile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 109; } /* = unique id SOAP_TYPE__trt__GetProfilesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetProfilesResponse(): Profiles(NULL), soap(NULL) { _trt__GetProfilesResponse::soap_default(NULL); }
	virtual ~_trt__GetProfilesResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddVideoEncoderConfiguration
#define SOAP_TYPE__trt__AddVideoEncoderConfiguration (110)
/* trt:AddVideoEncoderConfiguration */
class SOAP_CMAC _trt__AddVideoEncoderConfiguration
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	char *ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 110; } /* = unique id SOAP_TYPE__trt__AddVideoEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddVideoEncoderConfiguration(): ProfileToken(NULL), ConfigurationToken(NULL), soap(NULL) { _trt__AddVideoEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__AddVideoEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddVideoEncoderConfigurationResponse
#define SOAP_TYPE__trt__AddVideoEncoderConfigurationResponse (111)
/* trt:AddVideoEncoderConfigurationResponse */
class SOAP_CMAC _trt__AddVideoEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 111; } /* = unique id SOAP_TYPE__trt__AddVideoEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddVideoEncoderConfigurationResponse(): soap(NULL) { _trt__AddVideoEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddVideoEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoEncoderConfiguration
#define SOAP_TYPE__trt__RemoveVideoEncoderConfiguration (112)
/* trt:RemoveVideoEncoderConfiguration */
class SOAP_CMAC _trt__RemoveVideoEncoderConfiguration
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 112; } /* = unique id SOAP_TYPE__trt__RemoveVideoEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveVideoEncoderConfiguration(): ProfileToken(NULL), soap(NULL) { _trt__RemoveVideoEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveVideoEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoEncoderConfigurationResponse
#define SOAP_TYPE__trt__RemoveVideoEncoderConfigurationResponse (113)
/* trt:RemoveVideoEncoderConfigurationResponse */
class SOAP_CMAC _trt__RemoveVideoEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 113; } /* = unique id SOAP_TYPE__trt__RemoveVideoEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveVideoEncoderConfigurationResponse(): soap(NULL) { _trt__RemoveVideoEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveVideoEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddVideoSourceConfiguration
#define SOAP_TYPE__trt__AddVideoSourceConfiguration (114)
/* trt:AddVideoSourceConfiguration */
class SOAP_CMAC _trt__AddVideoSourceConfiguration
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	char *ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 114; } /* = unique id SOAP_TYPE__trt__AddVideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddVideoSourceConfiguration(): ProfileToken(NULL), ConfigurationToken(NULL), soap(NULL) { _trt__AddVideoSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__AddVideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddVideoSourceConfigurationResponse
#define SOAP_TYPE__trt__AddVideoSourceConfigurationResponse (115)
/* trt:AddVideoSourceConfigurationResponse */
class SOAP_CMAC _trt__AddVideoSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 115; } /* = unique id SOAP_TYPE__trt__AddVideoSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddVideoSourceConfigurationResponse(): soap(NULL) { _trt__AddVideoSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddVideoSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoSourceConfiguration
#define SOAP_TYPE__trt__RemoveVideoSourceConfiguration (116)
/* trt:RemoveVideoSourceConfiguration */
class SOAP_CMAC _trt__RemoveVideoSourceConfiguration
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 116; } /* = unique id SOAP_TYPE__trt__RemoveVideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveVideoSourceConfiguration(): ProfileToken(NULL), soap(NULL) { _trt__RemoveVideoSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveVideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoSourceConfigurationResponse
#define SOAP_TYPE__trt__RemoveVideoSourceConfigurationResponse (117)
/* trt:RemoveVideoSourceConfigurationResponse */
class SOAP_CMAC _trt__RemoveVideoSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 117; } /* = unique id SOAP_TYPE__trt__RemoveVideoSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveVideoSourceConfigurationResponse(): soap(NULL) { _trt__RemoveVideoSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveVideoSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddAudioEncoderConfiguration
#define SOAP_TYPE__trt__AddAudioEncoderConfiguration (118)
/* trt:AddAudioEncoderConfiguration */
class SOAP_CMAC _trt__AddAudioEncoderConfiguration
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	char *ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 118; } /* = unique id SOAP_TYPE__trt__AddAudioEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioEncoderConfiguration(): ProfileToken(NULL), ConfigurationToken(NULL), soap(NULL) { _trt__AddAudioEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__AddAudioEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddAudioEncoderConfigurationResponse
#define SOAP_TYPE__trt__AddAudioEncoderConfigurationResponse (119)
/* trt:AddAudioEncoderConfigurationResponse */
class SOAP_CMAC _trt__AddAudioEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 119; } /* = unique id SOAP_TYPE__trt__AddAudioEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioEncoderConfigurationResponse(): soap(NULL) { _trt__AddAudioEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddAudioEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioEncoderConfiguration
#define SOAP_TYPE__trt__RemoveAudioEncoderConfiguration (120)
/* trt:RemoveAudioEncoderConfiguration */
class SOAP_CMAC _trt__RemoveAudioEncoderConfiguration
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 120; } /* = unique id SOAP_TYPE__trt__RemoveAudioEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioEncoderConfiguration(): ProfileToken(NULL), soap(NULL) { _trt__RemoveAudioEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveAudioEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioEncoderConfigurationResponse
#define SOAP_TYPE__trt__RemoveAudioEncoderConfigurationResponse (121)
/* trt:RemoveAudioEncoderConfigurationResponse */
class SOAP_CMAC _trt__RemoveAudioEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 121; } /* = unique id SOAP_TYPE__trt__RemoveAudioEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioEncoderConfigurationResponse(): soap(NULL) { _trt__RemoveAudioEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveAudioEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddAudioSourceConfiguration
#define SOAP_TYPE__trt__AddAudioSourceConfiguration (122)
/* trt:AddAudioSourceConfiguration */
class SOAP_CMAC _trt__AddAudioSourceConfiguration
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	char *ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 122; } /* = unique id SOAP_TYPE__trt__AddAudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioSourceConfiguration(): ProfileToken(NULL), ConfigurationToken(NULL), soap(NULL) { _trt__AddAudioSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__AddAudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddAudioSourceConfigurationResponse
#define SOAP_TYPE__trt__AddAudioSourceConfigurationResponse (123)
/* trt:AddAudioSourceConfigurationResponse */
class SOAP_CMAC _trt__AddAudioSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 123; } /* = unique id SOAP_TYPE__trt__AddAudioSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioSourceConfigurationResponse(): soap(NULL) { _trt__AddAudioSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddAudioSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioSourceConfiguration
#define SOAP_TYPE__trt__RemoveAudioSourceConfiguration (124)
/* trt:RemoveAudioSourceConfiguration */
class SOAP_CMAC _trt__RemoveAudioSourceConfiguration
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 124; } /* = unique id SOAP_TYPE__trt__RemoveAudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioSourceConfiguration(): ProfileToken(NULL), soap(NULL) { _trt__RemoveAudioSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveAudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioSourceConfigurationResponse
#define SOAP_TYPE__trt__RemoveAudioSourceConfigurationResponse (125)
/* trt:RemoveAudioSourceConfigurationResponse */
class SOAP_CMAC _trt__RemoveAudioSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 125; } /* = unique id SOAP_TYPE__trt__RemoveAudioSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioSourceConfigurationResponse(): soap(NULL) { _trt__RemoveAudioSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveAudioSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddPTZConfiguration
#define SOAP_TYPE__trt__AddPTZConfiguration (126)
/* trt:AddPTZConfiguration */
class SOAP_CMAC _trt__AddPTZConfiguration
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	char *ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 126; } /* = unique id SOAP_TYPE__trt__AddPTZConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddPTZConfiguration(): ProfileToken(NULL), ConfigurationToken(NULL), soap(NULL) { _trt__AddPTZConfiguration::soap_default(NULL); }
	virtual ~_trt__AddPTZConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddPTZConfigurationResponse
#define SOAP_TYPE__trt__AddPTZConfigurationResponse (127)
/* trt:AddPTZConfigurationResponse */
class SOAP_CMAC _trt__AddPTZConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 127; } /* = unique id SOAP_TYPE__trt__AddPTZConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddPTZConfigurationResponse(): soap(NULL) { _trt__AddPTZConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddPTZConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemovePTZConfiguration
#define SOAP_TYPE__trt__RemovePTZConfiguration (128)
/* trt:RemovePTZConfiguration */
class SOAP_CMAC _trt__RemovePTZConfiguration
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 128; } /* = unique id SOAP_TYPE__trt__RemovePTZConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemovePTZConfiguration(): ProfileToken(NULL), soap(NULL) { _trt__RemovePTZConfiguration::soap_default(NULL); }
	virtual ~_trt__RemovePTZConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemovePTZConfigurationResponse
#define SOAP_TYPE__trt__RemovePTZConfigurationResponse (129)
/* trt:RemovePTZConfigurationResponse */
class SOAP_CMAC _trt__RemovePTZConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 129; } /* = unique id SOAP_TYPE__trt__RemovePTZConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemovePTZConfigurationResponse(): soap(NULL) { _trt__RemovePTZConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemovePTZConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddVideoAnalyticsConfiguration
#define SOAP_TYPE__trt__AddVideoAnalyticsConfiguration (130)
/* trt:AddVideoAnalyticsConfiguration */
class SOAP_CMAC _trt__AddVideoAnalyticsConfiguration
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	char *ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 130; } /* = unique id SOAP_TYPE__trt__AddVideoAnalyticsConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddVideoAnalyticsConfiguration(): ProfileToken(NULL), ConfigurationToken(NULL), soap(NULL) { _trt__AddVideoAnalyticsConfiguration::soap_default(NULL); }
	virtual ~_trt__AddVideoAnalyticsConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__trt__AddVideoAnalyticsConfigurationResponse (131)
/* trt:AddVideoAnalyticsConfigurationResponse */
class SOAP_CMAC _trt__AddVideoAnalyticsConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 131; } /* = unique id SOAP_TYPE__trt__AddVideoAnalyticsConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddVideoAnalyticsConfigurationResponse(): soap(NULL) { _trt__AddVideoAnalyticsConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddVideoAnalyticsConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoAnalyticsConfiguration
#define SOAP_TYPE__trt__RemoveVideoAnalyticsConfiguration (132)
/* trt:RemoveVideoAnalyticsConfiguration */
class SOAP_CMAC _trt__RemoveVideoAnalyticsConfiguration
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 132; } /* = unique id SOAP_TYPE__trt__RemoveVideoAnalyticsConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveVideoAnalyticsConfiguration(): ProfileToken(NULL), soap(NULL) { _trt__RemoveVideoAnalyticsConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveVideoAnalyticsConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__trt__RemoveVideoAnalyticsConfigurationResponse (133)
/* trt:RemoveVideoAnalyticsConfigurationResponse */
class SOAP_CMAC _trt__RemoveVideoAnalyticsConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 133; } /* = unique id SOAP_TYPE__trt__RemoveVideoAnalyticsConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveVideoAnalyticsConfigurationResponse(): soap(NULL) { _trt__RemoveVideoAnalyticsConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveVideoAnalyticsConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddMetadataConfiguration
#define SOAP_TYPE__trt__AddMetadataConfiguration (134)
/* trt:AddMetadataConfiguration */
class SOAP_CMAC _trt__AddMetadataConfiguration
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	char *ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 134; } /* = unique id SOAP_TYPE__trt__AddMetadataConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddMetadataConfiguration(): ProfileToken(NULL), ConfigurationToken(NULL), soap(NULL) { _trt__AddMetadataConfiguration::soap_default(NULL); }
	virtual ~_trt__AddMetadataConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddMetadataConfigurationResponse
#define SOAP_TYPE__trt__AddMetadataConfigurationResponse (135)
/* trt:AddMetadataConfigurationResponse */
class SOAP_CMAC _trt__AddMetadataConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 135; } /* = unique id SOAP_TYPE__trt__AddMetadataConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddMetadataConfigurationResponse(): soap(NULL) { _trt__AddMetadataConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddMetadataConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveMetadataConfiguration
#define SOAP_TYPE__trt__RemoveMetadataConfiguration (136)
/* trt:RemoveMetadataConfiguration */
class SOAP_CMAC _trt__RemoveMetadataConfiguration
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 136; } /* = unique id SOAP_TYPE__trt__RemoveMetadataConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveMetadataConfiguration(): ProfileToken(NULL), soap(NULL) { _trt__RemoveMetadataConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveMetadataConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveMetadataConfigurationResponse
#define SOAP_TYPE__trt__RemoveMetadataConfigurationResponse (137)
/* trt:RemoveMetadataConfigurationResponse */
class SOAP_CMAC _trt__RemoveMetadataConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 137; } /* = unique id SOAP_TYPE__trt__RemoveMetadataConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveMetadataConfigurationResponse(): soap(NULL) { _trt__RemoveMetadataConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveMetadataConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddAudioOutputConfiguration
#define SOAP_TYPE__trt__AddAudioOutputConfiguration (138)
/* trt:AddAudioOutputConfiguration */
class SOAP_CMAC _trt__AddAudioOutputConfiguration
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	char *ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 138; } /* = unique id SOAP_TYPE__trt__AddAudioOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioOutputConfiguration(): ProfileToken(NULL), ConfigurationToken(NULL), soap(NULL) { _trt__AddAudioOutputConfiguration::soap_default(NULL); }
	virtual ~_trt__AddAudioOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddAudioOutputConfigurationResponse
#define SOAP_TYPE__trt__AddAudioOutputConfigurationResponse (139)
/* trt:AddAudioOutputConfigurationResponse */
class SOAP_CMAC _trt__AddAudioOutputConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 139; } /* = unique id SOAP_TYPE__trt__AddAudioOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioOutputConfigurationResponse(): soap(NULL) { _trt__AddAudioOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddAudioOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioOutputConfiguration
#define SOAP_TYPE__trt__RemoveAudioOutputConfiguration (140)
/* trt:RemoveAudioOutputConfiguration */
class SOAP_CMAC _trt__RemoveAudioOutputConfiguration
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 140; } /* = unique id SOAP_TYPE__trt__RemoveAudioOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioOutputConfiguration(): ProfileToken(NULL), soap(NULL) { _trt__RemoveAudioOutputConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveAudioOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioOutputConfigurationResponse
#define SOAP_TYPE__trt__RemoveAudioOutputConfigurationResponse (141)
/* trt:RemoveAudioOutputConfigurationResponse */
class SOAP_CMAC _trt__RemoveAudioOutputConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 141; } /* = unique id SOAP_TYPE__trt__RemoveAudioOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioOutputConfigurationResponse(): soap(NULL) { _trt__RemoveAudioOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveAudioOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddAudioDecoderConfiguration
#define SOAP_TYPE__trt__AddAudioDecoderConfiguration (142)
/* trt:AddAudioDecoderConfiguration */
class SOAP_CMAC _trt__AddAudioDecoderConfiguration
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	char *ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 142; } /* = unique id SOAP_TYPE__trt__AddAudioDecoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioDecoderConfiguration(): ProfileToken(NULL), ConfigurationToken(NULL), soap(NULL) { _trt__AddAudioDecoderConfiguration::soap_default(NULL); }
	virtual ~_trt__AddAudioDecoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddAudioDecoderConfigurationResponse
#define SOAP_TYPE__trt__AddAudioDecoderConfigurationResponse (143)
/* trt:AddAudioDecoderConfigurationResponse */
class SOAP_CMAC _trt__AddAudioDecoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 143; } /* = unique id SOAP_TYPE__trt__AddAudioDecoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioDecoderConfigurationResponse(): soap(NULL) { _trt__AddAudioDecoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddAudioDecoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioDecoderConfiguration
#define SOAP_TYPE__trt__RemoveAudioDecoderConfiguration (144)
/* trt:RemoveAudioDecoderConfiguration */
class SOAP_CMAC _trt__RemoveAudioDecoderConfiguration
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 144; } /* = unique id SOAP_TYPE__trt__RemoveAudioDecoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioDecoderConfiguration(): ProfileToken(NULL), soap(NULL) { _trt__RemoveAudioDecoderConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveAudioDecoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioDecoderConfigurationResponse
#define SOAP_TYPE__trt__RemoveAudioDecoderConfigurationResponse (145)
/* trt:RemoveAudioDecoderConfigurationResponse */
class SOAP_CMAC _trt__RemoveAudioDecoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 145; } /* = unique id SOAP_TYPE__trt__RemoveAudioDecoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioDecoderConfigurationResponse(): soap(NULL) { _trt__RemoveAudioDecoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveAudioDecoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__DeleteProfile
#define SOAP_TYPE__trt__DeleteProfile (146)
/* trt:DeleteProfile */
class SOAP_CMAC _trt__DeleteProfile
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 146; } /* = unique id SOAP_TYPE__trt__DeleteProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__DeleteProfile(): ProfileToken(NULL), soap(NULL) { _trt__DeleteProfile::soap_default(NULL); }
	virtual ~_trt__DeleteProfile() { }
};
#endif

#ifndef SOAP_TYPE__trt__DeleteProfileResponse
#define SOAP_TYPE__trt__DeleteProfileResponse (147)
/* trt:DeleteProfileResponse */
class SOAP_CMAC _trt__DeleteProfileResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 147; } /* = unique id SOAP_TYPE__trt__DeleteProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__DeleteProfileResponse(): soap(NULL) { _trt__DeleteProfileResponse::soap_default(NULL); }
	virtual ~_trt__DeleteProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurations
#define SOAP_TYPE__trt__GetVideoEncoderConfigurations (148)
/* trt:GetVideoEncoderConfigurations */
class SOAP_CMAC _trt__GetVideoEncoderConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 148; } /* = unique id SOAP_TYPE__trt__GetVideoEncoderConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoEncoderConfigurations(): soap(NULL) { _trt__GetVideoEncoderConfigurations::soap_default(NULL); }
	virtual ~_trt__GetVideoEncoderConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationsResponse
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationsResponse (149)
/* trt:GetVideoEncoderConfigurationsResponse */
class SOAP_CMAC _trt__GetVideoEncoderConfigurationsResponse
{
public:
	int __sizeConfigurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <Configurations> */
	class tt__VideoEncoderConfiguration **Configurations;	/* optional element of type tt:VideoEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 149; } /* = unique id SOAP_TYPE__trt__GetVideoEncoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoEncoderConfigurationsResponse(): Configurations(NULL), soap(NULL) { _trt__GetVideoEncoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoEncoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurations
#define SOAP_TYPE__trt__GetVideoSourceConfigurations (150)
/* trt:GetVideoSourceConfigurations */
class SOAP_CMAC _trt__GetVideoSourceConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 150; } /* = unique id SOAP_TYPE__trt__GetVideoSourceConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceConfigurations(): soap(NULL) { _trt__GetVideoSourceConfigurations::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationsResponse
#define SOAP_TYPE__trt__GetVideoSourceConfigurationsResponse (151)
/* trt:GetVideoSourceConfigurationsResponse */
class SOAP_CMAC _trt__GetVideoSourceConfigurationsResponse
{
public:
	int __sizeConfigurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <Configurations> */
	class tt__VideoSourceConfiguration **Configurations;	/* optional element of type tt:VideoSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 151; } /* = unique id SOAP_TYPE__trt__GetVideoSourceConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceConfigurationsResponse(): Configurations(NULL), soap(NULL) { _trt__GetVideoSourceConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurations
#define SOAP_TYPE__trt__GetAudioEncoderConfigurations (152)
/* trt:GetAudioEncoderConfigurations */
class SOAP_CMAC _trt__GetAudioEncoderConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 152; } /* = unique id SOAP_TYPE__trt__GetAudioEncoderConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioEncoderConfigurations(): soap(NULL) { _trt__GetAudioEncoderConfigurations::soap_default(NULL); }
	virtual ~_trt__GetAudioEncoderConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationsResponse
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationsResponse (153)
/* trt:GetAudioEncoderConfigurationsResponse */
class SOAP_CMAC _trt__GetAudioEncoderConfigurationsResponse
{
public:
	int __sizeConfigurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <Configurations> */
	class tt__AudioEncoderConfiguration **Configurations;	/* optional element of type tt:AudioEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 153; } /* = unique id SOAP_TYPE__trt__GetAudioEncoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioEncoderConfigurationsResponse(): Configurations(NULL), soap(NULL) { _trt__GetAudioEncoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioEncoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurations
#define SOAP_TYPE__trt__GetAudioSourceConfigurations (154)
/* trt:GetAudioSourceConfigurations */
class SOAP_CMAC _trt__GetAudioSourceConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 154; } /* = unique id SOAP_TYPE__trt__GetAudioSourceConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSourceConfigurations(): soap(NULL) { _trt__GetAudioSourceConfigurations::soap_default(NULL); }
	virtual ~_trt__GetAudioSourceConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationsResponse
#define SOAP_TYPE__trt__GetAudioSourceConfigurationsResponse (155)
/* trt:GetAudioSourceConfigurationsResponse */
class SOAP_CMAC _trt__GetAudioSourceConfigurationsResponse
{
public:
	int __sizeConfigurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <Configurations> */
	class tt__AudioSourceConfiguration **Configurations;	/* optional element of type tt:AudioSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 155; } /* = unique id SOAP_TYPE__trt__GetAudioSourceConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSourceConfigurationsResponse(): Configurations(NULL), soap(NULL) { _trt__GetAudioSourceConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioSourceConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfigurations
#define SOAP_TYPE__trt__GetVideoAnalyticsConfigurations (156)
/* trt:GetVideoAnalyticsConfigurations */
class SOAP_CMAC _trt__GetVideoAnalyticsConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 156; } /* = unique id SOAP_TYPE__trt__GetVideoAnalyticsConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoAnalyticsConfigurations(): soap(NULL) { _trt__GetVideoAnalyticsConfigurations::soap_default(NULL); }
	virtual ~_trt__GetVideoAnalyticsConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfigurationsResponse
#define SOAP_TYPE__trt__GetVideoAnalyticsConfigurationsResponse (157)
/* trt:GetVideoAnalyticsConfigurationsResponse */
class SOAP_CMAC _trt__GetVideoAnalyticsConfigurationsResponse
{
public:
	int __sizeConfigurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <Configurations> */
	class tt__VideoAnalyticsConfiguration **Configurations;	/* optional element of type tt:VideoAnalyticsConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 157; } /* = unique id SOAP_TYPE__trt__GetVideoAnalyticsConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoAnalyticsConfigurationsResponse(): Configurations(NULL), soap(NULL) { _trt__GetVideoAnalyticsConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoAnalyticsConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfigurations
#define SOAP_TYPE__trt__GetMetadataConfigurations (158)
/* trt:GetMetadataConfigurations */
class SOAP_CMAC _trt__GetMetadataConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 158; } /* = unique id SOAP_TYPE__trt__GetMetadataConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetMetadataConfigurations(): soap(NULL) { _trt__GetMetadataConfigurations::soap_default(NULL); }
	virtual ~_trt__GetMetadataConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfigurationsResponse
#define SOAP_TYPE__trt__GetMetadataConfigurationsResponse (159)
/* trt:GetMetadataConfigurationsResponse */
class SOAP_CMAC _trt__GetMetadataConfigurationsResponse
{
public:
	int __sizeConfigurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <Configurations> */
	class tt__MetadataConfiguration **Configurations;	/* optional element of type tt:MetadataConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 159; } /* = unique id SOAP_TYPE__trt__GetMetadataConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetMetadataConfigurationsResponse(): Configurations(NULL), soap(NULL) { _trt__GetMetadataConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetMetadataConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurations
#define SOAP_TYPE__trt__GetAudioOutputConfigurations (160)
/* trt:GetAudioOutputConfigurations */
class SOAP_CMAC _trt__GetAudioOutputConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 160; } /* = unique id SOAP_TYPE__trt__GetAudioOutputConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioOutputConfigurations(): soap(NULL) { _trt__GetAudioOutputConfigurations::soap_default(NULL); }
	virtual ~_trt__GetAudioOutputConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationsResponse
#define SOAP_TYPE__trt__GetAudioOutputConfigurationsResponse (161)
/* trt:GetAudioOutputConfigurationsResponse */
class SOAP_CMAC _trt__GetAudioOutputConfigurationsResponse
{
public:
	int __sizeConfigurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <Configurations> */
	class tt__AudioOutputConfiguration **Configurations;	/* optional element of type tt:AudioOutputConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 161; } /* = unique id SOAP_TYPE__trt__GetAudioOutputConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioOutputConfigurationsResponse(): Configurations(NULL), soap(NULL) { _trt__GetAudioOutputConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioOutputConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurations
#define SOAP_TYPE__trt__GetAudioDecoderConfigurations (162)
/* trt:GetAudioDecoderConfigurations */
class SOAP_CMAC _trt__GetAudioDecoderConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 162; } /* = unique id SOAP_TYPE__trt__GetAudioDecoderConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioDecoderConfigurations(): soap(NULL) { _trt__GetAudioDecoderConfigurations::soap_default(NULL); }
	virtual ~_trt__GetAudioDecoderConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationsResponse
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationsResponse (163)
/* trt:GetAudioDecoderConfigurationsResponse */
class SOAP_CMAC _trt__GetAudioDecoderConfigurationsResponse
{
public:
	int __sizeConfigurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <Configurations> */
	class tt__AudioDecoderConfiguration **Configurations;	/* optional element of type tt:AudioDecoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 163; } /* = unique id SOAP_TYPE__trt__GetAudioDecoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioDecoderConfigurationsResponse(): Configurations(NULL), soap(NULL) { _trt__GetAudioDecoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioDecoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfiguration
#define SOAP_TYPE__trt__GetVideoSourceConfiguration (164)
/* trt:GetVideoSourceConfiguration */
class SOAP_CMAC _trt__GetVideoSourceConfiguration
{
public:
	char *ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 164; } /* = unique id SOAP_TYPE__trt__GetVideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceConfiguration(): ConfigurationToken(NULL), soap(NULL) { _trt__GetVideoSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationResponse
#define SOAP_TYPE__trt__GetVideoSourceConfigurationResponse (165)
/* trt:GetVideoSourceConfigurationResponse */
class SOAP_CMAC _trt__GetVideoSourceConfigurationResponse
{
public:
	tt__VideoSourceConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:VideoSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 165; } /* = unique id SOAP_TYPE__trt__GetVideoSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceConfigurationResponse(): Configuration(NULL), soap(NULL) { _trt__GetVideoSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfiguration
#define SOAP_TYPE__trt__GetVideoEncoderConfiguration (166)
/* trt:GetVideoEncoderConfiguration */
class SOAP_CMAC _trt__GetVideoEncoderConfiguration
{
public:
	char *ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 166; } /* = unique id SOAP_TYPE__trt__GetVideoEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoEncoderConfiguration(): ConfigurationToken(NULL), soap(NULL) { _trt__GetVideoEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__GetVideoEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationResponse
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationResponse (167)
/* trt:GetVideoEncoderConfigurationResponse */
class SOAP_CMAC _trt__GetVideoEncoderConfigurationResponse
{
public:
	tt__VideoEncoderConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:VideoEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 167; } /* = unique id SOAP_TYPE__trt__GetVideoEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoEncoderConfigurationResponse(): Configuration(NULL), soap(NULL) { _trt__GetVideoEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfiguration
#define SOAP_TYPE__trt__GetAudioSourceConfiguration (168)
/* trt:GetAudioSourceConfiguration */
class SOAP_CMAC _trt__GetAudioSourceConfiguration
{
public:
	char *ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 168; } /* = unique id SOAP_TYPE__trt__GetAudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSourceConfiguration(): ConfigurationToken(NULL), soap(NULL) { _trt__GetAudioSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__GetAudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationResponse
#define SOAP_TYPE__trt__GetAudioSourceConfigurationResponse (169)
/* trt:GetAudioSourceConfigurationResponse */
class SOAP_CMAC _trt__GetAudioSourceConfigurationResponse
{
public:
	tt__AudioSourceConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 169; } /* = unique id SOAP_TYPE__trt__GetAudioSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSourceConfigurationResponse(): Configuration(NULL), soap(NULL) { _trt__GetAudioSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfiguration
#define SOAP_TYPE__trt__GetAudioEncoderConfiguration (170)
/* trt:GetAudioEncoderConfiguration */
class SOAP_CMAC _trt__GetAudioEncoderConfiguration
{
public:
	char *ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 170; } /* = unique id SOAP_TYPE__trt__GetAudioEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioEncoderConfiguration(): ConfigurationToken(NULL), soap(NULL) { _trt__GetAudioEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__GetAudioEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationResponse
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationResponse (171)
/* trt:GetAudioEncoderConfigurationResponse */
class SOAP_CMAC _trt__GetAudioEncoderConfigurationResponse
{
public:
	tt__AudioEncoderConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 171; } /* = unique id SOAP_TYPE__trt__GetAudioEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioEncoderConfigurationResponse(): Configuration(NULL), soap(NULL) { _trt__GetAudioEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfiguration
#define SOAP_TYPE__trt__GetVideoAnalyticsConfiguration (172)
/* trt:GetVideoAnalyticsConfiguration */
class SOAP_CMAC _trt__GetVideoAnalyticsConfiguration
{
public:
	char *ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 172; } /* = unique id SOAP_TYPE__trt__GetVideoAnalyticsConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoAnalyticsConfiguration(): ConfigurationToken(NULL), soap(NULL) { _trt__GetVideoAnalyticsConfiguration::soap_default(NULL); }
	virtual ~_trt__GetVideoAnalyticsConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__trt__GetVideoAnalyticsConfigurationResponse (173)
/* trt:GetVideoAnalyticsConfigurationResponse */
class SOAP_CMAC _trt__GetVideoAnalyticsConfigurationResponse
{
public:
	tt__VideoAnalyticsConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:VideoAnalyticsConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 173; } /* = unique id SOAP_TYPE__trt__GetVideoAnalyticsConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoAnalyticsConfigurationResponse(): Configuration(NULL), soap(NULL) { _trt__GetVideoAnalyticsConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoAnalyticsConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfiguration
#define SOAP_TYPE__trt__GetMetadataConfiguration (174)
/* trt:GetMetadataConfiguration */
class SOAP_CMAC _trt__GetMetadataConfiguration
{
public:
	char *ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 174; } /* = unique id SOAP_TYPE__trt__GetMetadataConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetMetadataConfiguration(): ConfigurationToken(NULL), soap(NULL) { _trt__GetMetadataConfiguration::soap_default(NULL); }
	virtual ~_trt__GetMetadataConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfigurationResponse
#define SOAP_TYPE__trt__GetMetadataConfigurationResponse (175)
/* trt:GetMetadataConfigurationResponse */
class SOAP_CMAC _trt__GetMetadataConfigurationResponse
{
public:
	tt__MetadataConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:MetadataConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 175; } /* = unique id SOAP_TYPE__trt__GetMetadataConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetMetadataConfigurationResponse(): Configuration(NULL), soap(NULL) { _trt__GetMetadataConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetMetadataConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfiguration
#define SOAP_TYPE__trt__GetAudioOutputConfiguration (176)
/* trt:GetAudioOutputConfiguration */
class SOAP_CMAC _trt__GetAudioOutputConfiguration
{
public:
	char *ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 176; } /* = unique id SOAP_TYPE__trt__GetAudioOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioOutputConfiguration(): ConfigurationToken(NULL), soap(NULL) { _trt__GetAudioOutputConfiguration::soap_default(NULL); }
	virtual ~_trt__GetAudioOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationResponse
#define SOAP_TYPE__trt__GetAudioOutputConfigurationResponse (177)
/* trt:GetAudioOutputConfigurationResponse */
class SOAP_CMAC _trt__GetAudioOutputConfigurationResponse
{
public:
	tt__AudioOutputConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioOutputConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 177; } /* = unique id SOAP_TYPE__trt__GetAudioOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioOutputConfigurationResponse(): Configuration(NULL), soap(NULL) { _trt__GetAudioOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfiguration
#define SOAP_TYPE__trt__GetAudioDecoderConfiguration (178)
/* trt:GetAudioDecoderConfiguration */
class SOAP_CMAC _trt__GetAudioDecoderConfiguration
{
public:
	char *ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 178; } /* = unique id SOAP_TYPE__trt__GetAudioDecoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioDecoderConfiguration(): ConfigurationToken(NULL), soap(NULL) { _trt__GetAudioDecoderConfiguration::soap_default(NULL); }
	virtual ~_trt__GetAudioDecoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationResponse
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationResponse (179)
/* trt:GetAudioDecoderConfigurationResponse */
class SOAP_CMAC _trt__GetAudioDecoderConfigurationResponse
{
public:
	tt__AudioDecoderConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioDecoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 179; } /* = unique id SOAP_TYPE__trt__GetAudioDecoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioDecoderConfigurationResponse(): Configuration(NULL), soap(NULL) { _trt__GetAudioDecoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioDecoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurations
#define SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurations (180)
/* trt:GetCompatibleVideoEncoderConfigurations */
class SOAP_CMAC _trt__GetCompatibleVideoEncoderConfigurations
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 180; } /* = unique id SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleVideoEncoderConfigurations(): ProfileToken(NULL), soap(NULL) { _trt__GetCompatibleVideoEncoderConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleVideoEncoderConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurationsResponse (181)
/* trt:GetCompatibleVideoEncoderConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleVideoEncoderConfigurationsResponse
{
public:
	int __sizeConfigurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <Configurations> */
	tt__VideoEncoderConfiguration **Configurations;	/* optional element of type tt:VideoEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 181; } /* = unique id SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleVideoEncoderConfigurationsResponse(): Configurations(NULL), soap(NULL) { _trt__GetCompatibleVideoEncoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleVideoEncoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurations
#define SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurations (182)
/* trt:GetCompatibleVideoSourceConfigurations */
class SOAP_CMAC _trt__GetCompatibleVideoSourceConfigurations
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 182; } /* = unique id SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleVideoSourceConfigurations(): ProfileToken(NULL), soap(NULL) { _trt__GetCompatibleVideoSourceConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleVideoSourceConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurationsResponse (183)
/* trt:GetCompatibleVideoSourceConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleVideoSourceConfigurationsResponse
{
public:
	int __sizeConfigurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <Configurations> */
	tt__VideoSourceConfiguration **Configurations;	/* optional element of type tt:VideoSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 183; } /* = unique id SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleVideoSourceConfigurationsResponse(): Configurations(NULL), soap(NULL) { _trt__GetCompatibleVideoSourceConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleVideoSourceConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurations
#define SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurations (184)
/* trt:GetCompatibleAudioEncoderConfigurations */
class SOAP_CMAC _trt__GetCompatibleAudioEncoderConfigurations
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 184; } /* = unique id SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioEncoderConfigurations(): ProfileToken(NULL), soap(NULL) { _trt__GetCompatibleAudioEncoderConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioEncoderConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurationsResponse (185)
/* trt:GetCompatibleAudioEncoderConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleAudioEncoderConfigurationsResponse
{
public:
	int __sizeConfigurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <Configurations> */
	tt__AudioEncoderConfiguration **Configurations;	/* optional element of type tt:AudioEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 185; } /* = unique id SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioEncoderConfigurationsResponse(): Configurations(NULL), soap(NULL) { _trt__GetCompatibleAudioEncoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioEncoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurations
#define SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurations (186)
/* trt:GetCompatibleAudioSourceConfigurations */
class SOAP_CMAC _trt__GetCompatibleAudioSourceConfigurations
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 186; } /* = unique id SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioSourceConfigurations(): ProfileToken(NULL), soap(NULL) { _trt__GetCompatibleAudioSourceConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioSourceConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurationsResponse (187)
/* trt:GetCompatibleAudioSourceConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleAudioSourceConfigurationsResponse
{
public:
	int __sizeConfigurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <Configurations> */
	tt__AudioSourceConfiguration **Configurations;	/* optional element of type tt:AudioSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 187; } /* = unique id SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioSourceConfigurationsResponse(): Configurations(NULL), soap(NULL) { _trt__GetCompatibleAudioSourceConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioSourceConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurations
#define SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurations (188)
/* trt:GetCompatibleVideoAnalyticsConfigurations */
class SOAP_CMAC _trt__GetCompatibleVideoAnalyticsConfigurations
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 188; } /* = unique id SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleVideoAnalyticsConfigurations(): ProfileToken(NULL), soap(NULL) { _trt__GetCompatibleVideoAnalyticsConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleVideoAnalyticsConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurationsResponse (189)
/* trt:GetCompatibleVideoAnalyticsConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleVideoAnalyticsConfigurationsResponse
{
public:
	int __sizeConfigurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <Configurations> */
	tt__VideoAnalyticsConfiguration **Configurations;	/* optional element of type tt:VideoAnalyticsConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 189; } /* = unique id SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleVideoAnalyticsConfigurationsResponse(): Configurations(NULL), soap(NULL) { _trt__GetCompatibleVideoAnalyticsConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleVideoAnalyticsConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleMetadataConfigurations
#define SOAP_TYPE__trt__GetCompatibleMetadataConfigurations (190)
/* trt:GetCompatibleMetadataConfigurations */
class SOAP_CMAC _trt__GetCompatibleMetadataConfigurations
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 190; } /* = unique id SOAP_TYPE__trt__GetCompatibleMetadataConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleMetadataConfigurations(): ProfileToken(NULL), soap(NULL) { _trt__GetCompatibleMetadataConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleMetadataConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleMetadataConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleMetadataConfigurationsResponse (191)
/* trt:GetCompatibleMetadataConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleMetadataConfigurationsResponse
{
public:
	int __sizeConfigurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <Configurations> */
	tt__MetadataConfiguration **Configurations;	/* optional element of type tt:MetadataConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 191; } /* = unique id SOAP_TYPE__trt__GetCompatibleMetadataConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleMetadataConfigurationsResponse(): Configurations(NULL), soap(NULL) { _trt__GetCompatibleMetadataConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleMetadataConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurations
#define SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurations (192)
/* trt:GetCompatibleAudioOutputConfigurations */
class SOAP_CMAC _trt__GetCompatibleAudioOutputConfigurations
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 192; } /* = unique id SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioOutputConfigurations(): ProfileToken(NULL), soap(NULL) { _trt__GetCompatibleAudioOutputConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioOutputConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurationsResponse (193)
/* trt:GetCompatibleAudioOutputConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleAudioOutputConfigurationsResponse
{
public:
	int __sizeConfigurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <Configurations> */
	tt__AudioOutputConfiguration **Configurations;	/* optional element of type tt:AudioOutputConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 193; } /* = unique id SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioOutputConfigurationsResponse(): Configurations(NULL), soap(NULL) { _trt__GetCompatibleAudioOutputConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioOutputConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurations
#define SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurations (194)
/* trt:GetCompatibleAudioDecoderConfigurations */
class SOAP_CMAC _trt__GetCompatibleAudioDecoderConfigurations
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 194; } /* = unique id SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioDecoderConfigurations(): ProfileToken(NULL), soap(NULL) { _trt__GetCompatibleAudioDecoderConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioDecoderConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurationsResponse (195)
/* trt:GetCompatibleAudioDecoderConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleAudioDecoderConfigurationsResponse
{
public:
	int __sizeConfigurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <Configurations> */
	tt__AudioDecoderConfiguration **Configurations;	/* optional element of type tt:AudioDecoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 195; } /* = unique id SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioDecoderConfigurationsResponse(): Configurations(NULL), soap(NULL) { _trt__GetCompatibleAudioDecoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioDecoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetVideoEncoderConfiguration
#define SOAP_TYPE__trt__SetVideoEncoderConfiguration (196)
/* trt:SetVideoEncoderConfiguration */
class SOAP_CMAC _trt__SetVideoEncoderConfiguration
{
public:
	tt__VideoEncoderConfiguration *Configuration;	/* required element of type tt:VideoEncoderConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 196; } /* = unique id SOAP_TYPE__trt__SetVideoEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoEncoderConfiguration(): Configuration(NULL), soap(NULL) { _trt__SetVideoEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__SetVideoEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetVideoEncoderConfigurationResponse
#define SOAP_TYPE__trt__SetVideoEncoderConfigurationResponse (197)
/* trt:SetVideoEncoderConfigurationResponse */
class SOAP_CMAC _trt__SetVideoEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 197; } /* = unique id SOAP_TYPE__trt__SetVideoEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoEncoderConfigurationResponse(): soap(NULL) { _trt__SetVideoEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetVideoEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetVideoSourceConfiguration
#define SOAP_TYPE__trt__SetVideoSourceConfiguration (198)
/* trt:SetVideoSourceConfiguration */
class SOAP_CMAC _trt__SetVideoSourceConfiguration
{
public:
	tt__VideoSourceConfiguration *Configuration;	/* required element of type tt:VideoSourceConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 198; } /* = unique id SOAP_TYPE__trt__SetVideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoSourceConfiguration(): Configuration(NULL), soap(NULL) { _trt__SetVideoSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__SetVideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetVideoSourceConfigurationResponse
#define SOAP_TYPE__trt__SetVideoSourceConfigurationResponse (199)
/* trt:SetVideoSourceConfigurationResponse */
class SOAP_CMAC _trt__SetVideoSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 199; } /* = unique id SOAP_TYPE__trt__SetVideoSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoSourceConfigurationResponse(): soap(NULL) { _trt__SetVideoSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetVideoSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetAudioEncoderConfiguration
#define SOAP_TYPE__trt__SetAudioEncoderConfiguration (200)
/* trt:SetAudioEncoderConfiguration */
class SOAP_CMAC _trt__SetAudioEncoderConfiguration
{
public:
	tt__AudioEncoderConfiguration *Configuration;	/* required element of type tt:AudioEncoderConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 200; } /* = unique id SOAP_TYPE__trt__SetAudioEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioEncoderConfiguration(): Configuration(NULL), soap(NULL) { _trt__SetAudioEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__SetAudioEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetAudioEncoderConfigurationResponse
#define SOAP_TYPE__trt__SetAudioEncoderConfigurationResponse (201)
/* trt:SetAudioEncoderConfigurationResponse */
class SOAP_CMAC _trt__SetAudioEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 201; } /* = unique id SOAP_TYPE__trt__SetAudioEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioEncoderConfigurationResponse(): soap(NULL) { _trt__SetAudioEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetAudioEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetAudioSourceConfiguration
#define SOAP_TYPE__trt__SetAudioSourceConfiguration (202)
/* trt:SetAudioSourceConfiguration */
class SOAP_CMAC _trt__SetAudioSourceConfiguration
{
public:
	tt__AudioSourceConfiguration *Configuration;	/* required element of type tt:AudioSourceConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 202; } /* = unique id SOAP_TYPE__trt__SetAudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioSourceConfiguration(): Configuration(NULL), soap(NULL) { _trt__SetAudioSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__SetAudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetAudioSourceConfigurationResponse
#define SOAP_TYPE__trt__SetAudioSourceConfigurationResponse (203)
/* trt:SetAudioSourceConfigurationResponse */
class SOAP_CMAC _trt__SetAudioSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 203; } /* = unique id SOAP_TYPE__trt__SetAudioSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioSourceConfigurationResponse(): soap(NULL) { _trt__SetAudioSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetAudioSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetVideoAnalyticsConfiguration
#define SOAP_TYPE__trt__SetVideoAnalyticsConfiguration (204)
/* trt:SetVideoAnalyticsConfiguration */
class SOAP_CMAC _trt__SetVideoAnalyticsConfiguration
{
public:
	tt__VideoAnalyticsConfiguration *Configuration;	/* required element of type tt:VideoAnalyticsConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 204; } /* = unique id SOAP_TYPE__trt__SetVideoAnalyticsConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoAnalyticsConfiguration(): Configuration(NULL), soap(NULL) { _trt__SetVideoAnalyticsConfiguration::soap_default(NULL); }
	virtual ~_trt__SetVideoAnalyticsConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__trt__SetVideoAnalyticsConfigurationResponse (205)
/* trt:SetVideoAnalyticsConfigurationResponse */
class SOAP_CMAC _trt__SetVideoAnalyticsConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 205; } /* = unique id SOAP_TYPE__trt__SetVideoAnalyticsConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoAnalyticsConfigurationResponse(): soap(NULL) { _trt__SetVideoAnalyticsConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetVideoAnalyticsConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetMetadataConfiguration
#define SOAP_TYPE__trt__SetMetadataConfiguration (206)
/* trt:SetMetadataConfiguration */
class SOAP_CMAC _trt__SetMetadataConfiguration
{
public:
	tt__MetadataConfiguration *Configuration;	/* required element of type tt:MetadataConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 206; } /* = unique id SOAP_TYPE__trt__SetMetadataConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetMetadataConfiguration(): Configuration(NULL), soap(NULL) { _trt__SetMetadataConfiguration::soap_default(NULL); }
	virtual ~_trt__SetMetadataConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetMetadataConfigurationResponse
#define SOAP_TYPE__trt__SetMetadataConfigurationResponse (207)
/* trt:SetMetadataConfigurationResponse */
class SOAP_CMAC _trt__SetMetadataConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 207; } /* = unique id SOAP_TYPE__trt__SetMetadataConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetMetadataConfigurationResponse(): soap(NULL) { _trt__SetMetadataConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetMetadataConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetAudioOutputConfiguration
#define SOAP_TYPE__trt__SetAudioOutputConfiguration (208)
/* trt:SetAudioOutputConfiguration */
class SOAP_CMAC _trt__SetAudioOutputConfiguration
{
public:
	tt__AudioOutputConfiguration *Configuration;	/* required element of type tt:AudioOutputConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 208; } /* = unique id SOAP_TYPE__trt__SetAudioOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioOutputConfiguration(): Configuration(NULL), soap(NULL) { _trt__SetAudioOutputConfiguration::soap_default(NULL); }
	virtual ~_trt__SetAudioOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetAudioOutputConfigurationResponse
#define SOAP_TYPE__trt__SetAudioOutputConfigurationResponse (209)
/* trt:SetAudioOutputConfigurationResponse */
class SOAP_CMAC _trt__SetAudioOutputConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 209; } /* = unique id SOAP_TYPE__trt__SetAudioOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioOutputConfigurationResponse(): soap(NULL) { _trt__SetAudioOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetAudioOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetAudioDecoderConfiguration
#define SOAP_TYPE__trt__SetAudioDecoderConfiguration (210)
/* trt:SetAudioDecoderConfiguration */
class SOAP_CMAC _trt__SetAudioDecoderConfiguration
{
public:
	tt__AudioDecoderConfiguration *Configuration;	/* required element of type tt:AudioDecoderConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 210; } /* = unique id SOAP_TYPE__trt__SetAudioDecoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioDecoderConfiguration(): Configuration(NULL), soap(NULL) { _trt__SetAudioDecoderConfiguration::soap_default(NULL); }
	virtual ~_trt__SetAudioDecoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetAudioDecoderConfigurationResponse
#define SOAP_TYPE__trt__SetAudioDecoderConfigurationResponse (211)
/* trt:SetAudioDecoderConfigurationResponse */
class SOAP_CMAC _trt__SetAudioDecoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 211; } /* = unique id SOAP_TYPE__trt__SetAudioDecoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioDecoderConfigurationResponse(): soap(NULL) { _trt__SetAudioDecoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetAudioDecoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationOptions
#define SOAP_TYPE__trt__GetVideoSourceConfigurationOptions (212)
/* trt:GetVideoSourceConfigurationOptions */
class SOAP_CMAC _trt__GetVideoSourceConfigurationOptions
{
public:
	char *ConfigurationToken;	/* optional element of type tt:ReferenceToken */
	char *ProfileToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 212; } /* = unique id SOAP_TYPE__trt__GetVideoSourceConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceConfigurationOptions(): ConfigurationToken(NULL), ProfileToken(NULL), soap(NULL) { _trt__GetVideoSourceConfigurationOptions::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetVideoSourceConfigurationOptionsResponse (213)
/* trt:GetVideoSourceConfigurationOptionsResponse */
class SOAP_CMAC _trt__GetVideoSourceConfigurationOptionsResponse
{
public:
	class tt__VideoSourceConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:VideoSourceConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 213; } /* = unique id SOAP_TYPE__trt__GetVideoSourceConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceConfigurationOptionsResponse(): Options(NULL), soap(NULL) { _trt__GetVideoSourceConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationOptions
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationOptions (214)
/* trt:GetVideoEncoderConfigurationOptions */
class SOAP_CMAC _trt__GetVideoEncoderConfigurationOptions
{
public:
	char *ConfigurationToken;	/* optional element of type tt:ReferenceToken */
	char *ProfileToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 214; } /* = unique id SOAP_TYPE__trt__GetVideoEncoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoEncoderConfigurationOptions(): ConfigurationToken(NULL), ProfileToken(NULL), soap(NULL) { _trt__GetVideoEncoderConfigurationOptions::soap_default(NULL); }
	virtual ~_trt__GetVideoEncoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationOptionsResponse (215)
/* trt:GetVideoEncoderConfigurationOptionsResponse */
class SOAP_CMAC _trt__GetVideoEncoderConfigurationOptionsResponse
{
public:
	class tt__VideoEncoderConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:VideoEncoderConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 215; } /* = unique id SOAP_TYPE__trt__GetVideoEncoderConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoEncoderConfigurationOptionsResponse(): Options(NULL), soap(NULL) { _trt__GetVideoEncoderConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoEncoderConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationOptions
#define SOAP_TYPE__trt__GetAudioSourceConfigurationOptions (216)
/* trt:GetAudioSourceConfigurationOptions */
class SOAP_CMAC _trt__GetAudioSourceConfigurationOptions
{
public:
	char *ConfigurationToken;	/* optional element of type tt:ReferenceToken */
	char *ProfileToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 216; } /* = unique id SOAP_TYPE__trt__GetAudioSourceConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSourceConfigurationOptions(): ConfigurationToken(NULL), ProfileToken(NULL), soap(NULL) { _trt__GetAudioSourceConfigurationOptions::soap_default(NULL); }
	virtual ~_trt__GetAudioSourceConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetAudioSourceConfigurationOptionsResponse (217)
/* trt:GetAudioSourceConfigurationOptionsResponse */
class SOAP_CMAC _trt__GetAudioSourceConfigurationOptionsResponse
{
public:
	class tt__AudioSourceConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioSourceConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 217; } /* = unique id SOAP_TYPE__trt__GetAudioSourceConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSourceConfigurationOptionsResponse(): Options(NULL), soap(NULL) { _trt__GetAudioSourceConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioSourceConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationOptions
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationOptions (218)
/* trt:GetAudioEncoderConfigurationOptions */
class SOAP_CMAC _trt__GetAudioEncoderConfigurationOptions
{
public:
	char *ConfigurationToken;	/* optional element of type tt:ReferenceToken */
	char *ProfileToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 218; } /* = unique id SOAP_TYPE__trt__GetAudioEncoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioEncoderConfigurationOptions(): ConfigurationToken(NULL), ProfileToken(NULL), soap(NULL) { _trt__GetAudioEncoderConfigurationOptions::soap_default(NULL); }
	virtual ~_trt__GetAudioEncoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationOptionsResponse (219)
/* trt:GetAudioEncoderConfigurationOptionsResponse */
class SOAP_CMAC _trt__GetAudioEncoderConfigurationOptionsResponse
{
public:
	class tt__AudioEncoderConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioEncoderConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 219; } /* = unique id SOAP_TYPE__trt__GetAudioEncoderConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioEncoderConfigurationOptionsResponse(): Options(NULL), soap(NULL) { _trt__GetAudioEncoderConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioEncoderConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfigurationOptions
#define SOAP_TYPE__trt__GetMetadataConfigurationOptions (220)
/* trt:GetMetadataConfigurationOptions */
class SOAP_CMAC _trt__GetMetadataConfigurationOptions
{
public:
	char *ConfigurationToken;	/* optional element of type tt:ReferenceToken */
	char *ProfileToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 220; } /* = unique id SOAP_TYPE__trt__GetMetadataConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetMetadataConfigurationOptions(): ConfigurationToken(NULL), ProfileToken(NULL), soap(NULL) { _trt__GetMetadataConfigurationOptions::soap_default(NULL); }
	virtual ~_trt__GetMetadataConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetMetadataConfigurationOptionsResponse (221)
/* trt:GetMetadataConfigurationOptionsResponse */
class SOAP_CMAC _trt__GetMetadataConfigurationOptionsResponse
{
public:
	class tt__MetadataConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:MetadataConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 221; } /* = unique id SOAP_TYPE__trt__GetMetadataConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetMetadataConfigurationOptionsResponse(): Options(NULL), soap(NULL) { _trt__GetMetadataConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetMetadataConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationOptions
#define SOAP_TYPE__trt__GetAudioOutputConfigurationOptions (222)
/* trt:GetAudioOutputConfigurationOptions */
class SOAP_CMAC _trt__GetAudioOutputConfigurationOptions
{
public:
	char *ConfigurationToken;	/* optional element of type tt:ReferenceToken */
	char *ProfileToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 222; } /* = unique id SOAP_TYPE__trt__GetAudioOutputConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioOutputConfigurationOptions(): ConfigurationToken(NULL), ProfileToken(NULL), soap(NULL) { _trt__GetAudioOutputConfigurationOptions::soap_default(NULL); }
	virtual ~_trt__GetAudioOutputConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetAudioOutputConfigurationOptionsResponse (223)
/* trt:GetAudioOutputConfigurationOptionsResponse */
class SOAP_CMAC _trt__GetAudioOutputConfigurationOptionsResponse
{
public:
	class tt__AudioOutputConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioOutputConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 223; } /* = unique id SOAP_TYPE__trt__GetAudioOutputConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioOutputConfigurationOptionsResponse(): Options(NULL), soap(NULL) { _trt__GetAudioOutputConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioOutputConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationOptions
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationOptions (224)
/* trt:GetAudioDecoderConfigurationOptions */
class SOAP_CMAC _trt__GetAudioDecoderConfigurationOptions
{
public:
	char *ConfigurationToken;	/* optional element of type tt:ReferenceToken */
	char *ProfileToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 224; } /* = unique id SOAP_TYPE__trt__GetAudioDecoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioDecoderConfigurationOptions(): ConfigurationToken(NULL), ProfileToken(NULL), soap(NULL) { _trt__GetAudioDecoderConfigurationOptions::soap_default(NULL); }
	virtual ~_trt__GetAudioDecoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationOptionsResponse (225)
/* trt:GetAudioDecoderConfigurationOptionsResponse */
class SOAP_CMAC _trt__GetAudioDecoderConfigurationOptionsResponse
{
public:
	class tt__AudioDecoderConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioDecoderConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 225; } /* = unique id SOAP_TYPE__trt__GetAudioDecoderConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioDecoderConfigurationOptionsResponse(): Options(NULL), soap(NULL) { _trt__GetAudioDecoderConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioDecoderConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstances
#define SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstances (226)
/* trt:GetGuaranteedNumberOfVideoEncoderInstances */
class SOAP_CMAC _trt__GetGuaranteedNumberOfVideoEncoderInstances
{
public:
	char *ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 226; } /* = unique id SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstances */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetGuaranteedNumberOfVideoEncoderInstances(): ConfigurationToken(NULL), soap(NULL) { _trt__GetGuaranteedNumberOfVideoEncoderInstances::soap_default(NULL); }
	virtual ~_trt__GetGuaranteedNumberOfVideoEncoderInstances() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse
#define SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse (227)
/* trt:GetGuaranteedNumberOfVideoEncoderInstancesResponse */
class SOAP_CMAC _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse
{
public:
	int TotalNumber;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	int *JPEG;	/* optional element of type xsd:int */
	int *H264;	/* optional element of type xsd:int */
	int *MPEG4;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 227; } /* = unique id SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(): JPEG(NULL), H264(NULL), MPEG4(NULL), soap(NULL) { _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse::soap_default(NULL); }
	virtual ~_trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetStreamUri
#define SOAP_TYPE__trt__GetStreamUri (228)
/* trt:GetStreamUri */
class SOAP_CMAC _trt__GetStreamUri
{
public:
	class tt__StreamSetup *StreamSetup;	/* required element of type tt:StreamSetup */
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 228; } /* = unique id SOAP_TYPE__trt__GetStreamUri */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetStreamUri(): StreamSetup(NULL), ProfileToken(NULL), soap(NULL) { _trt__GetStreamUri::soap_default(NULL); }
	virtual ~_trt__GetStreamUri() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetStreamUriResponse
#define SOAP_TYPE__trt__GetStreamUriResponse (229)
/* trt:GetStreamUriResponse */
class SOAP_CMAC _trt__GetStreamUriResponse
{
public:
	class tt__MediaUri *MediaUri;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:MediaUri */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 229; } /* = unique id SOAP_TYPE__trt__GetStreamUriResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetStreamUriResponse(): MediaUri(NULL), soap(NULL) { _trt__GetStreamUriResponse::soap_default(NULL); }
	virtual ~_trt__GetStreamUriResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__StartMulticastStreaming
#define SOAP_TYPE__trt__StartMulticastStreaming (230)
/* trt:StartMulticastStreaming */
class SOAP_CMAC _trt__StartMulticastStreaming
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 230; } /* = unique id SOAP_TYPE__trt__StartMulticastStreaming */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__StartMulticastStreaming(): ProfileToken(NULL), soap(NULL) { _trt__StartMulticastStreaming::soap_default(NULL); }
	virtual ~_trt__StartMulticastStreaming() { }
};
#endif

#ifndef SOAP_TYPE__trt__StartMulticastStreamingResponse
#define SOAP_TYPE__trt__StartMulticastStreamingResponse (231)
/* trt:StartMulticastStreamingResponse */
class SOAP_CMAC _trt__StartMulticastStreamingResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 231; } /* = unique id SOAP_TYPE__trt__StartMulticastStreamingResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__StartMulticastStreamingResponse(): soap(NULL) { _trt__StartMulticastStreamingResponse::soap_default(NULL); }
	virtual ~_trt__StartMulticastStreamingResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__StopMulticastStreaming
#define SOAP_TYPE__trt__StopMulticastStreaming (232)
/* trt:StopMulticastStreaming */
class SOAP_CMAC _trt__StopMulticastStreaming
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 232; } /* = unique id SOAP_TYPE__trt__StopMulticastStreaming */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__StopMulticastStreaming(): ProfileToken(NULL), soap(NULL) { _trt__StopMulticastStreaming::soap_default(NULL); }
	virtual ~_trt__StopMulticastStreaming() { }
};
#endif

#ifndef SOAP_TYPE__trt__StopMulticastStreamingResponse
#define SOAP_TYPE__trt__StopMulticastStreamingResponse (233)
/* trt:StopMulticastStreamingResponse */
class SOAP_CMAC _trt__StopMulticastStreamingResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 233; } /* = unique id SOAP_TYPE__trt__StopMulticastStreamingResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__StopMulticastStreamingResponse(): soap(NULL) { _trt__StopMulticastStreamingResponse::soap_default(NULL); }
	virtual ~_trt__StopMulticastStreamingResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetSynchronizationPoint
#define SOAP_TYPE__trt__SetSynchronizationPoint (234)
/* trt:SetSynchronizationPoint */
class SOAP_CMAC _trt__SetSynchronizationPoint
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 234; } /* = unique id SOAP_TYPE__trt__SetSynchronizationPoint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetSynchronizationPoint(): ProfileToken(NULL), soap(NULL) { _trt__SetSynchronizationPoint::soap_default(NULL); }
	virtual ~_trt__SetSynchronizationPoint() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetSynchronizationPointResponse
#define SOAP_TYPE__trt__SetSynchronizationPointResponse (235)
/* trt:SetSynchronizationPointResponse */
class SOAP_CMAC _trt__SetSynchronizationPointResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 235; } /* = unique id SOAP_TYPE__trt__SetSynchronizationPointResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetSynchronizationPointResponse(): soap(NULL) { _trt__SetSynchronizationPointResponse::soap_default(NULL); }
	virtual ~_trt__SetSynchronizationPointResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetSnapshotUri
#define SOAP_TYPE__trt__GetSnapshotUri (236)
/* trt:GetSnapshotUri */
class SOAP_CMAC _trt__GetSnapshotUri
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 236; } /* = unique id SOAP_TYPE__trt__GetSnapshotUri */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetSnapshotUri(): ProfileToken(NULL), soap(NULL) { _trt__GetSnapshotUri::soap_default(NULL); }
	virtual ~_trt__GetSnapshotUri() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetSnapshotUriResponse
#define SOAP_TYPE__trt__GetSnapshotUriResponse (237)
/* trt:GetSnapshotUriResponse */
class SOAP_CMAC _trt__GetSnapshotUriResponse
{
public:
	tt__MediaUri *MediaUri;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:MediaUri */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 237; } /* = unique id SOAP_TYPE__trt__GetSnapshotUriResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetSnapshotUriResponse(): MediaUri(NULL), soap(NULL) { _trt__GetSnapshotUriResponse::soap_default(NULL); }
	virtual ~_trt__GetSnapshotUriResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceModes
#define SOAP_TYPE__trt__GetVideoSourceModes (238)
/* trt:GetVideoSourceModes */
class SOAP_CMAC _trt__GetVideoSourceModes
{
public:
	char *VideoSourceToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 238; } /* = unique id SOAP_TYPE__trt__GetVideoSourceModes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceModes(): VideoSourceToken(NULL), soap(NULL) { _trt__GetVideoSourceModes::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceModes() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceModesResponse
#define SOAP_TYPE__trt__GetVideoSourceModesResponse (239)
/* trt:GetVideoSourceModesResponse */
class SOAP_CMAC _trt__GetVideoSourceModesResponse
{
public:
	int __sizeVideoSourceModes;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <VideoSourceModes> */
	trt__VideoSourceMode **VideoSourceModes;	/* required element of type trt:VideoSourceMode */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 239; } /* = unique id SOAP_TYPE__trt__GetVideoSourceModesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceModesResponse(): VideoSourceModes(NULL), soap(NULL) { _trt__GetVideoSourceModesResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceModesResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetVideoSourceMode
#define SOAP_TYPE__trt__SetVideoSourceMode (240)
/* trt:SetVideoSourceMode */
class SOAP_CMAC _trt__SetVideoSourceMode
{
public:
	char *VideoSourceToken;	/* required element of type tt:ReferenceToken */
	char *VideoSourceModeToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 240; } /* = unique id SOAP_TYPE__trt__SetVideoSourceMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoSourceMode(): VideoSourceToken(NULL), VideoSourceModeToken(NULL), soap(NULL) { _trt__SetVideoSourceMode::soap_default(NULL); }
	virtual ~_trt__SetVideoSourceMode() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetVideoSourceModeResponse
#define SOAP_TYPE__trt__SetVideoSourceModeResponse (241)
/* trt:SetVideoSourceModeResponse */
class SOAP_CMAC _trt__SetVideoSourceModeResponse
{
public:
	bool Reboot;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 241; } /* = unique id SOAP_TYPE__trt__SetVideoSourceModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoSourceModeResponse(): soap(NULL) { _trt__SetVideoSourceModeResponse::soap_default(NULL); }
	virtual ~_trt__SetVideoSourceModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetOSDs
#define SOAP_TYPE__trt__GetOSDs (242)
/* trt:GetOSDs */
class SOAP_CMAC _trt__GetOSDs
{
public:
	char *ConfigurationToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 242; } /* = unique id SOAP_TYPE__trt__GetOSDs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetOSDs(): ConfigurationToken(NULL), soap(NULL) { _trt__GetOSDs::soap_default(NULL); }
	virtual ~_trt__GetOSDs() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetOSDsResponse
#define SOAP_TYPE__trt__GetOSDsResponse (243)
/* trt:GetOSDsResponse */
class SOAP_CMAC _trt__GetOSDsResponse
{
public:
	int __sizeOSDs;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <OSDs> */
	class tt__OSDConfiguration **OSDs;	/* optional element of type tt:OSDConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 243; } /* = unique id SOAP_TYPE__trt__GetOSDsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetOSDsResponse(): OSDs(NULL), soap(NULL) { _trt__GetOSDsResponse::soap_default(NULL); }
	virtual ~_trt__GetOSDsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetOSD
#define SOAP_TYPE__trt__GetOSD (244)
/* trt:GetOSD */
class SOAP_CMAC _trt__GetOSD
{
public:
	char *OSDToken;	/* required element of type tt:ReferenceToken */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 244; } /* = unique id SOAP_TYPE__trt__GetOSD */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetOSD(): OSDToken(NULL), __any(NULL), soap(NULL) { _trt__GetOSD::soap_default(NULL); }
	virtual ~_trt__GetOSD() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetOSDResponse
#define SOAP_TYPE__trt__GetOSDResponse (245)
/* trt:GetOSDResponse */
class SOAP_CMAC _trt__GetOSDResponse
{
public:
	tt__OSDConfiguration *OSD;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:OSDConfiguration */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 245; } /* = unique id SOAP_TYPE__trt__GetOSDResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetOSDResponse(): OSD(NULL), __any(NULL), soap(NULL) { _trt__GetOSDResponse::soap_default(NULL); }
	virtual ~_trt__GetOSDResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetOSD
#define SOAP_TYPE__trt__SetOSD (246)
/* trt:SetOSD */
class SOAP_CMAC _trt__SetOSD
{
public:
	tt__OSDConfiguration *OSD;	/* required element of type tt:OSDConfiguration */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 246; } /* = unique id SOAP_TYPE__trt__SetOSD */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetOSD(): OSD(NULL), __any(NULL), soap(NULL) { _trt__SetOSD::soap_default(NULL); }
	virtual ~_trt__SetOSD() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetOSDResponse
#define SOAP_TYPE__trt__SetOSDResponse (247)
/* trt:SetOSDResponse */
class SOAP_CMAC _trt__SetOSDResponse
{
public:
	int __size;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 247; } /* = unique id SOAP_TYPE__trt__SetOSDResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetOSDResponse(): __any(NULL), soap(NULL) { _trt__SetOSDResponse::soap_default(NULL); }
	virtual ~_trt__SetOSDResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetOSDOptions
#define SOAP_TYPE__trt__GetOSDOptions (248)
/* trt:GetOSDOptions */
class SOAP_CMAC _trt__GetOSDOptions
{
public:
	char *ConfigurationToken;	/* required element of type tt:ReferenceToken */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 248; } /* = unique id SOAP_TYPE__trt__GetOSDOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetOSDOptions(): ConfigurationToken(NULL), __any(NULL), soap(NULL) { _trt__GetOSDOptions::soap_default(NULL); }
	virtual ~_trt__GetOSDOptions() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetOSDOptionsResponse
#define SOAP_TYPE__trt__GetOSDOptionsResponse (249)
/* trt:GetOSDOptionsResponse */
class SOAP_CMAC _trt__GetOSDOptionsResponse
{
public:
	class tt__OSDConfigurationOptions *OSDOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:OSDConfigurationOptions */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 249; } /* = unique id SOAP_TYPE__trt__GetOSDOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetOSDOptionsResponse(): OSDOptions(NULL), __any(NULL), soap(NULL) { _trt__GetOSDOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetOSDOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__CreateOSD
#define SOAP_TYPE__trt__CreateOSD (250)
/* trt:CreateOSD */
class SOAP_CMAC _trt__CreateOSD
{
public:
	tt__OSDConfiguration *OSD;	/* required element of type tt:OSDConfiguration */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 250; } /* = unique id SOAP_TYPE__trt__CreateOSD */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__CreateOSD(): OSD(NULL), __any(NULL), soap(NULL) { _trt__CreateOSD::soap_default(NULL); }
	virtual ~_trt__CreateOSD() { }
};
#endif

#ifndef SOAP_TYPE__trt__CreateOSDResponse
#define SOAP_TYPE__trt__CreateOSDResponse (251)
/* trt:CreateOSDResponse */
class SOAP_CMAC _trt__CreateOSDResponse
{
public:
	char *OSDToken;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:ReferenceToken */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 251; } /* = unique id SOAP_TYPE__trt__CreateOSDResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__CreateOSDResponse(): OSDToken(NULL), __any(NULL), soap(NULL) { _trt__CreateOSDResponse::soap_default(NULL); }
	virtual ~_trt__CreateOSDResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__DeleteOSD
#define SOAP_TYPE__trt__DeleteOSD (252)
/* trt:DeleteOSD */
class SOAP_CMAC _trt__DeleteOSD
{
public:
	char *OSDToken;	/* required element of type tt:ReferenceToken */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 252; } /* = unique id SOAP_TYPE__trt__DeleteOSD */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__DeleteOSD(): OSDToken(NULL), __any(NULL), soap(NULL) { _trt__DeleteOSD::soap_default(NULL); }
	virtual ~_trt__DeleteOSD() { }
};
#endif

#ifndef SOAP_TYPE__trt__DeleteOSDResponse
#define SOAP_TYPE__trt__DeleteOSDResponse (253)
/* trt:DeleteOSDResponse */
class SOAP_CMAC _trt__DeleteOSDResponse
{
public:
	int __size;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 253; } /* = unique id SOAP_TYPE__trt__DeleteOSDResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__DeleteOSDResponse(): __any(NULL), soap(NULL) { _trt__DeleteOSDResponse::soap_default(NULL); }
	virtual ~_trt__DeleteOSDResponse() { }
};
#endif

#ifndef SOAP_TYPE_tt__DeviceEntity
#define SOAP_TYPE_tt__DeviceEntity (254)
/* tt:DeviceEntity */
class SOAP_CMAC tt__DeviceEntity
{
public:
	char *token;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 254; } /* = unique id SOAP_TYPE_tt__DeviceEntity */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DeviceEntity(): token(NULL), soap(NULL) { tt__DeviceEntity::soap_default(NULL); }
	virtual ~tt__DeviceEntity() { }
};
#endif

#ifndef SOAP_TYPE_tt__IntRectangle
#define SOAP_TYPE_tt__IntRectangle (255)
/* tt:IntRectangle */
class SOAP_CMAC tt__IntRectangle
{
public:
	int x;	/* required attribute */
	int y;	/* required attribute */
	int width;	/* required attribute */
	int height;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 255; } /* = unique id SOAP_TYPE_tt__IntRectangle */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IntRectangle(): soap(NULL) { tt__IntRectangle::soap_default(NULL); }
	virtual ~tt__IntRectangle() { }
};
#endif

#ifndef SOAP_TYPE_tt__IntRectangleRange
#define SOAP_TYPE_tt__IntRectangleRange (256)
/* tt:IntRectangleRange */
class SOAP_CMAC tt__IntRectangleRange
{
public:
	class tt__IntRange *XRange;	/* required element of type tt:IntRange */
	tt__IntRange *YRange;	/* required element of type tt:IntRange */
	tt__IntRange *WidthRange;	/* required element of type tt:IntRange */
	tt__IntRange *HeightRange;	/* required element of type tt:IntRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 256; } /* = unique id SOAP_TYPE_tt__IntRectangleRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IntRectangleRange(): XRange(NULL), YRange(NULL), WidthRange(NULL), HeightRange(NULL), soap(NULL) { tt__IntRectangleRange::soap_default(NULL); }
	virtual ~tt__IntRectangleRange() { }
};
#endif

#ifndef SOAP_TYPE_tt__IntRange
#define SOAP_TYPE_tt__IntRange (257)
/* tt:IntRange */
class SOAP_CMAC tt__IntRange
{
public:
	int Min;	/* required element of type xsd:int */
	int Max;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 257; } /* = unique id SOAP_TYPE_tt__IntRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IntRange(): soap(NULL) { tt__IntRange::soap_default(NULL); }
	virtual ~tt__IntRange() { }
};
#endif

#ifndef SOAP_TYPE_tt__FloatRange
#define SOAP_TYPE_tt__FloatRange (258)
/* tt:FloatRange */
class SOAP_CMAC tt__FloatRange
{
public:
	float Min;	/* required element of type xsd:float */
	float Max;	/* required element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 258; } /* = unique id SOAP_TYPE_tt__FloatRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FloatRange(): soap(NULL) { tt__FloatRange::soap_default(NULL); }
	virtual ~tt__FloatRange() { }
};
#endif

#ifndef SOAP_TYPE_tt__DurationRange
#define SOAP_TYPE_tt__DurationRange (259)
/* tt:DurationRange */
class SOAP_CMAC tt__DurationRange
{
public:
	LONG64 Min;	/* external */
	LONG64 Max;	/* external */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 259; } /* = unique id SOAP_TYPE_tt__DurationRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DurationRange(): soap(NULL) { tt__DurationRange::soap_default(NULL); }
	virtual ~tt__DurationRange() { }
};
#endif

#ifndef SOAP_TYPE_tt__IntList
#define SOAP_TYPE_tt__IntList (260)
/* tt:IntList */
class SOAP_CMAC tt__IntList
{
public:
	int __sizeItems;	/* sequence of elements <Items> */
	int *Items;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 260; } /* = unique id SOAP_TYPE_tt__IntList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IntList(): Items(NULL), soap(NULL) { tt__IntList::soap_default(NULL); }
	virtual ~tt__IntList() { }
};
#endif

#ifndef SOAP_TYPE_tt__FloatList
#define SOAP_TYPE_tt__FloatList (261)
/* tt:FloatList */
class SOAP_CMAC tt__FloatList
{
public:
	int __sizeItems;	/* sequence of elements <Items> */
	float *Items;	/* optional element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 261; } /* = unique id SOAP_TYPE_tt__FloatList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FloatList(): Items(NULL), soap(NULL) { tt__FloatList::soap_default(NULL); }
	virtual ~tt__FloatList() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnyHolder
#define SOAP_TYPE_tt__AnyHolder (262)
/* tt:AnyHolder */
class SOAP_CMAC tt__AnyHolder
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 262; } /* = unique id SOAP_TYPE_tt__AnyHolder */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnyHolder(): __any(NULL), soap(NULL) { tt__AnyHolder::soap_default(NULL); }
	virtual ~tt__AnyHolder() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSourceExtension
#define SOAP_TYPE_tt__VideoSourceExtension (264)
/* tt:VideoSourceExtension */
class SOAP_CMAC tt__VideoSourceExtension
{
public:
	class tt__ImagingSettings20 *Imaging;	/* optional element of type tt:ImagingSettings20 */
	class tt__VideoSourceExtension2 *Extension;	/* optional element of type tt:VideoSourceExtension2 */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 264; } /* = unique id SOAP_TYPE_tt__VideoSourceExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSourceExtension(): Imaging(NULL), Extension(NULL), __any(NULL), soap(NULL) { tt__VideoSourceExtension::soap_default(NULL); }
	virtual ~tt__VideoSourceExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSourceExtension2
#define SOAP_TYPE_tt__VideoSourceExtension2 (265)
/* tt:VideoSourceExtension2 */
class SOAP_CMAC tt__VideoSourceExtension2
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 265; } /* = unique id SOAP_TYPE_tt__VideoSourceExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSourceExtension2(): __any(NULL), soap(NULL) { tt__VideoSourceExtension2::soap_default(NULL); }
	virtual ~tt__VideoSourceExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__Profile
#define SOAP_TYPE_tt__Profile (267)
/* tt:Profile */
class SOAP_CMAC tt__Profile
{
public:
	char *Name;	/* required element of type tt:Name */
	tt__VideoSourceConfiguration *VideoSourceConfiguration;	/* optional element of type tt:VideoSourceConfiguration */
	tt__AudioSourceConfiguration *AudioSourceConfiguration;	/* optional element of type tt:AudioSourceConfiguration */
	tt__VideoEncoderConfiguration *VideoEncoderConfiguration;	/* optional element of type tt:VideoEncoderConfiguration */
	tt__AudioEncoderConfiguration *AudioEncoderConfiguration;	/* optional element of type tt:AudioEncoderConfiguration */
	tt__VideoAnalyticsConfiguration *VideoAnalyticsConfiguration;	/* optional element of type tt:VideoAnalyticsConfiguration */
	class tt__PTZConfiguration *PTZConfiguration;	/* optional element of type tt:PTZConfiguration */
	tt__MetadataConfiguration *MetadataConfiguration;	/* optional element of type tt:MetadataConfiguration */
	class tt__ProfileExtension *Extension;	/* optional element of type tt:ProfileExtension */
	char *token;	/* required attribute */
	bool *fixed;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 267; } /* = unique id SOAP_TYPE_tt__Profile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Profile(): Name(NULL), VideoSourceConfiguration(NULL), AudioSourceConfiguration(NULL), VideoEncoderConfiguration(NULL), AudioEncoderConfiguration(NULL), VideoAnalyticsConfiguration(NULL), PTZConfiguration(NULL), MetadataConfiguration(NULL), Extension(NULL), token(NULL), fixed(NULL), soap(NULL) { tt__Profile::soap_default(NULL); }
	virtual ~tt__Profile() { }
};
#endif

#ifndef SOAP_TYPE_tt__ProfileExtension
#define SOAP_TYPE_tt__ProfileExtension (268)
/* tt:ProfileExtension */
class SOAP_CMAC tt__ProfileExtension
{
public:
	tt__AudioOutputConfiguration *AudioOutputConfiguration;	/* optional element of type tt:AudioOutputConfiguration */
	tt__AudioDecoderConfiguration *AudioDecoderConfiguration;	/* optional element of type tt:AudioDecoderConfiguration */
	class tt__ProfileExtension2 *Extension;	/* optional element of type tt:ProfileExtension2 */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 268; } /* = unique id SOAP_TYPE_tt__ProfileExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ProfileExtension(): AudioOutputConfiguration(NULL), AudioDecoderConfiguration(NULL), Extension(NULL), __any(NULL), soap(NULL) { tt__ProfileExtension::soap_default(NULL); }
	virtual ~tt__ProfileExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ProfileExtension2
#define SOAP_TYPE_tt__ProfileExtension2 (269)
/* tt:ProfileExtension2 */
class SOAP_CMAC tt__ProfileExtension2
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 269; } /* = unique id SOAP_TYPE_tt__ProfileExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ProfileExtension2(): __any(NULL), soap(NULL) { tt__ProfileExtension2::soap_default(NULL); }
	virtual ~tt__ProfileExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__ConfigurationEntity
#define SOAP_TYPE_tt__ConfigurationEntity (270)
/* tt:ConfigurationEntity */
class SOAP_CMAC tt__ConfigurationEntity
{
public:
	char *Name;	/* required element of type tt:Name */
	int UseCount;	/* required element of type xsd:int */
	char *token;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 270; } /* = unique id SOAP_TYPE_tt__ConfigurationEntity */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ConfigurationEntity(): Name(NULL), token(NULL), soap(NULL) { tt__ConfigurationEntity::soap_default(NULL); }
	virtual ~tt__ConfigurationEntity() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfigurationExtension
#define SOAP_TYPE_tt__VideoSourceConfigurationExtension (272)
/* tt:VideoSourceConfigurationExtension */
class SOAP_CMAC tt__VideoSourceConfigurationExtension
{
public:
	class tt__Rotate *Rotate;	/* optional element of type tt:Rotate */
	class tt__VideoSourceConfigurationExtension2 *Extension;	/* optional element of type tt:VideoSourceConfigurationExtension2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 272; } /* = unique id SOAP_TYPE_tt__VideoSourceConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSourceConfigurationExtension(): Rotate(NULL), Extension(NULL), soap(NULL) { tt__VideoSourceConfigurationExtension::soap_default(NULL); }
	virtual ~tt__VideoSourceConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfigurationExtension2
#define SOAP_TYPE_tt__VideoSourceConfigurationExtension2 (273)
/* tt:VideoSourceConfigurationExtension2 */
class SOAP_CMAC tt__VideoSourceConfigurationExtension2
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 273; } /* = unique id SOAP_TYPE_tt__VideoSourceConfigurationExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSourceConfigurationExtension2(): __any(NULL), soap(NULL) { tt__VideoSourceConfigurationExtension2::soap_default(NULL); }
	virtual ~tt__VideoSourceConfigurationExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__Rotate
#define SOAP_TYPE_tt__Rotate (274)
/* tt:Rotate */
class SOAP_CMAC tt__Rotate
{
public:
	enum tt__RotateMode Mode;	/* required element of type tt:RotateMode */
	int *Degree;	/* optional element of type xsd:int */
	class tt__RotateExtension *Extension;	/* optional element of type tt:RotateExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 274; } /* = unique id SOAP_TYPE_tt__Rotate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Rotate(): Degree(NULL), Extension(NULL), soap(NULL) { tt__Rotate::soap_default(NULL); }
	virtual ~tt__Rotate() { }
};
#endif

#ifndef SOAP_TYPE_tt__RotateExtension
#define SOAP_TYPE_tt__RotateExtension (275)
/* tt:RotateExtension */
class SOAP_CMAC tt__RotateExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 275; } /* = unique id SOAP_TYPE_tt__RotateExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RotateExtension(): __any(NULL), soap(NULL) { tt__RotateExtension::soap_default(NULL); }
	virtual ~tt__RotateExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfigurationOptions
#define SOAP_TYPE_tt__VideoSourceConfigurationOptions (276)
/* tt:VideoSourceConfigurationOptions */
class SOAP_CMAC tt__VideoSourceConfigurationOptions
{
public:
	tt__IntRectangleRange *BoundsRange;	/* required element of type tt:IntRectangleRange */
	int __sizeVideoSourceTokensAvailable;	/* sequence of elements <VideoSourceTokensAvailable> */
	char **VideoSourceTokensAvailable;	/* required element of type tt:ReferenceToken */
	class tt__VideoSourceConfigurationOptionsExtension *Extension;	/* optional element of type tt:VideoSourceConfigurationOptionsExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 276; } /* = unique id SOAP_TYPE_tt__VideoSourceConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSourceConfigurationOptions(): BoundsRange(NULL), VideoSourceTokensAvailable(NULL), Extension(NULL), soap(NULL) { tt__VideoSourceConfigurationOptions::soap_default(NULL); }
	virtual ~tt__VideoSourceConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension
#define SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension (277)
/* tt:VideoSourceConfigurationOptionsExtension */
class SOAP_CMAC tt__VideoSourceConfigurationOptionsExtension
{
public:
	class tt__RotateOptions *Rotate;	/* optional element of type tt:RotateOptions */
	class tt__VideoSourceConfigurationOptionsExtension2 *Extension;	/* optional element of type tt:VideoSourceConfigurationOptionsExtension2 */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 277; } /* = unique id SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSourceConfigurationOptionsExtension(): Rotate(NULL), Extension(NULL), __any(NULL), soap(NULL) { tt__VideoSourceConfigurationOptionsExtension::soap_default(NULL); }
	virtual ~tt__VideoSourceConfigurationOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2
#define SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2 (278)
/* tt:VideoSourceConfigurationOptionsExtension2 */
class SOAP_CMAC tt__VideoSourceConfigurationOptionsExtension2
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 278; } /* = unique id SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSourceConfigurationOptionsExtension2(): __any(NULL), soap(NULL) { tt__VideoSourceConfigurationOptionsExtension2::soap_default(NULL); }
	virtual ~tt__VideoSourceConfigurationOptionsExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__RotateOptions
#define SOAP_TYPE_tt__RotateOptions (279)
/* tt:RotateOptions */
class SOAP_CMAC tt__RotateOptions
{
public:
	int __sizeMode;	/* sequence of elements <Mode> */
	enum tt__RotateMode *Mode;	/* required element of type tt:RotateMode */
	tt__IntList *DegreeList;	/* optional element of type tt:IntList */
	class tt__RotateOptionsExtension *Extension;	/* optional element of type tt:RotateOptionsExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 279; } /* = unique id SOAP_TYPE_tt__RotateOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RotateOptions(): Mode(NULL), DegreeList(NULL), Extension(NULL), soap(NULL) { tt__RotateOptions::soap_default(NULL); }
	virtual ~tt__RotateOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__RotateOptionsExtension
#define SOAP_TYPE_tt__RotateOptionsExtension (280)
/* tt:RotateOptionsExtension */
class SOAP_CMAC tt__RotateOptionsExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 280; } /* = unique id SOAP_TYPE_tt__RotateOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RotateOptionsExtension(): __any(NULL), soap(NULL) { tt__RotateOptionsExtension::soap_default(NULL); }
	virtual ~tt__RotateOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoResolution
#define SOAP_TYPE_tt__VideoResolution (282)
/* tt:VideoResolution */
class SOAP_CMAC tt__VideoResolution
{
public:
	int Width;	/* required element of type xsd:int */
	int Height;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 282; } /* = unique id SOAP_TYPE_tt__VideoResolution */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoResolution(): soap(NULL) { tt__VideoResolution::soap_default(NULL); }
	virtual ~tt__VideoResolution() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoRateControl
#define SOAP_TYPE_tt__VideoRateControl (283)
/* tt:VideoRateControl */
class SOAP_CMAC tt__VideoRateControl
{
public:
	int FrameRateLimit;	/* required element of type xsd:int */
	int EncodingInterval;	/* required element of type xsd:int */
	int BitrateLimit;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 283; } /* = unique id SOAP_TYPE_tt__VideoRateControl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoRateControl(): soap(NULL) { tt__VideoRateControl::soap_default(NULL); }
	virtual ~tt__VideoRateControl() { }
};
#endif

#ifndef SOAP_TYPE_tt__Mpeg4Configuration
#define SOAP_TYPE_tt__Mpeg4Configuration (284)
/* tt:Mpeg4Configuration */
class SOAP_CMAC tt__Mpeg4Configuration
{
public:
	int GovLength;	/* required element of type xsd:int */
	enum tt__Mpeg4Profile Mpeg4Profile;	/* required element of type tt:Mpeg4Profile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 284; } /* = unique id SOAP_TYPE_tt__Mpeg4Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Mpeg4Configuration(): soap(NULL) { tt__Mpeg4Configuration::soap_default(NULL); }
	virtual ~tt__Mpeg4Configuration() { }
};
#endif

#ifndef SOAP_TYPE_tt__H264Configuration
#define SOAP_TYPE_tt__H264Configuration (285)
/* tt:H264Configuration */
class SOAP_CMAC tt__H264Configuration
{
public:
	int GovLength;	/* required element of type xsd:int */
	enum tt__H264Profile H264Profile;	/* required element of type tt:H264Profile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 285; } /* = unique id SOAP_TYPE_tt__H264Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__H264Configuration(): soap(NULL) { tt__H264Configuration::soap_default(NULL); }
	virtual ~tt__H264Configuration() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoEncoderConfigurationOptions
#define SOAP_TYPE_tt__VideoEncoderConfigurationOptions (286)
/* tt:VideoEncoderConfigurationOptions */
class SOAP_CMAC tt__VideoEncoderConfigurationOptions
{
public:
	tt__IntRange *QualityRange;	/* required element of type tt:IntRange */
	class tt__JpegOptions *JPEG;	/* optional element of type tt:JpegOptions */
	class tt__Mpeg4Options *MPEG4;	/* optional element of type tt:Mpeg4Options */
	class tt__H264Options *H264;	/* optional element of type tt:H264Options */
	class tt__VideoEncoderOptionsExtension *Extension;	/* optional element of type tt:VideoEncoderOptionsExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 286; } /* = unique id SOAP_TYPE_tt__VideoEncoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoEncoderConfigurationOptions(): QualityRange(NULL), JPEG(NULL), MPEG4(NULL), H264(NULL), Extension(NULL), soap(NULL) { tt__VideoEncoderConfigurationOptions::soap_default(NULL); }
	virtual ~tt__VideoEncoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoEncoderOptionsExtension
#define SOAP_TYPE_tt__VideoEncoderOptionsExtension (287)
/* tt:VideoEncoderOptionsExtension */
class SOAP_CMAC tt__VideoEncoderOptionsExtension
{
public:
	class tt__JpegOptions2 *JPEG;	/* optional element of type tt:JpegOptions2 */
	class tt__Mpeg4Options2 *MPEG4;	/* optional element of type tt:Mpeg4Options2 */
	class tt__H264Options2 *H264;	/* optional element of type tt:H264Options2 */
	class tt__VideoEncoderOptionsExtension2 *Extension;	/* optional element of type tt:VideoEncoderOptionsExtension2 */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 287; } /* = unique id SOAP_TYPE_tt__VideoEncoderOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoEncoderOptionsExtension(): JPEG(NULL), MPEG4(NULL), H264(NULL), Extension(NULL), __any(NULL), soap(NULL) { tt__VideoEncoderOptionsExtension::soap_default(NULL); }
	virtual ~tt__VideoEncoderOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoEncoderOptionsExtension2
#define SOAP_TYPE_tt__VideoEncoderOptionsExtension2 (288)
/* tt:VideoEncoderOptionsExtension2 */
class SOAP_CMAC tt__VideoEncoderOptionsExtension2
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 288; } /* = unique id SOAP_TYPE_tt__VideoEncoderOptionsExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoEncoderOptionsExtension2(): __any(NULL), soap(NULL) { tt__VideoEncoderOptionsExtension2::soap_default(NULL); }
	virtual ~tt__VideoEncoderOptionsExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__JpegOptions
#define SOAP_TYPE_tt__JpegOptions (289)
/* tt:JpegOptions */
class SOAP_CMAC tt__JpegOptions
{
public:
	int __sizeResolutionsAvailable;	/* sequence of elements <ResolutionsAvailable> */
	tt__VideoResolution **ResolutionsAvailable;	/* required element of type tt:VideoResolution */
	tt__IntRange *FrameRateRange;	/* required element of type tt:IntRange */
	tt__IntRange *EncodingIntervalRange;	/* required element of type tt:IntRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 289; } /* = unique id SOAP_TYPE_tt__JpegOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__JpegOptions(): ResolutionsAvailable(NULL), FrameRateRange(NULL), EncodingIntervalRange(NULL), soap(NULL) { tt__JpegOptions::soap_default(NULL); }
	virtual ~tt__JpegOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__Mpeg4Options
#define SOAP_TYPE_tt__Mpeg4Options (291)
/* tt:Mpeg4Options */
class SOAP_CMAC tt__Mpeg4Options
{
public:
	int __sizeResolutionsAvailable;	/* sequence of elements <ResolutionsAvailable> */
	tt__VideoResolution **ResolutionsAvailable;	/* required element of type tt:VideoResolution */
	tt__IntRange *GovLengthRange;	/* required element of type tt:IntRange */
	tt__IntRange *FrameRateRange;	/* required element of type tt:IntRange */
	tt__IntRange *EncodingIntervalRange;	/* required element of type tt:IntRange */
	int __sizeMpeg4ProfilesSupported;	/* sequence of elements <Mpeg4ProfilesSupported> */
	enum tt__Mpeg4Profile *Mpeg4ProfilesSupported;	/* required element of type tt:Mpeg4Profile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 291; } /* = unique id SOAP_TYPE_tt__Mpeg4Options */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Mpeg4Options(): ResolutionsAvailable(NULL), GovLengthRange(NULL), FrameRateRange(NULL), EncodingIntervalRange(NULL), Mpeg4ProfilesSupported(NULL), soap(NULL) { tt__Mpeg4Options::soap_default(NULL); }
	virtual ~tt__Mpeg4Options() { }
};
#endif

#ifndef SOAP_TYPE_tt__H264Options
#define SOAP_TYPE_tt__H264Options (293)
/* tt:H264Options */
class SOAP_CMAC tt__H264Options
{
public:
	int __sizeResolutionsAvailable;	/* sequence of elements <ResolutionsAvailable> */
	tt__VideoResolution **ResolutionsAvailable;	/* required element of type tt:VideoResolution */
	tt__IntRange *GovLengthRange;	/* required element of type tt:IntRange */
	tt__IntRange *FrameRateRange;	/* required element of type tt:IntRange */
	tt__IntRange *EncodingIntervalRange;	/* required element of type tt:IntRange */
	int __sizeH264ProfilesSupported;	/* sequence of elements <H264ProfilesSupported> */
	enum tt__H264Profile *H264ProfilesSupported;	/* required element of type tt:H264Profile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 293; } /* = unique id SOAP_TYPE_tt__H264Options */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__H264Options(): ResolutionsAvailable(NULL), GovLengthRange(NULL), FrameRateRange(NULL), EncodingIntervalRange(NULL), H264ProfilesSupported(NULL), soap(NULL) { tt__H264Options::soap_default(NULL); }
	virtual ~tt__H264Options() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioSourceConfigurationOptions
#define SOAP_TYPE_tt__AudioSourceConfigurationOptions (296)
/* tt:AudioSourceConfigurationOptions */
class SOAP_CMAC tt__AudioSourceConfigurationOptions
{
public:
	int __sizeInputTokensAvailable;	/* sequence of elements <InputTokensAvailable> */
	char **InputTokensAvailable;	/* required element of type tt:ReferenceToken */
	class tt__AudioSourceOptionsExtension *Extension;	/* optional element of type tt:AudioSourceOptionsExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 296; } /* = unique id SOAP_TYPE_tt__AudioSourceConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioSourceConfigurationOptions(): InputTokensAvailable(NULL), Extension(NULL), soap(NULL) { tt__AudioSourceConfigurationOptions::soap_default(NULL); }
	virtual ~tt__AudioSourceConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioSourceOptionsExtension
#define SOAP_TYPE_tt__AudioSourceOptionsExtension (297)
/* tt:AudioSourceOptionsExtension */
class SOAP_CMAC tt__AudioSourceOptionsExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 297; } /* = unique id SOAP_TYPE_tt__AudioSourceOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioSourceOptionsExtension(): __any(NULL), soap(NULL) { tt__AudioSourceOptionsExtension::soap_default(NULL); }
	virtual ~tt__AudioSourceOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioEncoderConfigurationOptions
#define SOAP_TYPE_tt__AudioEncoderConfigurationOptions (299)
/* tt:AudioEncoderConfigurationOptions */
class SOAP_CMAC tt__AudioEncoderConfigurationOptions
{
public:
	int __sizeOptions;	/* sequence of elements <Options> */
	class tt__AudioEncoderConfigurationOption **Options;	/* optional element of type tt:AudioEncoderConfigurationOption */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 299; } /* = unique id SOAP_TYPE_tt__AudioEncoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioEncoderConfigurationOptions(): Options(NULL), soap(NULL) { tt__AudioEncoderConfigurationOptions::soap_default(NULL); }
	virtual ~tt__AudioEncoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioEncoderConfigurationOption
#define SOAP_TYPE_tt__AudioEncoderConfigurationOption (300)
/* tt:AudioEncoderConfigurationOption */
class SOAP_CMAC tt__AudioEncoderConfigurationOption
{
public:
	enum tt__AudioEncoding Encoding;	/* required element of type tt:AudioEncoding */
	tt__IntList *BitrateList;	/* required element of type tt:IntList */
	tt__IntList *SampleRateList;	/* required element of type tt:IntList */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 300; } /* = unique id SOAP_TYPE_tt__AudioEncoderConfigurationOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioEncoderConfigurationOption(): BitrateList(NULL), SampleRateList(NULL), __any(NULL), soap(NULL) { tt__AudioEncoderConfigurationOption::soap_default(NULL); }
	virtual ~tt__AudioEncoderConfigurationOption() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataConfigurationExtension
#define SOAP_TYPE_tt__MetadataConfigurationExtension (303)
/* tt:MetadataConfigurationExtension */
class SOAP_CMAC tt__MetadataConfigurationExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 303; } /* = unique id SOAP_TYPE_tt__MetadataConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataConfigurationExtension(): __any(NULL), soap(NULL) { tt__MetadataConfigurationExtension::soap_default(NULL); }
	virtual ~tt__MetadataConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZFilter
#define SOAP_TYPE_tt__PTZFilter (304)
/* tt:PTZFilter */
class SOAP_CMAC tt__PTZFilter
{
public:
	bool Status;	/* required element of type xsd:boolean */
	bool Position;	/* required element of type xsd:boolean */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 304; } /* = unique id SOAP_TYPE_tt__PTZFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZFilter(): soap(NULL) { tt__PTZFilter::soap_default(NULL); }
	virtual ~tt__PTZFilter() { }
};
#endif

#ifndef SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy
#define SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy (1086)
/* tt:EventSubscription-SubscriptionPolicy */
class SOAP_CMAC _tt__EventSubscription_SubscriptionPolicy
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
public:
	virtual int soap_type() const { return 1086; } /* = unique id SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__EventSubscription_SubscriptionPolicy(): __any(NULL) { _tt__EventSubscription_SubscriptionPolicy::soap_default(NULL); }
	virtual ~_tt__EventSubscription_SubscriptionPolicy() { }
};
#endif

#ifndef SOAP_TYPE_tt__EventSubscription
#define SOAP_TYPE_tt__EventSubscription (305)
/* tt:EventSubscription */
class SOAP_CMAC tt__EventSubscription
{
public:
	class wsnt__FilterType *Filter;	/* optional element of type wsnt:FilterType */
	_tt__EventSubscription_SubscriptionPolicy *SubscriptionPolicy;	/* optional element of type tt:EventSubscription-SubscriptionPolicy */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 305; } /* = unique id SOAP_TYPE_tt__EventSubscription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EventSubscription(): Filter(NULL), SubscriptionPolicy(NULL), __any(NULL), soap(NULL) { tt__EventSubscription::soap_default(NULL); }
	virtual ~tt__EventSubscription() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataConfigurationOptions
#define SOAP_TYPE_tt__MetadataConfigurationOptions (306)
/* tt:MetadataConfigurationOptions */
class SOAP_CMAC tt__MetadataConfigurationOptions
{
public:
	class tt__PTZStatusFilterOptions *PTZStatusFilterOptions;	/* required element of type tt:PTZStatusFilterOptions */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 306; } /* = unique id SOAP_TYPE_tt__MetadataConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataConfigurationOptions(): PTZStatusFilterOptions(NULL), __any(NULL), soap(NULL) { tt__MetadataConfigurationOptions::soap_default(NULL); }
	virtual ~tt__MetadataConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZStatusFilterOptions
#define SOAP_TYPE_tt__PTZStatusFilterOptions (307)
/* tt:PTZStatusFilterOptions */
class SOAP_CMAC tt__PTZStatusFilterOptions
{
public:
	bool PanTiltStatusSupported;	/* required element of type xsd:boolean */
	bool ZoomStatusSupported;	/* required element of type xsd:boolean */
	bool *PanTiltPositionSupported;	/* optional element of type xsd:boolean */
	bool *ZoomPositionSupported;	/* optional element of type xsd:boolean */
	class tt__PTZStatusFilterOptionsExtension *Extension;	/* optional element of type tt:PTZStatusFilterOptionsExtension */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 307; } /* = unique id SOAP_TYPE_tt__PTZStatusFilterOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZStatusFilterOptions(): PanTiltPositionSupported(NULL), ZoomPositionSupported(NULL), Extension(NULL), __any(NULL), soap(NULL) { tt__PTZStatusFilterOptions::soap_default(NULL); }
	virtual ~tt__PTZStatusFilterOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZStatusFilterOptionsExtension
#define SOAP_TYPE_tt__PTZStatusFilterOptionsExtension (308)
/* tt:PTZStatusFilterOptionsExtension */
class SOAP_CMAC tt__PTZStatusFilterOptionsExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 308; } /* = unique id SOAP_TYPE_tt__PTZStatusFilterOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZStatusFilterOptionsExtension(): __any(NULL), soap(NULL) { tt__PTZStatusFilterOptionsExtension::soap_default(NULL); }
	virtual ~tt__PTZStatusFilterOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoOutputExtension
#define SOAP_TYPE_tt__VideoOutputExtension (310)
/* tt:VideoOutputExtension */
class SOAP_CMAC tt__VideoOutputExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 310; } /* = unique id SOAP_TYPE_tt__VideoOutputExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoOutputExtension(): __any(NULL), soap(NULL) { tt__VideoOutputExtension::soap_default(NULL); }
	virtual ~tt__VideoOutputExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoOutputConfigurationOptions
#define SOAP_TYPE_tt__VideoOutputConfigurationOptions (312)
/* tt:VideoOutputConfigurationOptions */
class SOAP_CMAC tt__VideoOutputConfigurationOptions
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 312; } /* = unique id SOAP_TYPE_tt__VideoOutputConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoOutputConfigurationOptions(): __any(NULL), soap(NULL) { tt__VideoOutputConfigurationOptions::soap_default(NULL); }
	virtual ~tt__VideoOutputConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoDecoderConfigurationOptions
#define SOAP_TYPE_tt__VideoDecoderConfigurationOptions (313)
/* tt:VideoDecoderConfigurationOptions */
class SOAP_CMAC tt__VideoDecoderConfigurationOptions
{
public:
	class tt__JpegDecOptions *JpegDecOptions;	/* optional element of type tt:JpegDecOptions */
	class tt__H264DecOptions *H264DecOptions;	/* optional element of type tt:H264DecOptions */
	class tt__Mpeg4DecOptions *Mpeg4DecOptions;	/* optional element of type tt:Mpeg4DecOptions */
	class tt__VideoDecoderConfigurationOptionsExtension *Extension;	/* optional element of type tt:VideoDecoderConfigurationOptionsExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 313; } /* = unique id SOAP_TYPE_tt__VideoDecoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoDecoderConfigurationOptions(): JpegDecOptions(NULL), H264DecOptions(NULL), Mpeg4DecOptions(NULL), Extension(NULL), soap(NULL) { tt__VideoDecoderConfigurationOptions::soap_default(NULL); }
	virtual ~tt__VideoDecoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__H264DecOptions
#define SOAP_TYPE_tt__H264DecOptions (314)
/* tt:H264DecOptions */
class SOAP_CMAC tt__H264DecOptions
{
public:
	int __sizeResolutionsAvailable;	/* sequence of elements <ResolutionsAvailable> */
	tt__VideoResolution **ResolutionsAvailable;	/* required element of type tt:VideoResolution */
	int __sizeSupportedH264Profiles;	/* sequence of elements <SupportedH264Profiles> */
	enum tt__H264Profile *SupportedH264Profiles;	/* required element of type tt:H264Profile */
	tt__IntRange *SupportedInputBitrate;	/* required element of type tt:IntRange */
	tt__IntRange *SupportedFrameRate;	/* required element of type tt:IntRange */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 314; } /* = unique id SOAP_TYPE_tt__H264DecOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__H264DecOptions(): ResolutionsAvailable(NULL), SupportedH264Profiles(NULL), SupportedInputBitrate(NULL), SupportedFrameRate(NULL), __any(NULL), soap(NULL) { tt__H264DecOptions::soap_default(NULL); }
	virtual ~tt__H264DecOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__JpegDecOptions
#define SOAP_TYPE_tt__JpegDecOptions (315)
/* tt:JpegDecOptions */
class SOAP_CMAC tt__JpegDecOptions
{
public:
	int __sizeResolutionsAvailable;	/* sequence of elements <ResolutionsAvailable> */
	tt__VideoResolution **ResolutionsAvailable;	/* required element of type tt:VideoResolution */
	tt__IntRange *SupportedInputBitrate;	/* required element of type tt:IntRange */
	tt__IntRange *SupportedFrameRate;	/* required element of type tt:IntRange */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 315; } /* = unique id SOAP_TYPE_tt__JpegDecOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__JpegDecOptions(): ResolutionsAvailable(NULL), SupportedInputBitrate(NULL), SupportedFrameRate(NULL), __any(NULL), soap(NULL) { tt__JpegDecOptions::soap_default(NULL); }
	virtual ~tt__JpegDecOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__Mpeg4DecOptions
#define SOAP_TYPE_tt__Mpeg4DecOptions (316)
/* tt:Mpeg4DecOptions */
class SOAP_CMAC tt__Mpeg4DecOptions
{
public:
	int __sizeResolutionsAvailable;	/* sequence of elements <ResolutionsAvailable> */
	tt__VideoResolution **ResolutionsAvailable;	/* required element of type tt:VideoResolution */
	int __sizeSupportedMpeg4Profiles;	/* sequence of elements <SupportedMpeg4Profiles> */
	enum tt__Mpeg4Profile *SupportedMpeg4Profiles;	/* required element of type tt:Mpeg4Profile */
	tt__IntRange *SupportedInputBitrate;	/* required element of type tt:IntRange */
	tt__IntRange *SupportedFrameRate;	/* required element of type tt:IntRange */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 316; } /* = unique id SOAP_TYPE_tt__Mpeg4DecOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Mpeg4DecOptions(): ResolutionsAvailable(NULL), SupportedMpeg4Profiles(NULL), SupportedInputBitrate(NULL), SupportedFrameRate(NULL), __any(NULL), soap(NULL) { tt__Mpeg4DecOptions::soap_default(NULL); }
	virtual ~tt__Mpeg4DecOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension
#define SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension (317)
/* tt:VideoDecoderConfigurationOptionsExtension */
class SOAP_CMAC tt__VideoDecoderConfigurationOptionsExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 317; } /* = unique id SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoDecoderConfigurationOptionsExtension(): __any(NULL), soap(NULL) { tt__VideoDecoderConfigurationOptionsExtension::soap_default(NULL); }
	virtual ~tt__VideoDecoderConfigurationOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioOutputConfigurationOptions
#define SOAP_TYPE_tt__AudioOutputConfigurationOptions (320)
/* tt:AudioOutputConfigurationOptions */
class SOAP_CMAC tt__AudioOutputConfigurationOptions
{
public:
	int __sizeOutputTokensAvailable;	/* sequence of elements <OutputTokensAvailable> */
	char **OutputTokensAvailable;	/* required element of type tt:ReferenceToken */
	int __sizeSendPrimacyOptions;	/* sequence of elements <SendPrimacyOptions> */
	char **SendPrimacyOptions;	/* optional element of type xsd:anyURI */
	tt__IntRange *OutputLevelRange;	/* required element of type tt:IntRange */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 320; } /* = unique id SOAP_TYPE_tt__AudioOutputConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioOutputConfigurationOptions(): OutputTokensAvailable(NULL), SendPrimacyOptions(NULL), OutputLevelRange(NULL), __any(NULL), soap(NULL) { tt__AudioOutputConfigurationOptions::soap_default(NULL); }
	virtual ~tt__AudioOutputConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioDecoderConfigurationOptions
#define SOAP_TYPE_tt__AudioDecoderConfigurationOptions (322)
/* tt:AudioDecoderConfigurationOptions */
class SOAP_CMAC tt__AudioDecoderConfigurationOptions
{
public:
	class tt__AACDecOptions *AACDecOptions;	/* optional element of type tt:AACDecOptions */
	class tt__G711DecOptions *G711DecOptions;	/* optional element of type tt:G711DecOptions */
	class tt__G726DecOptions *G726DecOptions;	/* optional element of type tt:G726DecOptions */
	class tt__AudioDecoderConfigurationOptionsExtension *Extension;	/* optional element of type tt:AudioDecoderConfigurationOptionsExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 322; } /* = unique id SOAP_TYPE_tt__AudioDecoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioDecoderConfigurationOptions(): AACDecOptions(NULL), G711DecOptions(NULL), G726DecOptions(NULL), Extension(NULL), soap(NULL) { tt__AudioDecoderConfigurationOptions::soap_default(NULL); }
	virtual ~tt__AudioDecoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__G711DecOptions
#define SOAP_TYPE_tt__G711DecOptions (323)
/* tt:G711DecOptions */
class SOAP_CMAC tt__G711DecOptions
{
public:
	tt__IntList *Bitrate;	/* required element of type tt:IntList */
	tt__IntList *SampleRateRange;	/* required element of type tt:IntList */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 323; } /* = unique id SOAP_TYPE_tt__G711DecOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__G711DecOptions(): Bitrate(NULL), SampleRateRange(NULL), __any(NULL), soap(NULL) { tt__G711DecOptions::soap_default(NULL); }
	virtual ~tt__G711DecOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__AACDecOptions
#define SOAP_TYPE_tt__AACDecOptions (324)
/* tt:AACDecOptions */
class SOAP_CMAC tt__AACDecOptions
{
public:
	tt__IntList *Bitrate;	/* required element of type tt:IntList */
	tt__IntList *SampleRateRange;	/* required element of type tt:IntList */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 324; } /* = unique id SOAP_TYPE_tt__AACDecOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AACDecOptions(): Bitrate(NULL), SampleRateRange(NULL), __any(NULL), soap(NULL) { tt__AACDecOptions::soap_default(NULL); }
	virtual ~tt__AACDecOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__G726DecOptions
#define SOAP_TYPE_tt__G726DecOptions (325)
/* tt:G726DecOptions */
class SOAP_CMAC tt__G726DecOptions
{
public:
	tt__IntList *Bitrate;	/* required element of type tt:IntList */
	tt__IntList *SampleRateRange;	/* required element of type tt:IntList */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 325; } /* = unique id SOAP_TYPE_tt__G726DecOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__G726DecOptions(): Bitrate(NULL), SampleRateRange(NULL), __any(NULL), soap(NULL) { tt__G726DecOptions::soap_default(NULL); }
	virtual ~tt__G726DecOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension
#define SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension (326)
/* tt:AudioDecoderConfigurationOptionsExtension */
class SOAP_CMAC tt__AudioDecoderConfigurationOptionsExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 326; } /* = unique id SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioDecoderConfigurationOptionsExtension(): __any(NULL), soap(NULL) { tt__AudioDecoderConfigurationOptionsExtension::soap_default(NULL); }
	virtual ~tt__AudioDecoderConfigurationOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__MulticastConfiguration
#define SOAP_TYPE_tt__MulticastConfiguration (327)
/* tt:MulticastConfiguration */
class SOAP_CMAC tt__MulticastConfiguration
{
public:
	class tt__IPAddress *Address;	/* required element of type tt:IPAddress */
	int Port;	/* required element of type xsd:int */
	int TTL;	/* required element of type xsd:int */
	bool AutoStart;	/* required element of type xsd:boolean */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 327; } /* = unique id SOAP_TYPE_tt__MulticastConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MulticastConfiguration(): Address(NULL), __any(NULL), soap(NULL) { tt__MulticastConfiguration::soap_default(NULL); }
	virtual ~tt__MulticastConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__StreamSetup
#define SOAP_TYPE_tt__StreamSetup (328)
/* tt:StreamSetup */
class SOAP_CMAC tt__StreamSetup
{
public:
	enum tt__StreamType Stream;	/* required element of type tt:StreamType */
	class tt__Transport *Transport;	/* required element of type tt:Transport */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 328; } /* = unique id SOAP_TYPE_tt__StreamSetup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__StreamSetup(): Transport(NULL), __any(NULL), soap(NULL) { tt__StreamSetup::soap_default(NULL); }
	virtual ~tt__StreamSetup() { }
};
#endif

#ifndef SOAP_TYPE_tt__Transport
#define SOAP_TYPE_tt__Transport (329)
/* tt:Transport */
class SOAP_CMAC tt__Transport
{
public:
	enum tt__TransportProtocol Protocol;	/* required element of type tt:TransportProtocol */
	tt__Transport *Tunnel;	/* optional element of type tt:Transport */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 329; } /* = unique id SOAP_TYPE_tt__Transport */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Transport(): Tunnel(NULL), soap(NULL) { tt__Transport::soap_default(NULL); }
	virtual ~tt__Transport() { }
};
#endif

#ifndef SOAP_TYPE_tt__MediaUri
#define SOAP_TYPE_tt__MediaUri (330)
/* tt:MediaUri */
class SOAP_CMAC tt__MediaUri
{
public:
	char *Uri;	/* required element of type xsd:anyURI */
	bool InvalidAfterConnect;	/* required element of type xsd:boolean */
	bool InvalidAfterReboot;	/* required element of type xsd:boolean */
	LONG64 Timeout;	/* external */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 330; } /* = unique id SOAP_TYPE_tt__MediaUri */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MediaUri(): Uri(NULL), __any(NULL), soap(NULL) { tt__MediaUri::soap_default(NULL); }
	virtual ~tt__MediaUri() { }
};
#endif

#ifndef SOAP_TYPE_tt__Scope
#define SOAP_TYPE_tt__Scope (331)
/* tt:Scope */
class SOAP_CMAC tt__Scope
{
public:
	enum tt__ScopeDefinition ScopeDef;	/* required element of type tt:ScopeDefinition */
	char *ScopeItem;	/* required element of type xsd:anyURI */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 331; } /* = unique id SOAP_TYPE_tt__Scope */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Scope(): ScopeItem(NULL), soap(NULL) { tt__Scope::soap_default(NULL); }
	virtual ~tt__Scope() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceExtension
#define SOAP_TYPE_tt__NetworkInterfaceExtension (333)
/* tt:NetworkInterfaceExtension */
class SOAP_CMAC tt__NetworkInterfaceExtension
{
public:
	int InterfaceType;	/* required element of type tt:IANA-IfTypes */
	int __sizeDot3;	/* sequence of elements <Dot3> */
	class tt__Dot3Configuration **Dot3;	/* optional element of type tt:Dot3Configuration */
	int __sizeDot11;	/* sequence of elements <Dot11> */
	class tt__Dot11Configuration **Dot11;	/* optional element of type tt:Dot11Configuration */
	class tt__NetworkInterfaceExtension2 *Extension;	/* optional element of type tt:NetworkInterfaceExtension2 */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 333; } /* = unique id SOAP_TYPE_tt__NetworkInterfaceExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterfaceExtension(): Dot3(NULL), Dot11(NULL), Extension(NULL), __any(NULL), soap(NULL) { tt__NetworkInterfaceExtension::soap_default(NULL); }
	virtual ~tt__NetworkInterfaceExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot3Configuration
#define SOAP_TYPE_tt__Dot3Configuration (334)
/* tt:Dot3Configuration */
class SOAP_CMAC tt__Dot3Configuration
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 334; } /* = unique id SOAP_TYPE_tt__Dot3Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot3Configuration(): __any(NULL), soap(NULL) { tt__Dot3Configuration::soap_default(NULL); }
	virtual ~tt__Dot3Configuration() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceExtension2
#define SOAP_TYPE_tt__NetworkInterfaceExtension2 (335)
/* tt:NetworkInterfaceExtension2 */
class SOAP_CMAC tt__NetworkInterfaceExtension2
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 335; } /* = unique id SOAP_TYPE_tt__NetworkInterfaceExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterfaceExtension2(): __any(NULL), soap(NULL) { tt__NetworkInterfaceExtension2::soap_default(NULL); }
	virtual ~tt__NetworkInterfaceExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceLink
#define SOAP_TYPE_tt__NetworkInterfaceLink (336)
/* tt:NetworkInterfaceLink */
class SOAP_CMAC tt__NetworkInterfaceLink
{
public:
	class tt__NetworkInterfaceConnectionSetting *AdminSettings;	/* required element of type tt:NetworkInterfaceConnectionSetting */
	tt__NetworkInterfaceConnectionSetting *OperSettings;	/* required element of type tt:NetworkInterfaceConnectionSetting */
	int InterfaceType;	/* required element of type tt:IANA-IfTypes */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 336; } /* = unique id SOAP_TYPE_tt__NetworkInterfaceLink */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterfaceLink(): AdminSettings(NULL), OperSettings(NULL), soap(NULL) { tt__NetworkInterfaceLink::soap_default(NULL); }
	virtual ~tt__NetworkInterfaceLink() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceConnectionSetting
#define SOAP_TYPE_tt__NetworkInterfaceConnectionSetting (337)
/* tt:NetworkInterfaceConnectionSetting */
class SOAP_CMAC tt__NetworkInterfaceConnectionSetting
{
public:
	bool AutoNegotiation;	/* required element of type xsd:boolean */
	int Speed;	/* required element of type xsd:int */
	enum tt__Duplex Duplex;	/* required element of type tt:Duplex */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 337; } /* = unique id SOAP_TYPE_tt__NetworkInterfaceConnectionSetting */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterfaceConnectionSetting(): soap(NULL) { tt__NetworkInterfaceConnectionSetting::soap_default(NULL); }
	virtual ~tt__NetworkInterfaceConnectionSetting() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceInfo
#define SOAP_TYPE_tt__NetworkInterfaceInfo (338)
/* tt:NetworkInterfaceInfo */
class SOAP_CMAC tt__NetworkInterfaceInfo
{
public:
	char *Name;	/* optional element of type xsd:string */
	char *HwAddress;	/* required element of type tt:HwAddress */
	int *MTU;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 338; } /* = unique id SOAP_TYPE_tt__NetworkInterfaceInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterfaceInfo(): Name(NULL), HwAddress(NULL), MTU(NULL), soap(NULL) { tt__NetworkInterfaceInfo::soap_default(NULL); }
	virtual ~tt__NetworkInterfaceInfo() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPv6NetworkInterface
#define SOAP_TYPE_tt__IPv6NetworkInterface (339)
/* tt:IPv6NetworkInterface */
class SOAP_CMAC tt__IPv6NetworkInterface
{
public:
	bool Enabled;	/* required element of type xsd:boolean */
	class tt__IPv6Configuration *Config;	/* optional element of type tt:IPv6Configuration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 339; } /* = unique id SOAP_TYPE_tt__IPv6NetworkInterface */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPv6NetworkInterface(): Config(NULL), soap(NULL) { tt__IPv6NetworkInterface::soap_default(NULL); }
	virtual ~tt__IPv6NetworkInterface() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPv4NetworkInterface
#define SOAP_TYPE_tt__IPv4NetworkInterface (340)
/* tt:IPv4NetworkInterface */
class SOAP_CMAC tt__IPv4NetworkInterface
{
public:
	bool Enabled;	/* required element of type xsd:boolean */
	class tt__IPv4Configuration *Config;	/* required element of type tt:IPv4Configuration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 340; } /* = unique id SOAP_TYPE_tt__IPv4NetworkInterface */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPv4NetworkInterface(): Config(NULL), soap(NULL) { tt__IPv4NetworkInterface::soap_default(NULL); }
	virtual ~tt__IPv4NetworkInterface() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPv4Configuration
#define SOAP_TYPE_tt__IPv4Configuration (341)
/* tt:IPv4Configuration */
class SOAP_CMAC tt__IPv4Configuration
{
public:
	int __sizeManual;	/* sequence of elements <Manual> */
	class tt__PrefixedIPv4Address **Manual;	/* optional element of type tt:PrefixedIPv4Address */
	tt__PrefixedIPv4Address *LinkLocal;	/* optional element of type tt:PrefixedIPv4Address */
	tt__PrefixedIPv4Address *FromDHCP;	/* optional element of type tt:PrefixedIPv4Address */
	bool DHCP;	/* required element of type xsd:boolean */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 341; } /* = unique id SOAP_TYPE_tt__IPv4Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPv4Configuration(): Manual(NULL), LinkLocal(NULL), FromDHCP(NULL), __any(NULL), soap(NULL) { tt__IPv4Configuration::soap_default(NULL); }
	virtual ~tt__IPv4Configuration() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPv6Configuration
#define SOAP_TYPE_tt__IPv6Configuration (342)
/* tt:IPv6Configuration */
class SOAP_CMAC tt__IPv6Configuration
{
public:
	bool *AcceptRouterAdvert;	/* optional element of type xsd:boolean */
	enum tt__IPv6DHCPConfiguration DHCP;	/* required element of type tt:IPv6DHCPConfiguration */
	int __sizeManual;	/* sequence of elements <Manual> */
	class tt__PrefixedIPv6Address **Manual;	/* optional element of type tt:PrefixedIPv6Address */
	int __sizeLinkLocal;	/* sequence of elements <LinkLocal> */
	tt__PrefixedIPv6Address **LinkLocal;	/* optional element of type tt:PrefixedIPv6Address */
	int __sizeFromDHCP;	/* sequence of elements <FromDHCP> */
	tt__PrefixedIPv6Address **FromDHCP;	/* optional element of type tt:PrefixedIPv6Address */
	int __sizeFromRA;	/* sequence of elements <FromRA> */
	tt__PrefixedIPv6Address **FromRA;	/* optional element of type tt:PrefixedIPv6Address */
	class tt__IPv6ConfigurationExtension *Extension;	/* optional element of type tt:IPv6ConfigurationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 342; } /* = unique id SOAP_TYPE_tt__IPv6Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPv6Configuration(): AcceptRouterAdvert(NULL), Manual(NULL), LinkLocal(NULL), FromDHCP(NULL), FromRA(NULL), Extension(NULL), soap(NULL) { tt__IPv6Configuration::soap_default(NULL); }
	virtual ~tt__IPv6Configuration() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPv6ConfigurationExtension
#define SOAP_TYPE_tt__IPv6ConfigurationExtension (343)
/* tt:IPv6ConfigurationExtension */
class SOAP_CMAC tt__IPv6ConfigurationExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 343; } /* = unique id SOAP_TYPE_tt__IPv6ConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPv6ConfigurationExtension(): __any(NULL), soap(NULL) { tt__IPv6ConfigurationExtension::soap_default(NULL); }
	virtual ~tt__IPv6ConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkProtocol
#define SOAP_TYPE_tt__NetworkProtocol (344)
/* tt:NetworkProtocol */
class SOAP_CMAC tt__NetworkProtocol
{
public:
	enum tt__NetworkProtocolType Name;	/* required element of type tt:NetworkProtocolType */
	bool Enabled;	/* required element of type xsd:boolean */
	int __sizePort;	/* sequence of elements <Port> */
	int *Port;	/* required element of type xsd:int */
	class tt__NetworkProtocolExtension *Extension;	/* optional element of type tt:NetworkProtocolExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 344; } /* = unique id SOAP_TYPE_tt__NetworkProtocol */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkProtocol(): Port(NULL), Extension(NULL), soap(NULL) { tt__NetworkProtocol::soap_default(NULL); }
	virtual ~tt__NetworkProtocol() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkProtocolExtension
#define SOAP_TYPE_tt__NetworkProtocolExtension (345)
/* tt:NetworkProtocolExtension */
class SOAP_CMAC tt__NetworkProtocolExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 345; } /* = unique id SOAP_TYPE_tt__NetworkProtocolExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkProtocolExtension(): __any(NULL), soap(NULL) { tt__NetworkProtocolExtension::soap_default(NULL); }
	virtual ~tt__NetworkProtocolExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkHost
#define SOAP_TYPE_tt__NetworkHost (346)
/* tt:NetworkHost */
class SOAP_CMAC tt__NetworkHost
{
public:
	enum tt__NetworkHostType Type;	/* required element of type tt:NetworkHostType */
	char **IPv4Address;	/* optional element of type tt:IPv4Address */
	char **IPv6Address;	/* optional element of type tt:IPv6Address */
	char **DNSname;	/* optional element of type tt:DNSName */
	class tt__NetworkHostExtension *Extension;	/* optional element of type tt:NetworkHostExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 346; } /* = unique id SOAP_TYPE_tt__NetworkHost */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkHost(): IPv4Address(NULL), IPv6Address(NULL), DNSname(NULL), Extension(NULL), soap(NULL) { tt__NetworkHost::soap_default(NULL); }
	virtual ~tt__NetworkHost() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkHostExtension
#define SOAP_TYPE_tt__NetworkHostExtension (347)
/* tt:NetworkHostExtension */
class SOAP_CMAC tt__NetworkHostExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 347; } /* = unique id SOAP_TYPE_tt__NetworkHostExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkHostExtension(): __any(NULL), soap(NULL) { tt__NetworkHostExtension::soap_default(NULL); }
	virtual ~tt__NetworkHostExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPAddress
#define SOAP_TYPE_tt__IPAddress (348)
/* tt:IPAddress */
class SOAP_CMAC tt__IPAddress
{
public:
	enum tt__IPType Type;	/* required element of type tt:IPType */
	char **IPv4Address;	/* optional element of type tt:IPv4Address */
	char **IPv6Address;	/* optional element of type tt:IPv6Address */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 348; } /* = unique id SOAP_TYPE_tt__IPAddress */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPAddress(): IPv4Address(NULL), IPv6Address(NULL), soap(NULL) { tt__IPAddress::soap_default(NULL); }
	virtual ~tt__IPAddress() { }
};
#endif

#ifndef SOAP_TYPE_tt__PrefixedIPv4Address
#define SOAP_TYPE_tt__PrefixedIPv4Address (349)
/* tt:PrefixedIPv4Address */
class SOAP_CMAC tt__PrefixedIPv4Address
{
public:
	char *Address;	/* required element of type tt:IPv4Address */
	int PrefixLength;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 349; } /* = unique id SOAP_TYPE_tt__PrefixedIPv4Address */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PrefixedIPv4Address(): Address(NULL), soap(NULL) { tt__PrefixedIPv4Address::soap_default(NULL); }
	virtual ~tt__PrefixedIPv4Address() { }
};
#endif

#ifndef SOAP_TYPE_tt__PrefixedIPv6Address
#define SOAP_TYPE_tt__PrefixedIPv6Address (350)
/* tt:PrefixedIPv6Address */
class SOAP_CMAC tt__PrefixedIPv6Address
{
public:
	char *Address;	/* required element of type tt:IPv6Address */
	int PrefixLength;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 350; } /* = unique id SOAP_TYPE_tt__PrefixedIPv6Address */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PrefixedIPv6Address(): Address(NULL), soap(NULL) { tt__PrefixedIPv6Address::soap_default(NULL); }
	virtual ~tt__PrefixedIPv6Address() { }
};
#endif

#ifndef SOAP_TYPE_tt__HostnameInformation
#define SOAP_TYPE_tt__HostnameInformation (351)
/* tt:HostnameInformation */
class SOAP_CMAC tt__HostnameInformation
{
public:
	bool FromDHCP;	/* required element of type xsd:boolean */
	char *Name;	/* optional element of type xsd:token */
	class tt__HostnameInformationExtension *Extension;	/* optional element of type tt:HostnameInformationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 351; } /* = unique id SOAP_TYPE_tt__HostnameInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__HostnameInformation(): Name(NULL), Extension(NULL), soap(NULL) { tt__HostnameInformation::soap_default(NULL); }
	virtual ~tt__HostnameInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__HostnameInformationExtension
#define SOAP_TYPE_tt__HostnameInformationExtension (352)
/* tt:HostnameInformationExtension */
class SOAP_CMAC tt__HostnameInformationExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 352; } /* = unique id SOAP_TYPE_tt__HostnameInformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__HostnameInformationExtension(): __any(NULL), soap(NULL) { tt__HostnameInformationExtension::soap_default(NULL); }
	virtual ~tt__HostnameInformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__DNSInformation
#define SOAP_TYPE_tt__DNSInformation (353)
/* tt:DNSInformation */
class SOAP_CMAC tt__DNSInformation
{
public:
	bool FromDHCP;	/* required element of type xsd:boolean */
	int __sizeSearchDomain;	/* sequence of elements <SearchDomain> */
	char **SearchDomain;	/* optional element of type xsd:token */
	int __sizeDNSFromDHCP;	/* sequence of elements <DNSFromDHCP> */
	tt__IPAddress **DNSFromDHCP;	/* optional element of type tt:IPAddress */
	int __sizeDNSManual;	/* sequence of elements <DNSManual> */
	tt__IPAddress **DNSManual;	/* optional element of type tt:IPAddress */
	class tt__DNSInformationExtension *Extension;	/* optional element of type tt:DNSInformationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 353; } /* = unique id SOAP_TYPE_tt__DNSInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DNSInformation(): SearchDomain(NULL), DNSFromDHCP(NULL), DNSManual(NULL), Extension(NULL), soap(NULL) { tt__DNSInformation::soap_default(NULL); }
	virtual ~tt__DNSInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__DNSInformationExtension
#define SOAP_TYPE_tt__DNSInformationExtension (354)
/* tt:DNSInformationExtension */
class SOAP_CMAC tt__DNSInformationExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 354; } /* = unique id SOAP_TYPE_tt__DNSInformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DNSInformationExtension(): __any(NULL), soap(NULL) { tt__DNSInformationExtension::soap_default(NULL); }
	virtual ~tt__DNSInformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__NTPInformation
#define SOAP_TYPE_tt__NTPInformation (355)
/* tt:NTPInformation */
class SOAP_CMAC tt__NTPInformation
{
public:
	bool FromDHCP;	/* required element of type xsd:boolean */
	int __sizeNTPFromDHCP;	/* sequence of elements <NTPFromDHCP> */
	tt__NetworkHost **NTPFromDHCP;	/* optional element of type tt:NetworkHost */
	int __sizeNTPManual;	/* sequence of elements <NTPManual> */
	tt__NetworkHost **NTPManual;	/* optional element of type tt:NetworkHost */
	class tt__NTPInformationExtension *Extension;	/* optional element of type tt:NTPInformationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 355; } /* = unique id SOAP_TYPE_tt__NTPInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NTPInformation(): NTPFromDHCP(NULL), NTPManual(NULL), Extension(NULL), soap(NULL) { tt__NTPInformation::soap_default(NULL); }
	virtual ~tt__NTPInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__NTPInformationExtension
#define SOAP_TYPE_tt__NTPInformationExtension (356)
/* tt:NTPInformationExtension */
class SOAP_CMAC tt__NTPInformationExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 356; } /* = unique id SOAP_TYPE_tt__NTPInformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NTPInformationExtension(): __any(NULL), soap(NULL) { tt__NTPInformationExtension::soap_default(NULL); }
	virtual ~tt__NTPInformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__DynamicDNSInformation
#define SOAP_TYPE_tt__DynamicDNSInformation (357)
/* tt:DynamicDNSInformation */
class SOAP_CMAC tt__DynamicDNSInformation
{
public:
	enum tt__DynamicDNSType Type;	/* required element of type tt:DynamicDNSType */
	char **Name;	/* optional element of type tt:DNSName */
	LONG64 *TTL;	/* optional element of type xsd:duration */
	class tt__DynamicDNSInformationExtension *Extension;	/* optional element of type tt:DynamicDNSInformationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 357; } /* = unique id SOAP_TYPE_tt__DynamicDNSInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DynamicDNSInformation(): Name(NULL), TTL(NULL), Extension(NULL), soap(NULL) { tt__DynamicDNSInformation::soap_default(NULL); }
	virtual ~tt__DynamicDNSInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__DynamicDNSInformationExtension
#define SOAP_TYPE_tt__DynamicDNSInformationExtension (358)
/* tt:DynamicDNSInformationExtension */
class SOAP_CMAC tt__DynamicDNSInformationExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 358; } /* = unique id SOAP_TYPE_tt__DynamicDNSInformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DynamicDNSInformationExtension(): __any(NULL), soap(NULL) { tt__DynamicDNSInformationExtension::soap_default(NULL); }
	virtual ~tt__DynamicDNSInformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfiguration
#define SOAP_TYPE_tt__NetworkInterfaceSetConfiguration (359)
/* tt:NetworkInterfaceSetConfiguration */
class SOAP_CMAC tt__NetworkInterfaceSetConfiguration
{
public:
	bool *Enabled;	/* optional element of type xsd:boolean */
	tt__NetworkInterfaceConnectionSetting *Link;	/* optional element of type tt:NetworkInterfaceConnectionSetting */
	int *MTU;	/* optional element of type xsd:int */
	class tt__IPv4NetworkInterfaceSetConfiguration *IPv4;	/* optional element of type tt:IPv4NetworkInterfaceSetConfiguration */
	class tt__IPv6NetworkInterfaceSetConfiguration *IPv6;	/* optional element of type tt:IPv6NetworkInterfaceSetConfiguration */
	class tt__NetworkInterfaceSetConfigurationExtension *Extension;	/* optional element of type tt:NetworkInterfaceSetConfigurationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 359; } /* = unique id SOAP_TYPE_tt__NetworkInterfaceSetConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterfaceSetConfiguration(): Enabled(NULL), Link(NULL), MTU(NULL), IPv4(NULL), IPv6(NULL), Extension(NULL), soap(NULL) { tt__NetworkInterfaceSetConfiguration::soap_default(NULL); }
	virtual ~tt__NetworkInterfaceSetConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension
#define SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension (360)
/* tt:NetworkInterfaceSetConfigurationExtension */
class SOAP_CMAC tt__NetworkInterfaceSetConfigurationExtension
{
public:
	int __sizeDot3;	/* sequence of elements <Dot3> */
	tt__Dot3Configuration **Dot3;	/* optional element of type tt:Dot3Configuration */
	int __sizeDot11;	/* sequence of elements <Dot11> */
	tt__Dot11Configuration **Dot11;	/* optional element of type tt:Dot11Configuration */
	class tt__NetworkInterfaceSetConfigurationExtension2 *Extension;	/* optional element of type tt:NetworkInterfaceSetConfigurationExtension2 */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 360; } /* = unique id SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterfaceSetConfigurationExtension(): Dot3(NULL), Dot11(NULL), Extension(NULL), __any(NULL), soap(NULL) { tt__NetworkInterfaceSetConfigurationExtension::soap_default(NULL); }
	virtual ~tt__NetworkInterfaceSetConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration
#define SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration (361)
/* tt:IPv6NetworkInterfaceSetConfiguration */
class SOAP_CMAC tt__IPv6NetworkInterfaceSetConfiguration
{
public:
	bool *Enabled;	/* optional element of type xsd:boolean */
	bool *AcceptRouterAdvert;	/* optional element of type xsd:boolean */
	int __sizeManual;	/* sequence of elements <Manual> */
	tt__PrefixedIPv6Address **Manual;	/* optional element of type tt:PrefixedIPv6Address */
	enum tt__IPv6DHCPConfiguration *DHCP;	/* optional element of type tt:IPv6DHCPConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 361; } /* = unique id SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPv6NetworkInterfaceSetConfiguration(): Enabled(NULL), AcceptRouterAdvert(NULL), Manual(NULL), DHCP(NULL), soap(NULL) { tt__IPv6NetworkInterfaceSetConfiguration::soap_default(NULL); }
	virtual ~tt__IPv6NetworkInterfaceSetConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration
#define SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration (362)
/* tt:IPv4NetworkInterfaceSetConfiguration */
class SOAP_CMAC tt__IPv4NetworkInterfaceSetConfiguration
{
public:
	bool *Enabled;	/* optional element of type xsd:boolean */
	int __sizeManual;	/* sequence of elements <Manual> */
	tt__PrefixedIPv4Address **Manual;	/* optional element of type tt:PrefixedIPv4Address */
	bool *DHCP;	/* optional element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 362; } /* = unique id SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPv4NetworkInterfaceSetConfiguration(): Enabled(NULL), Manual(NULL), DHCP(NULL), soap(NULL) { tt__IPv4NetworkInterfaceSetConfiguration::soap_default(NULL); }
	virtual ~tt__IPv4NetworkInterfaceSetConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkGateway
#define SOAP_TYPE_tt__NetworkGateway (363)
/* tt:NetworkGateway */
class SOAP_CMAC tt__NetworkGateway
{
public:
	int __sizeIPv4Address;	/* sequence of elements <IPv4Address> */
	char **IPv4Address;	/* optional element of type tt:IPv4Address */
	int __sizeIPv6Address;	/* sequence of elements <IPv6Address> */
	char **IPv6Address;	/* optional element of type tt:IPv6Address */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 363; } /* = unique id SOAP_TYPE_tt__NetworkGateway */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkGateway(): IPv4Address(NULL), IPv6Address(NULL), soap(NULL) { tt__NetworkGateway::soap_default(NULL); }
	virtual ~tt__NetworkGateway() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkZeroConfiguration
#define SOAP_TYPE_tt__NetworkZeroConfiguration (364)
/* tt:NetworkZeroConfiguration */
class SOAP_CMAC tt__NetworkZeroConfiguration
{
public:
	char *InterfaceToken;	/* required element of type tt:ReferenceToken */
	bool Enabled;	/* required element of type xsd:boolean */
	int __sizeAddresses;	/* sequence of elements <Addresses> */
	char **Addresses;	/* optional element of type tt:IPv4Address */
	class tt__NetworkZeroConfigurationExtension *Extension;	/* optional element of type tt:NetworkZeroConfigurationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 364; } /* = unique id SOAP_TYPE_tt__NetworkZeroConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkZeroConfiguration(): InterfaceToken(NULL), Addresses(NULL), Extension(NULL), soap(NULL) { tt__NetworkZeroConfiguration::soap_default(NULL); }
	virtual ~tt__NetworkZeroConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkZeroConfigurationExtension
#define SOAP_TYPE_tt__NetworkZeroConfigurationExtension (365)
/* tt:NetworkZeroConfigurationExtension */
class SOAP_CMAC tt__NetworkZeroConfigurationExtension
{
public:
	int __sizeAdditional;	/* sequence of elements <Additional> */
	tt__NetworkZeroConfiguration **Additional;	/* optional element of type tt:NetworkZeroConfiguration */
	class tt__NetworkZeroConfigurationExtension2 *Extension;	/* optional element of type tt:NetworkZeroConfigurationExtension2 */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 365; } /* = unique id SOAP_TYPE_tt__NetworkZeroConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkZeroConfigurationExtension(): Additional(NULL), Extension(NULL), __any(NULL), soap(NULL) { tt__NetworkZeroConfigurationExtension::soap_default(NULL); }
	virtual ~tt__NetworkZeroConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkZeroConfigurationExtension2
#define SOAP_TYPE_tt__NetworkZeroConfigurationExtension2 (366)
/* tt:NetworkZeroConfigurationExtension2 */
class SOAP_CMAC tt__NetworkZeroConfigurationExtension2
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 366; } /* = unique id SOAP_TYPE_tt__NetworkZeroConfigurationExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkZeroConfigurationExtension2(): __any(NULL), soap(NULL) { tt__NetworkZeroConfigurationExtension2::soap_default(NULL); }
	virtual ~tt__NetworkZeroConfigurationExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPAddressFilter
#define SOAP_TYPE_tt__IPAddressFilter (367)
/* tt:IPAddressFilter */
class SOAP_CMAC tt__IPAddressFilter
{
public:
	enum tt__IPAddressFilterType Type;	/* required element of type tt:IPAddressFilterType */
	int __sizeIPv4Address;	/* sequence of elements <IPv4Address> */
	tt__PrefixedIPv4Address **IPv4Address;	/* optional element of type tt:PrefixedIPv4Address */
	int __sizeIPv6Address;	/* sequence of elements <IPv6Address> */
	tt__PrefixedIPv6Address **IPv6Address;	/* optional element of type tt:PrefixedIPv6Address */
	class tt__IPAddressFilterExtension *Extension;	/* optional element of type tt:IPAddressFilterExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 367; } /* = unique id SOAP_TYPE_tt__IPAddressFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPAddressFilter(): IPv4Address(NULL), IPv6Address(NULL), Extension(NULL), soap(NULL) { tt__IPAddressFilter::soap_default(NULL); }
	virtual ~tt__IPAddressFilter() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPAddressFilterExtension
#define SOAP_TYPE_tt__IPAddressFilterExtension (368)
/* tt:IPAddressFilterExtension */
class SOAP_CMAC tt__IPAddressFilterExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 368; } /* = unique id SOAP_TYPE_tt__IPAddressFilterExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPAddressFilterExtension(): __any(NULL), soap(NULL) { tt__IPAddressFilterExtension::soap_default(NULL); }
	virtual ~tt__IPAddressFilterExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11Configuration
#define SOAP_TYPE_tt__Dot11Configuration (369)
/* tt:Dot11Configuration */
class SOAP_CMAC tt__Dot11Configuration
{
public:
	xsd__hexBinary SSID;	/* required element of type tt:Dot11SSIDType */
	enum tt__Dot11StationMode Mode;	/* required element of type tt:Dot11StationMode */
	char *Alias;	/* required element of type tt:Name */
	char *Priority;	/* required element of type tt:NetworkInterfaceConfigPriority */
	class tt__Dot11SecurityConfiguration *Security;	/* required element of type tt:Dot11SecurityConfiguration */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 369; } /* = unique id SOAP_TYPE_tt__Dot11Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11Configuration(): Alias(NULL), Priority(NULL), Security(NULL), __any(NULL), soap(NULL) { tt__Dot11Configuration::soap_default(NULL); }
	virtual ~tt__Dot11Configuration() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11SecurityConfiguration
#define SOAP_TYPE_tt__Dot11SecurityConfiguration (370)
/* tt:Dot11SecurityConfiguration */
class SOAP_CMAC tt__Dot11SecurityConfiguration
{
public:
	enum tt__Dot11SecurityMode Mode;	/* required element of type tt:Dot11SecurityMode */
	enum tt__Dot11Cipher *Algorithm;	/* optional element of type tt:Dot11Cipher */
	class tt__Dot11PSKSet *PSK;	/* optional element of type tt:Dot11PSKSet */
	char *Dot1X;	/* optional element of type tt:ReferenceToken */
	class tt__Dot11SecurityConfigurationExtension *Extension;	/* optional element of type tt:Dot11SecurityConfigurationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 370; } /* = unique id SOAP_TYPE_tt__Dot11SecurityConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11SecurityConfiguration(): Algorithm(NULL), PSK(NULL), Dot1X(NULL), Extension(NULL), soap(NULL) { tt__Dot11SecurityConfiguration::soap_default(NULL); }
	virtual ~tt__Dot11SecurityConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11SecurityConfigurationExtension
#define SOAP_TYPE_tt__Dot11SecurityConfigurationExtension (371)
/* tt:Dot11SecurityConfigurationExtension */
class SOAP_CMAC tt__Dot11SecurityConfigurationExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 371; } /* = unique id SOAP_TYPE_tt__Dot11SecurityConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11SecurityConfigurationExtension(): __any(NULL), soap(NULL) { tt__Dot11SecurityConfigurationExtension::soap_default(NULL); }
	virtual ~tt__Dot11SecurityConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11PSKSet
#define SOAP_TYPE_tt__Dot11PSKSet (372)
/* tt:Dot11PSKSet */
class SOAP_CMAC tt__Dot11PSKSet
{
public:
	xsd__hexBinary *Key;	/* optional element of type tt:Dot11PSK */
	char *Passphrase;	/* optional element of type tt:Dot11PSKPassphrase */
	class tt__Dot11PSKSetExtension *Extension;	/* optional element of type tt:Dot11PSKSetExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 372; } /* = unique id SOAP_TYPE_tt__Dot11PSKSet */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11PSKSet(): Key(NULL), Passphrase(NULL), Extension(NULL), soap(NULL) { tt__Dot11PSKSet::soap_default(NULL); }
	virtual ~tt__Dot11PSKSet() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11PSKSetExtension
#define SOAP_TYPE_tt__Dot11PSKSetExtension (373)
/* tt:Dot11PSKSetExtension */
class SOAP_CMAC tt__Dot11PSKSetExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 373; } /* = unique id SOAP_TYPE_tt__Dot11PSKSetExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11PSKSetExtension(): __any(NULL), soap(NULL) { tt__Dot11PSKSetExtension::soap_default(NULL); }
	virtual ~tt__Dot11PSKSetExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2
#define SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2 (374)
/* tt:NetworkInterfaceSetConfigurationExtension2 */
class SOAP_CMAC tt__NetworkInterfaceSetConfigurationExtension2
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 374; } /* = unique id SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterfaceSetConfigurationExtension2(): __any(NULL), soap(NULL) { tt__NetworkInterfaceSetConfigurationExtension2::soap_default(NULL); }
	virtual ~tt__NetworkInterfaceSetConfigurationExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11Capabilities
#define SOAP_TYPE_tt__Dot11Capabilities (375)
/* tt:Dot11Capabilities */
class SOAP_CMAC tt__Dot11Capabilities
{
public:
	bool TKIP;	/* required element of type xsd:boolean */
	bool ScanAvailableNetworks;	/* required element of type xsd:boolean */
	bool MultipleConfiguration;	/* required element of type xsd:boolean */
	bool AdHocStationMode;	/* required element of type xsd:boolean */
	bool WEP;	/* required element of type xsd:boolean */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 375; } /* = unique id SOAP_TYPE_tt__Dot11Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11Capabilities(): __any(NULL), soap(NULL) { tt__Dot11Capabilities::soap_default(NULL); }
	virtual ~tt__Dot11Capabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11Status
#define SOAP_TYPE_tt__Dot11Status (376)
/* tt:Dot11Status */
class SOAP_CMAC tt__Dot11Status
{
public:
	xsd__hexBinary SSID;	/* required element of type tt:Dot11SSIDType */
	char *BSSID;	/* optional element of type xsd:string */
	enum tt__Dot11Cipher *PairCipher;	/* optional element of type tt:Dot11Cipher */
	enum tt__Dot11Cipher *GroupCipher;	/* optional element of type tt:Dot11Cipher */
	enum tt__Dot11SignalStrength *SignalStrength;	/* optional element of type tt:Dot11SignalStrength */
	char *ActiveConfigAlias;	/* required element of type tt:ReferenceToken */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 376; } /* = unique id SOAP_TYPE_tt__Dot11Status */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11Status(): BSSID(NULL), PairCipher(NULL), GroupCipher(NULL), SignalStrength(NULL), ActiveConfigAlias(NULL), __any(NULL), soap(NULL) { tt__Dot11Status::soap_default(NULL); }
	virtual ~tt__Dot11Status() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11AvailableNetworks
#define SOAP_TYPE_tt__Dot11AvailableNetworks (377)
/* tt:Dot11AvailableNetworks */
class SOAP_CMAC tt__Dot11AvailableNetworks
{
public:
	xsd__hexBinary SSID;	/* required element of type tt:Dot11SSIDType */
	char *BSSID;	/* optional element of type xsd:string */
	int __sizeAuthAndMangementSuite;	/* sequence of elements <AuthAndMangementSuite> */
	enum tt__Dot11AuthAndMangementSuite *AuthAndMangementSuite;	/* optional element of type tt:Dot11AuthAndMangementSuite */
	int __sizePairCipher;	/* sequence of elements <PairCipher> */
	enum tt__Dot11Cipher *PairCipher;	/* optional element of type tt:Dot11Cipher */
	int __sizeGroupCipher;	/* sequence of elements <GroupCipher> */
	enum tt__Dot11Cipher *GroupCipher;	/* optional element of type tt:Dot11Cipher */
	enum tt__Dot11SignalStrength *SignalStrength;	/* optional element of type tt:Dot11SignalStrength */
	class tt__Dot11AvailableNetworksExtension *Extension;	/* optional element of type tt:Dot11AvailableNetworksExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 377; } /* = unique id SOAP_TYPE_tt__Dot11AvailableNetworks */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11AvailableNetworks(): BSSID(NULL), AuthAndMangementSuite(NULL), PairCipher(NULL), GroupCipher(NULL), SignalStrength(NULL), Extension(NULL), soap(NULL) { tt__Dot11AvailableNetworks::soap_default(NULL); }
	virtual ~tt__Dot11AvailableNetworks() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11AvailableNetworksExtension
#define SOAP_TYPE_tt__Dot11AvailableNetworksExtension (378)
/* tt:Dot11AvailableNetworksExtension */
class SOAP_CMAC tt__Dot11AvailableNetworksExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 378; } /* = unique id SOAP_TYPE_tt__Dot11AvailableNetworksExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11AvailableNetworksExtension(): __any(NULL), soap(NULL) { tt__Dot11AvailableNetworksExtension::soap_default(NULL); }
	virtual ~tt__Dot11AvailableNetworksExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Capabilities
#define SOAP_TYPE_tt__Capabilities (379)
/* tt:Capabilities */
class SOAP_CMAC tt__Capabilities
{
public:
	class tt__AnalyticsCapabilities *Analytics;	/* optional element of type tt:AnalyticsCapabilities */
	class tt__DeviceCapabilities *Device;	/* optional element of type tt:DeviceCapabilities */
	class tt__EventCapabilities *Events;	/* optional element of type tt:EventCapabilities */
	class tt__ImagingCapabilities *Imaging;	/* optional element of type tt:ImagingCapabilities */
	class tt__MediaCapabilities *Media;	/* optional element of type tt:MediaCapabilities */
	class tt__PTZCapabilities *PTZ;	/* optional element of type tt:PTZCapabilities */
	class tt__CapabilitiesExtension *Extension;	/* optional element of type tt:CapabilitiesExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 379; } /* = unique id SOAP_TYPE_tt__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Capabilities(): Analytics(NULL), Device(NULL), Events(NULL), Imaging(NULL), Media(NULL), PTZ(NULL), Extension(NULL), soap(NULL) { tt__Capabilities::soap_default(NULL); }
	virtual ~tt__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__CapabilitiesExtension
#define SOAP_TYPE_tt__CapabilitiesExtension (380)
/* tt:CapabilitiesExtension */
class SOAP_CMAC tt__CapabilitiesExtension
{
public:
	class tt__DeviceIOCapabilities *DeviceIO;	/* optional element of type tt:DeviceIOCapabilities */
	class tt__DisplayCapabilities *Display;	/* optional element of type tt:DisplayCapabilities */
	class tt__RecordingCapabilities *Recording;	/* optional element of type tt:RecordingCapabilities */
	class tt__SearchCapabilities *Search;	/* optional element of type tt:SearchCapabilities */
	class tt__ReplayCapabilities *Replay;	/* optional element of type tt:ReplayCapabilities */
	class tt__ReceiverCapabilities *Receiver;	/* optional element of type tt:ReceiverCapabilities */
	class tt__AnalyticsDeviceCapabilities *AnalyticsDevice;	/* optional element of type tt:AnalyticsDeviceCapabilities */
	class tt__CapabilitiesExtension2 *Extensions;	/* optional element of type tt:CapabilitiesExtension2 */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 380; } /* = unique id SOAP_TYPE_tt__CapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CapabilitiesExtension(): DeviceIO(NULL), Display(NULL), Recording(NULL), Search(NULL), Replay(NULL), Receiver(NULL), AnalyticsDevice(NULL), Extensions(NULL), __any(NULL), soap(NULL) { tt__CapabilitiesExtension::soap_default(NULL); }
	virtual ~tt__CapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__CapabilitiesExtension2
#define SOAP_TYPE_tt__CapabilitiesExtension2 (381)
/* tt:CapabilitiesExtension2 */
class SOAP_CMAC tt__CapabilitiesExtension2
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 381; } /* = unique id SOAP_TYPE_tt__CapabilitiesExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CapabilitiesExtension2(): __any(NULL), soap(NULL) { tt__CapabilitiesExtension2::soap_default(NULL); }
	virtual ~tt__CapabilitiesExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsCapabilities
#define SOAP_TYPE_tt__AnalyticsCapabilities (382)
/* tt:AnalyticsCapabilities */
class SOAP_CMAC tt__AnalyticsCapabilities
{
public:
	char *XAddr;	/* required element of type xsd:anyURI */
	bool RuleSupport;	/* required element of type xsd:boolean */
	bool AnalyticsModuleSupport;	/* required element of type xsd:boolean */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 382; } /* = unique id SOAP_TYPE_tt__AnalyticsCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsCapabilities(): XAddr(NULL), __any(NULL), soap(NULL) { tt__AnalyticsCapabilities::soap_default(NULL); }
	virtual ~tt__AnalyticsCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__DeviceCapabilities
#define SOAP_TYPE_tt__DeviceCapabilities (383)
/* tt:DeviceCapabilities */
class SOAP_CMAC tt__DeviceCapabilities
{
public:
	char *XAddr;	/* required element of type xsd:anyURI */
	class tt__NetworkCapabilities *Network;	/* optional element of type tt:NetworkCapabilities */
	class tt__SystemCapabilities *System;	/* optional element of type tt:SystemCapabilities */
	class tt__IOCapabilities *IO;	/* optional element of type tt:IOCapabilities */
	class tt__SecurityCapabilities *Security;	/* optional element of type tt:SecurityCapabilities */
	class tt__DeviceCapabilitiesExtension *Extension;	/* optional element of type tt:DeviceCapabilitiesExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 383; } /* = unique id SOAP_TYPE_tt__DeviceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DeviceCapabilities(): XAddr(NULL), Network(NULL), System(NULL), IO(NULL), Security(NULL), Extension(NULL), soap(NULL) { tt__DeviceCapabilities::soap_default(NULL); }
	virtual ~tt__DeviceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__DeviceCapabilitiesExtension
#define SOAP_TYPE_tt__DeviceCapabilitiesExtension (384)
/* tt:DeviceCapabilitiesExtension */
class SOAP_CMAC tt__DeviceCapabilitiesExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 384; } /* = unique id SOAP_TYPE_tt__DeviceCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DeviceCapabilitiesExtension(): __any(NULL), soap(NULL) { tt__DeviceCapabilitiesExtension::soap_default(NULL); }
	virtual ~tt__DeviceCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__EventCapabilities
#define SOAP_TYPE_tt__EventCapabilities (385)
/* tt:EventCapabilities */
class SOAP_CMAC tt__EventCapabilities
{
public:
	char *XAddr;	/* required element of type xsd:anyURI */
	bool WSSubscriptionPolicySupport;	/* required element of type xsd:boolean */
	bool WSPullPointSupport;	/* required element of type xsd:boolean */
	bool WSPausableSubscriptionManagerInterfaceSupport;	/* required element of type xsd:boolean */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 385; } /* = unique id SOAP_TYPE_tt__EventCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EventCapabilities(): XAddr(NULL), __any(NULL), soap(NULL) { tt__EventCapabilities::soap_default(NULL); }
	virtual ~tt__EventCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__IOCapabilities
#define SOAP_TYPE_tt__IOCapabilities (386)
/* tt:IOCapabilities */
class SOAP_CMAC tt__IOCapabilities
{
public:
	int *InputConnectors;	/* optional element of type xsd:int */
	int *RelayOutputs;	/* optional element of type xsd:int */
	class tt__IOCapabilitiesExtension *Extension;	/* optional element of type tt:IOCapabilitiesExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 386; } /* = unique id SOAP_TYPE_tt__IOCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IOCapabilities(): InputConnectors(NULL), RelayOutputs(NULL), Extension(NULL), soap(NULL) { tt__IOCapabilities::soap_default(NULL); }
	virtual ~tt__IOCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__IOCapabilitiesExtension
#define SOAP_TYPE_tt__IOCapabilitiesExtension (387)
/* tt:IOCapabilitiesExtension */
class SOAP_CMAC tt__IOCapabilitiesExtension
{
public:
	bool *Auxiliary;	/* optional element of type xsd:boolean */
	int __sizeAuxiliaryCommands;	/* sequence of elements <AuxiliaryCommands> */
	char **AuxiliaryCommands;	/* optional element of type tt:AuxiliaryData */
	class tt__IOCapabilitiesExtension2 *Extension;	/* required element of type tt:IOCapabilitiesExtension2 */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 387; } /* = unique id SOAP_TYPE_tt__IOCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IOCapabilitiesExtension(): Auxiliary(NULL), AuxiliaryCommands(NULL), Extension(NULL), __any(NULL), soap(NULL) { tt__IOCapabilitiesExtension::soap_default(NULL); }
	virtual ~tt__IOCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__IOCapabilitiesExtension2
#define SOAP_TYPE_tt__IOCapabilitiesExtension2 (388)
/* tt:IOCapabilitiesExtension2 */
class SOAP_CMAC tt__IOCapabilitiesExtension2
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 388; } /* = unique id SOAP_TYPE_tt__IOCapabilitiesExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IOCapabilitiesExtension2(): __any(NULL), soap(NULL) { tt__IOCapabilitiesExtension2::soap_default(NULL); }
	virtual ~tt__IOCapabilitiesExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__MediaCapabilities
#define SOAP_TYPE_tt__MediaCapabilities (389)
/* tt:MediaCapabilities */
class SOAP_CMAC tt__MediaCapabilities
{
public:
	char *XAddr;	/* required element of type xsd:anyURI */
	class tt__RealTimeStreamingCapabilities *StreamingCapabilities;	/* required element of type tt:RealTimeStreamingCapabilities */
	class tt__MediaCapabilitiesExtension *Extension;	/* optional element of type tt:MediaCapabilitiesExtension */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 389; } /* = unique id SOAP_TYPE_tt__MediaCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MediaCapabilities(): XAddr(NULL), StreamingCapabilities(NULL), Extension(NULL), __any(NULL), soap(NULL) { tt__MediaCapabilities::soap_default(NULL); }
	virtual ~tt__MediaCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__MediaCapabilitiesExtension
#define SOAP_TYPE_tt__MediaCapabilitiesExtension (390)
/* tt:MediaCapabilitiesExtension */
class SOAP_CMAC tt__MediaCapabilitiesExtension
{
public:
	class tt__ProfileCapabilities *ProfileCapabilities;	/* required element of type tt:ProfileCapabilities */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 390; } /* = unique id SOAP_TYPE_tt__MediaCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MediaCapabilitiesExtension(): ProfileCapabilities(NULL), __any(NULL), soap(NULL) { tt__MediaCapabilitiesExtension::soap_default(NULL); }
	virtual ~tt__MediaCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__RealTimeStreamingCapabilities
#define SOAP_TYPE_tt__RealTimeStreamingCapabilities (391)
/* tt:RealTimeStreamingCapabilities */
class SOAP_CMAC tt__RealTimeStreamingCapabilities
{
public:
	bool *RTPMulticast;	/* optional element of type xsd:boolean */
	bool *RTP_USCORETCP;	/* optional element of type xsd:boolean */
	bool *RTP_USCORERTSP_USCORETCP;	/* optional element of type xsd:boolean */
	class tt__RealTimeStreamingCapabilitiesExtension *Extension;	/* optional element of type tt:RealTimeStreamingCapabilitiesExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 391; } /* = unique id SOAP_TYPE_tt__RealTimeStreamingCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RealTimeStreamingCapabilities(): RTPMulticast(NULL), RTP_USCORETCP(NULL), RTP_USCORERTSP_USCORETCP(NULL), Extension(NULL), soap(NULL) { tt__RealTimeStreamingCapabilities::soap_default(NULL); }
	virtual ~tt__RealTimeStreamingCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension
#define SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension (392)
/* tt:RealTimeStreamingCapabilitiesExtension */
class SOAP_CMAC tt__RealTimeStreamingCapabilitiesExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 392; } /* = unique id SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RealTimeStreamingCapabilitiesExtension(): __any(NULL), soap(NULL) { tt__RealTimeStreamingCapabilitiesExtension::soap_default(NULL); }
	virtual ~tt__RealTimeStreamingCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ProfileCapabilities
#define SOAP_TYPE_tt__ProfileCapabilities (393)
/* tt:ProfileCapabilities */
class SOAP_CMAC tt__ProfileCapabilities
{
public:
	int MaximumNumberOfProfiles;	/* required element of type xsd:int */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 393; } /* = unique id SOAP_TYPE_tt__ProfileCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ProfileCapabilities(): __any(NULL), soap(NULL) { tt__ProfileCapabilities::soap_default(NULL); }
	virtual ~tt__ProfileCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkCapabilities
#define SOAP_TYPE_tt__NetworkCapabilities (394)
/* tt:NetworkCapabilities */
class SOAP_CMAC tt__NetworkCapabilities
{
public:
	bool *IPFilter;	/* optional element of type xsd:boolean */
	bool *ZeroConfiguration;	/* optional element of type xsd:boolean */
	bool *IPVersion6;	/* optional element of type xsd:boolean */
	bool *DynDNS;	/* optional element of type xsd:boolean */
	class tt__NetworkCapabilitiesExtension *Extension;	/* optional element of type tt:NetworkCapabilitiesExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 394; } /* = unique id SOAP_TYPE_tt__NetworkCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkCapabilities(): IPFilter(NULL), ZeroConfiguration(NULL), IPVersion6(NULL), DynDNS(NULL), Extension(NULL), soap(NULL) { tt__NetworkCapabilities::soap_default(NULL); }
	virtual ~tt__NetworkCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkCapabilitiesExtension
#define SOAP_TYPE_tt__NetworkCapabilitiesExtension (395)
/* tt:NetworkCapabilitiesExtension */
class SOAP_CMAC tt__NetworkCapabilitiesExtension
{
public:
	bool *Dot11Configuration;	/* optional element of type xsd:boolean */
	class tt__NetworkCapabilitiesExtension2 *Extension;	/* optional element of type tt:NetworkCapabilitiesExtension2 */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 395; } /* = unique id SOAP_TYPE_tt__NetworkCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkCapabilitiesExtension(): Dot11Configuration(NULL), Extension(NULL), __any(NULL), soap(NULL) { tt__NetworkCapabilitiesExtension::soap_default(NULL); }
	virtual ~tt__NetworkCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkCapabilitiesExtension2
#define SOAP_TYPE_tt__NetworkCapabilitiesExtension2 (396)
/* tt:NetworkCapabilitiesExtension2 */
class SOAP_CMAC tt__NetworkCapabilitiesExtension2
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 396; } /* = unique id SOAP_TYPE_tt__NetworkCapabilitiesExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkCapabilitiesExtension2(): __any(NULL), soap(NULL) { tt__NetworkCapabilitiesExtension2::soap_default(NULL); }
	virtual ~tt__NetworkCapabilitiesExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__SecurityCapabilities
#define SOAP_TYPE_tt__SecurityCapabilities (397)
/* tt:SecurityCapabilities */
class SOAP_CMAC tt__SecurityCapabilities
{
public:
	bool TLS1_x002e1;	/* required element of type xsd:boolean */
	bool TLS1_x002e2;	/* required element of type xsd:boolean */
	bool OnboardKeyGeneration;	/* required element of type xsd:boolean */
	bool AccessPolicyConfig;	/* required element of type xsd:boolean */
	bool X_x002e509Token;	/* required element of type xsd:boolean */
	bool SAMLToken;	/* required element of type xsd:boolean */
	bool KerberosToken;	/* required element of type xsd:boolean */
	bool RELToken;	/* required element of type xsd:boolean */
	class tt__SecurityCapabilitiesExtension *Extension;	/* optional element of type tt:SecurityCapabilitiesExtension */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 397; } /* = unique id SOAP_TYPE_tt__SecurityCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SecurityCapabilities(): Extension(NULL), __any(NULL), soap(NULL) { tt__SecurityCapabilities::soap_default(NULL); }
	virtual ~tt__SecurityCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__SecurityCapabilitiesExtension
#define SOAP_TYPE_tt__SecurityCapabilitiesExtension (398)
/* tt:SecurityCapabilitiesExtension */
class SOAP_CMAC tt__SecurityCapabilitiesExtension
{
public:
	bool TLS1_x002e0;	/* required element of type xsd:boolean */
	class tt__SecurityCapabilitiesExtension2 *Extension;	/* optional element of type tt:SecurityCapabilitiesExtension2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 398; } /* = unique id SOAP_TYPE_tt__SecurityCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SecurityCapabilitiesExtension(): Extension(NULL), soap(NULL) { tt__SecurityCapabilitiesExtension::soap_default(NULL); }
	virtual ~tt__SecurityCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__SecurityCapabilitiesExtension2
#define SOAP_TYPE_tt__SecurityCapabilitiesExtension2 (399)
/* tt:SecurityCapabilitiesExtension2 */
class SOAP_CMAC tt__SecurityCapabilitiesExtension2
{
public:
	bool Dot1X;	/* required element of type xsd:boolean */
	int __sizeSupportedEAPMethod;	/* sequence of elements <SupportedEAPMethod> */
	int *SupportedEAPMethod;	/* optional element of type xsd:int */
	bool RemoteUserHandling;	/* required element of type xsd:boolean */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 399; } /* = unique id SOAP_TYPE_tt__SecurityCapabilitiesExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SecurityCapabilitiesExtension2(): SupportedEAPMethod(NULL), __any(NULL), soap(NULL) { tt__SecurityCapabilitiesExtension2::soap_default(NULL); }
	virtual ~tt__SecurityCapabilitiesExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__SystemCapabilities
#define SOAP_TYPE_tt__SystemCapabilities (400)
/* tt:SystemCapabilities */
class SOAP_CMAC tt__SystemCapabilities
{
public:
	bool DiscoveryResolve;	/* required element of type xsd:boolean */
	bool DiscoveryBye;	/* required element of type xsd:boolean */
	bool RemoteDiscovery;	/* required element of type xsd:boolean */
	bool SystemBackup;	/* required element of type xsd:boolean */
	bool SystemLogging;	/* required element of type xsd:boolean */
	bool FirmwareUpgrade;	/* required element of type xsd:boolean */
	int __sizeSupportedVersions;	/* sequence of elements <SupportedVersions> */
	class tt__OnvifVersion **SupportedVersions;	/* required element of type tt:OnvifVersion */
	class tt__SystemCapabilitiesExtension *Extension;	/* optional element of type tt:SystemCapabilitiesExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 400; } /* = unique id SOAP_TYPE_tt__SystemCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SystemCapabilities(): SupportedVersions(NULL), Extension(NULL), soap(NULL) { tt__SystemCapabilities::soap_default(NULL); }
	virtual ~tt__SystemCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__SystemCapabilitiesExtension
#define SOAP_TYPE_tt__SystemCapabilitiesExtension (401)
/* tt:SystemCapabilitiesExtension */
class SOAP_CMAC tt__SystemCapabilitiesExtension
{
public:
	bool *HttpFirmwareUpgrade;	/* optional element of type xsd:boolean */
	bool *HttpSystemBackup;	/* optional element of type xsd:boolean */
	bool *HttpSystemLogging;	/* optional element of type xsd:boolean */
	bool *HttpSupportInformation;	/* optional element of type xsd:boolean */
	class tt__SystemCapabilitiesExtension2 *Extension;	/* optional element of type tt:SystemCapabilitiesExtension2 */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 401; } /* = unique id SOAP_TYPE_tt__SystemCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SystemCapabilitiesExtension(): HttpFirmwareUpgrade(NULL), HttpSystemBackup(NULL), HttpSystemLogging(NULL), HttpSupportInformation(NULL), Extension(NULL), __any(NULL), soap(NULL) { tt__SystemCapabilitiesExtension::soap_default(NULL); }
	virtual ~tt__SystemCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__SystemCapabilitiesExtension2
#define SOAP_TYPE_tt__SystemCapabilitiesExtension2 (402)
/* tt:SystemCapabilitiesExtension2 */
class SOAP_CMAC tt__SystemCapabilitiesExtension2
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 402; } /* = unique id SOAP_TYPE_tt__SystemCapabilitiesExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SystemCapabilitiesExtension2(): __any(NULL), soap(NULL) { tt__SystemCapabilitiesExtension2::soap_default(NULL); }
	virtual ~tt__SystemCapabilitiesExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__OnvifVersion
#define SOAP_TYPE_tt__OnvifVersion (403)
/* tt:OnvifVersion */
class SOAP_CMAC tt__OnvifVersion
{
public:
	int Major;	/* required element of type xsd:int */
	int Minor;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 403; } /* = unique id SOAP_TYPE_tt__OnvifVersion */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OnvifVersion(): soap(NULL) { tt__OnvifVersion::soap_default(NULL); }
	virtual ~tt__OnvifVersion() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingCapabilities
#define SOAP_TYPE_tt__ImagingCapabilities (404)
/* tt:ImagingCapabilities */
class SOAP_CMAC tt__ImagingCapabilities
{
public:
	char *XAddr;	/* required element of type xsd:anyURI */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 404; } /* = unique id SOAP_TYPE_tt__ImagingCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingCapabilities(): XAddr(NULL), soap(NULL) { tt__ImagingCapabilities::soap_default(NULL); }
	virtual ~tt__ImagingCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZCapabilities
#define SOAP_TYPE_tt__PTZCapabilities (405)
/* tt:PTZCapabilities */
class SOAP_CMAC tt__PTZCapabilities
{
public:
	char *XAddr;	/* required element of type xsd:anyURI */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 405; } /* = unique id SOAP_TYPE_tt__PTZCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZCapabilities(): XAddr(NULL), __any(NULL), soap(NULL) { tt__PTZCapabilities::soap_default(NULL); }
	virtual ~tt__PTZCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__DeviceIOCapabilities
#define SOAP_TYPE_tt__DeviceIOCapabilities (406)
/* tt:DeviceIOCapabilities */
class SOAP_CMAC tt__DeviceIOCapabilities
{
public:
	char *XAddr;	/* required element of type xsd:anyURI */
	int VideoSources;	/* required element of type xsd:int */
	int VideoOutputs;	/* required element of type xsd:int */
	int AudioSources;	/* required element of type xsd:int */
	int AudioOutputs;	/* required element of type xsd:int */
	int RelayOutputs;	/* required element of type xsd:int */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 406; } /* = unique id SOAP_TYPE_tt__DeviceIOCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DeviceIOCapabilities(): XAddr(NULL), __any(NULL), soap(NULL) { tt__DeviceIOCapabilities::soap_default(NULL); }
	virtual ~tt__DeviceIOCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__DisplayCapabilities
#define SOAP_TYPE_tt__DisplayCapabilities (407)
/* tt:DisplayCapabilities */
class SOAP_CMAC tt__DisplayCapabilities
{
public:
	char *XAddr;	/* required element of type xsd:anyURI */
	bool FixedLayout;	/* required element of type xsd:boolean */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 407; } /* = unique id SOAP_TYPE_tt__DisplayCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DisplayCapabilities(): XAddr(NULL), __any(NULL), soap(NULL) { tt__DisplayCapabilities::soap_default(NULL); }
	virtual ~tt__DisplayCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingCapabilities
#define SOAP_TYPE_tt__RecordingCapabilities (408)
/* tt:RecordingCapabilities */
class SOAP_CMAC tt__RecordingCapabilities
{
public:
	char *XAddr;	/* required element of type xsd:anyURI */
	bool ReceiverSource;	/* required element of type xsd:boolean */
	bool MediaProfileSource;	/* required element of type xsd:boolean */
	bool DynamicRecordings;	/* required element of type xsd:boolean */
	bool DynamicTracks;	/* required element of type xsd:boolean */
	int MaxStringLength;	/* required element of type xsd:int */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 408; } /* = unique id SOAP_TYPE_tt__RecordingCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingCapabilities(): XAddr(NULL), __any(NULL), soap(NULL) { tt__RecordingCapabilities::soap_default(NULL); }
	virtual ~tt__RecordingCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__SearchCapabilities
#define SOAP_TYPE_tt__SearchCapabilities (409)
/* tt:SearchCapabilities */
class SOAP_CMAC tt__SearchCapabilities
{
public:
	char *XAddr;	/* required element of type xsd:anyURI */
	bool MetadataSearch;	/* required element of type xsd:boolean */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 409; } /* = unique id SOAP_TYPE_tt__SearchCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SearchCapabilities(): XAddr(NULL), __any(NULL), soap(NULL) { tt__SearchCapabilities::soap_default(NULL); }
	virtual ~tt__SearchCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__ReplayCapabilities
#define SOAP_TYPE_tt__ReplayCapabilities (410)
/* tt:ReplayCapabilities */
class SOAP_CMAC tt__ReplayCapabilities
{
public:
	char *XAddr;	/* required element of type xsd:anyURI */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 410; } /* = unique id SOAP_TYPE_tt__ReplayCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ReplayCapabilities(): XAddr(NULL), __any(NULL), soap(NULL) { tt__ReplayCapabilities::soap_default(NULL); }
	virtual ~tt__ReplayCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__ReceiverCapabilities
#define SOAP_TYPE_tt__ReceiverCapabilities (411)
/* tt:ReceiverCapabilities */
class SOAP_CMAC tt__ReceiverCapabilities
{
public:
	char *XAddr;	/* required element of type xsd:anyURI */
	bool RTP_USCOREMulticast;	/* required element of type xsd:boolean */
	bool RTP_USCORETCP;	/* required element of type xsd:boolean */
	bool RTP_USCORERTSP_USCORETCP;	/* required element of type xsd:boolean */
	int SupportedReceivers;	/* required element of type xsd:int */
	int MaximumRTSPURILength;	/* required element of type xsd:int */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 411; } /* = unique id SOAP_TYPE_tt__ReceiverCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ReceiverCapabilities(): XAddr(NULL), __any(NULL), soap(NULL) { tt__ReceiverCapabilities::soap_default(NULL); }
	virtual ~tt__ReceiverCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsDeviceCapabilities
#define SOAP_TYPE_tt__AnalyticsDeviceCapabilities (412)
/* tt:AnalyticsDeviceCapabilities */
class SOAP_CMAC tt__AnalyticsDeviceCapabilities
{
public:
	char *XAddr;	/* required element of type xsd:anyURI */
	bool *RuleSupport;	/* optional element of type xsd:boolean */
	class tt__AnalyticsDeviceExtension *Extension;	/* optional element of type tt:AnalyticsDeviceExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 412; } /* = unique id SOAP_TYPE_tt__AnalyticsDeviceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsDeviceCapabilities(): XAddr(NULL), RuleSupport(NULL), Extension(NULL), soap(NULL) { tt__AnalyticsDeviceCapabilities::soap_default(NULL); }
	virtual ~tt__AnalyticsDeviceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsDeviceExtension
#define SOAP_TYPE_tt__AnalyticsDeviceExtension (413)
/* tt:AnalyticsDeviceExtension */
class SOAP_CMAC tt__AnalyticsDeviceExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 413; } /* = unique id SOAP_TYPE_tt__AnalyticsDeviceExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsDeviceExtension(): __any(NULL), soap(NULL) { tt__AnalyticsDeviceExtension::soap_default(NULL); }
	virtual ~tt__AnalyticsDeviceExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__SystemLog
#define SOAP_TYPE_tt__SystemLog (414)
/* tt:SystemLog */
class SOAP_CMAC tt__SystemLog
{
public:
	class tt__AttachmentData *Binary;	/* optional element of type tt:AttachmentData */
	char *String;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 414; } /* = unique id SOAP_TYPE_tt__SystemLog */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SystemLog(): Binary(NULL), String(NULL), soap(NULL) { tt__SystemLog::soap_default(NULL); }
	virtual ~tt__SystemLog() { }
};
#endif

#ifndef SOAP_TYPE_tt__SupportInformation
#define SOAP_TYPE_tt__SupportInformation (415)
/* tt:SupportInformation */
class SOAP_CMAC tt__SupportInformation
{
public:
	tt__AttachmentData *Binary;	/* optional element of type tt:AttachmentData */
	char *String;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 415; } /* = unique id SOAP_TYPE_tt__SupportInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SupportInformation(): Binary(NULL), String(NULL), soap(NULL) { tt__SupportInformation::soap_default(NULL); }
	virtual ~tt__SupportInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__BinaryData
#define SOAP_TYPE_tt__BinaryData (416)
/* tt:BinaryData */
class SOAP_CMAC tt__BinaryData
{
public:
	xsd__base64Binary Data;	/* required element of type xsd:base64Binary */
	char *xmime5__contentType;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 416; } /* = unique id SOAP_TYPE_tt__BinaryData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__BinaryData(): xmime5__contentType(NULL), soap(NULL) { tt__BinaryData::soap_default(NULL); }
	virtual ~tt__BinaryData() { }
};
#endif

#ifndef SOAP_TYPE_tt__AttachmentData
#define SOAP_TYPE_tt__AttachmentData (417)
/* tt:AttachmentData */
class SOAP_CMAC tt__AttachmentData
{
public:
	struct _xop__Include xop__Include;	/* required element of type xop:Include */
	char *xmime5__contentType;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 417; } /* = unique id SOAP_TYPE_tt__AttachmentData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AttachmentData(): xmime5__contentType(NULL), soap(NULL) { tt__AttachmentData::soap_default(NULL); }
	virtual ~tt__AttachmentData() { }
};
#endif

#ifndef SOAP_TYPE_tt__BackupFile
#define SOAP_TYPE_tt__BackupFile (418)
/* tt:BackupFile */
class SOAP_CMAC tt__BackupFile
{
public:
	char *Name;	/* required element of type xsd:string */
	tt__AttachmentData *Data;	/* required element of type tt:AttachmentData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 418; } /* = unique id SOAP_TYPE_tt__BackupFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__BackupFile(): Name(NULL), Data(NULL), soap(NULL) { tt__BackupFile::soap_default(NULL); }
	virtual ~tt__BackupFile() { }
};
#endif

#ifndef SOAP_TYPE_tt__SystemLogUriList
#define SOAP_TYPE_tt__SystemLogUriList (419)
/* tt:SystemLogUriList */
class SOAP_CMAC tt__SystemLogUriList
{
public:
	int __sizeSystemLog;	/* sequence of elements <SystemLog> */
	class tt__SystemLogUri **SystemLog;	/* optional element of type tt:SystemLogUri */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 419; } /* = unique id SOAP_TYPE_tt__SystemLogUriList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SystemLogUriList(): SystemLog(NULL), soap(NULL) { tt__SystemLogUriList::soap_default(NULL); }
	virtual ~tt__SystemLogUriList() { }
};
#endif

#ifndef SOAP_TYPE_tt__SystemLogUri
#define SOAP_TYPE_tt__SystemLogUri (420)
/* tt:SystemLogUri */
class SOAP_CMAC tt__SystemLogUri
{
public:
	enum tt__SystemLogType Type;	/* required element of type tt:SystemLogType */
	char *Uri;	/* required element of type xsd:anyURI */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 420; } /* = unique id SOAP_TYPE_tt__SystemLogUri */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SystemLogUri(): Uri(NULL), __any(NULL), soap(NULL) { tt__SystemLogUri::soap_default(NULL); }
	virtual ~tt__SystemLogUri() { }
};
#endif

#ifndef SOAP_TYPE_tt__SystemDateTime
#define SOAP_TYPE_tt__SystemDateTime (421)
/* tt:SystemDateTime */
class SOAP_CMAC tt__SystemDateTime
{
public:
	enum tt__SetDateTimeType DateTimeType;	/* required element of type tt:SetDateTimeType */
	bool DaylightSavings;	/* required element of type xsd:boolean */
	class tt__TimeZone *TimeZone;	/* optional element of type tt:TimeZone */
	class tt__DateTime *UTCDateTime;	/* optional element of type tt:DateTime */
	tt__DateTime *LocalDateTime;	/* optional element of type tt:DateTime */
	class tt__SystemDateTimeExtension *Extension;	/* optional element of type tt:SystemDateTimeExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 421; } /* = unique id SOAP_TYPE_tt__SystemDateTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SystemDateTime(): TimeZone(NULL), UTCDateTime(NULL), LocalDateTime(NULL), Extension(NULL), soap(NULL) { tt__SystemDateTime::soap_default(NULL); }
	virtual ~tt__SystemDateTime() { }
};
#endif

#ifndef SOAP_TYPE_tt__SystemDateTimeExtension
#define SOAP_TYPE_tt__SystemDateTimeExtension (422)
/* tt:SystemDateTimeExtension */
class SOAP_CMAC tt__SystemDateTimeExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 422; } /* = unique id SOAP_TYPE_tt__SystemDateTimeExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SystemDateTimeExtension(): __any(NULL), soap(NULL) { tt__SystemDateTimeExtension::soap_default(NULL); }
	virtual ~tt__SystemDateTimeExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__DateTime
#define SOAP_TYPE_tt__DateTime (423)
/* tt:DateTime */
class SOAP_CMAC tt__DateTime
{
public:
	class tt__Time *Time;	/* required element of type tt:Time */
	class tt__Date *Date;	/* required element of type tt:Date */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 423; } /* = unique id SOAP_TYPE_tt__DateTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DateTime(): Time(NULL), Date(NULL), soap(NULL) { tt__DateTime::soap_default(NULL); }
	virtual ~tt__DateTime() { }
};
#endif

#ifndef SOAP_TYPE_tt__Date
#define SOAP_TYPE_tt__Date (424)
/* tt:Date */
class SOAP_CMAC tt__Date
{
public:
	int Year;	/* required element of type xsd:int */
	int Month;	/* required element of type xsd:int */
	int Day;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 424; } /* = unique id SOAP_TYPE_tt__Date */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Date(): soap(NULL) { tt__Date::soap_default(NULL); }
	virtual ~tt__Date() { }
};
#endif

#ifndef SOAP_TYPE_tt__Time
#define SOAP_TYPE_tt__Time (425)
/* tt:Time */
class SOAP_CMAC tt__Time
{
public:
	int Hour;	/* required element of type xsd:int */
	int Minute;	/* required element of type xsd:int */
	int Second;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 425; } /* = unique id SOAP_TYPE_tt__Time */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Time(): soap(NULL) { tt__Time::soap_default(NULL); }
	virtual ~tt__Time() { }
};
#endif

#ifndef SOAP_TYPE_tt__TimeZone
#define SOAP_TYPE_tt__TimeZone (426)
/* tt:TimeZone */
class SOAP_CMAC tt__TimeZone
{
public:
	char *TZ;	/* required element of type xsd:token */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 426; } /* = unique id SOAP_TYPE_tt__TimeZone */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__TimeZone(): TZ(NULL), soap(NULL) { tt__TimeZone::soap_default(NULL); }
	virtual ~tt__TimeZone() { }
};
#endif

#ifndef SOAP_TYPE_tt__RemoteUser
#define SOAP_TYPE_tt__RemoteUser (427)
/* tt:RemoteUser */
class SOAP_CMAC tt__RemoteUser
{
public:
	char *Username;	/* required element of type xsd:string */
	char *Password;	/* optional element of type xsd:string */
	bool UseDerivedPassword;	/* required element of type xsd:boolean */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 427; } /* = unique id SOAP_TYPE_tt__RemoteUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RemoteUser(): Username(NULL), Password(NULL), __any(NULL), soap(NULL) { tt__RemoteUser::soap_default(NULL); }
	virtual ~tt__RemoteUser() { }
};
#endif

#ifndef SOAP_TYPE_tt__User
#define SOAP_TYPE_tt__User (428)
/* tt:User */
class SOAP_CMAC tt__User
{
public:
	char *Username;	/* required element of type xsd:string */
	char *Password;	/* optional element of type xsd:string */
	enum tt__UserLevel UserLevel;	/* required element of type tt:UserLevel */
	class tt__UserExtension *Extension;	/* optional element of type tt:UserExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 428; } /* = unique id SOAP_TYPE_tt__User */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__User(): Username(NULL), Password(NULL), Extension(NULL), soap(NULL) { tt__User::soap_default(NULL); }
	virtual ~tt__User() { }
};
#endif

#ifndef SOAP_TYPE_tt__UserExtension
#define SOAP_TYPE_tt__UserExtension (429)
/* tt:UserExtension */
class SOAP_CMAC tt__UserExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 429; } /* = unique id SOAP_TYPE_tt__UserExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__UserExtension(): __any(NULL), soap(NULL) { tt__UserExtension::soap_default(NULL); }
	virtual ~tt__UserExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__CertificateGenerationParameters
#define SOAP_TYPE_tt__CertificateGenerationParameters (430)
/* tt:CertificateGenerationParameters */
class SOAP_CMAC tt__CertificateGenerationParameters
{
public:
	char *CertificateID;	/* optional element of type xsd:token */
	char *Subject;	/* optional element of type xsd:string */
	char *ValidNotBefore;	/* optional element of type xsd:token */
	char *ValidNotAfter;	/* optional element of type xsd:token */
	class tt__CertificateGenerationParametersExtension *Extension;	/* optional element of type tt:CertificateGenerationParametersExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 430; } /* = unique id SOAP_TYPE_tt__CertificateGenerationParameters */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CertificateGenerationParameters(): CertificateID(NULL), Subject(NULL), ValidNotBefore(NULL), ValidNotAfter(NULL), Extension(NULL), soap(NULL) { tt__CertificateGenerationParameters::soap_default(NULL); }
	virtual ~tt__CertificateGenerationParameters() { }
};
#endif

#ifndef SOAP_TYPE_tt__CertificateGenerationParametersExtension
#define SOAP_TYPE_tt__CertificateGenerationParametersExtension (431)
/* tt:CertificateGenerationParametersExtension */
class SOAP_CMAC tt__CertificateGenerationParametersExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 431; } /* = unique id SOAP_TYPE_tt__CertificateGenerationParametersExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CertificateGenerationParametersExtension(): __any(NULL), soap(NULL) { tt__CertificateGenerationParametersExtension::soap_default(NULL); }
	virtual ~tt__CertificateGenerationParametersExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Certificate
#define SOAP_TYPE_tt__Certificate (432)
/* tt:Certificate */
class SOAP_CMAC tt__Certificate
{
public:
	char *CertificateID;	/* required element of type xsd:token */
	tt__BinaryData *Certificate;	/* required element of type tt:BinaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 432; } /* = unique id SOAP_TYPE_tt__Certificate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Certificate(): CertificateID(NULL), Certificate(NULL), soap(NULL) { tt__Certificate::soap_default(NULL); }
	virtual ~tt__Certificate() { }
};
#endif

#ifndef SOAP_TYPE_tt__CertificateStatus
#define SOAP_TYPE_tt__CertificateStatus (433)
/* tt:CertificateStatus */
class SOAP_CMAC tt__CertificateStatus
{
public:
	char *CertificateID;	/* required element of type xsd:token */
	bool Status;	/* required element of type xsd:boolean */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 433; } /* = unique id SOAP_TYPE_tt__CertificateStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CertificateStatus(): CertificateID(NULL), __any(NULL), soap(NULL) { tt__CertificateStatus::soap_default(NULL); }
	virtual ~tt__CertificateStatus() { }
};
#endif

#ifndef SOAP_TYPE_tt__CertificateWithPrivateKey
#define SOAP_TYPE_tt__CertificateWithPrivateKey (434)
/* tt:CertificateWithPrivateKey */
class SOAP_CMAC tt__CertificateWithPrivateKey
{
public:
	char *CertificateID;	/* optional element of type xsd:token */
	tt__BinaryData *Certificate;	/* required element of type tt:BinaryData */
	tt__BinaryData *PrivateKey;	/* required element of type tt:BinaryData */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 434; } /* = unique id SOAP_TYPE_tt__CertificateWithPrivateKey */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CertificateWithPrivateKey(): CertificateID(NULL), Certificate(NULL), PrivateKey(NULL), __any(NULL), soap(NULL) { tt__CertificateWithPrivateKey::soap_default(NULL); }
	virtual ~tt__CertificateWithPrivateKey() { }
};
#endif

#ifndef SOAP_TYPE_tt__CertificateInformation
#define SOAP_TYPE_tt__CertificateInformation (435)
/* tt:CertificateInformation */
class SOAP_CMAC tt__CertificateInformation
{
public:
	char *CertificateID;	/* required element of type xsd:token */
	char *IssuerDN;	/* optional element of type xsd:string */
	char *SubjectDN;	/* optional element of type xsd:string */
	class tt__CertificateUsage *KeyUsage;	/* optional element of type tt:CertificateUsage */
	tt__CertificateUsage *ExtendedKeyUsage;	/* optional element of type tt:CertificateUsage */
	int *KeyLength;	/* optional element of type xsd:int */
	char *Version;	/* optional element of type xsd:string */
	char *SerialNum;	/* optional element of type xsd:string */
	char *SignatureAlgorithm;	/* optional element of type xsd:string */
	class tt__DateTimeRange *Validity;	/* optional element of type tt:DateTimeRange */
	class tt__CertificateInformationExtension *Extension;	/* optional element of type tt:CertificateInformationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 435; } /* = unique id SOAP_TYPE_tt__CertificateInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CertificateInformation(): CertificateID(NULL), IssuerDN(NULL), SubjectDN(NULL), KeyUsage(NULL), ExtendedKeyUsage(NULL), KeyLength(NULL), Version(NULL), SerialNum(NULL), SignatureAlgorithm(NULL), Validity(NULL), Extension(NULL), soap(NULL) { tt__CertificateInformation::soap_default(NULL); }
	virtual ~tt__CertificateInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__CertificateInformationExtension
#define SOAP_TYPE_tt__CertificateInformationExtension (437)
/* tt:CertificateInformationExtension */
class SOAP_CMAC tt__CertificateInformationExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 437; } /* = unique id SOAP_TYPE_tt__CertificateInformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CertificateInformationExtension(): __any(NULL), soap(NULL) { tt__CertificateInformationExtension::soap_default(NULL); }
	virtual ~tt__CertificateInformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot1XConfiguration
#define SOAP_TYPE_tt__Dot1XConfiguration (438)
/* tt:Dot1XConfiguration */
class SOAP_CMAC tt__Dot1XConfiguration
{
public:
	char *Dot1XConfigurationToken;	/* required element of type tt:ReferenceToken */
	char *Identity;	/* required element of type xsd:string */
	char *AnonymousID;	/* optional element of type xsd:string */
	int EAPMethod;	/* required element of type xsd:int */
	int __sizeCACertificateID;	/* sequence of elements <CACertificateID> */
	char **CACertificateID;	/* optional element of type xsd:token */
	class tt__EAPMethodConfiguration *EAPMethodConfiguration;	/* optional element of type tt:EAPMethodConfiguration */
	class tt__Dot1XConfigurationExtension *Extension;	/* optional element of type tt:Dot1XConfigurationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 438; } /* = unique id SOAP_TYPE_tt__Dot1XConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot1XConfiguration(): Dot1XConfigurationToken(NULL), Identity(NULL), AnonymousID(NULL), CACertificateID(NULL), EAPMethodConfiguration(NULL), Extension(NULL), soap(NULL) { tt__Dot1XConfiguration::soap_default(NULL); }
	virtual ~tt__Dot1XConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot1XConfigurationExtension
#define SOAP_TYPE_tt__Dot1XConfigurationExtension (439)
/* tt:Dot1XConfigurationExtension */
class SOAP_CMAC tt__Dot1XConfigurationExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 439; } /* = unique id SOAP_TYPE_tt__Dot1XConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot1XConfigurationExtension(): __any(NULL), soap(NULL) { tt__Dot1XConfigurationExtension::soap_default(NULL); }
	virtual ~tt__Dot1XConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__EAPMethodConfiguration
#define SOAP_TYPE_tt__EAPMethodConfiguration (440)
/* tt:EAPMethodConfiguration */
class SOAP_CMAC tt__EAPMethodConfiguration
{
public:
	class tt__TLSConfiguration *TLSConfiguration;	/* optional element of type tt:TLSConfiguration */
	char *Password;	/* optional element of type xsd:string */
	class tt__EapMethodExtension *Extension;	/* optional element of type tt:EapMethodExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 440; } /* = unique id SOAP_TYPE_tt__EAPMethodConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EAPMethodConfiguration(): TLSConfiguration(NULL), Password(NULL), Extension(NULL), soap(NULL) { tt__EAPMethodConfiguration::soap_default(NULL); }
	virtual ~tt__EAPMethodConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__EapMethodExtension
#define SOAP_TYPE_tt__EapMethodExtension (441)
/* tt:EapMethodExtension */
class SOAP_CMAC tt__EapMethodExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 441; } /* = unique id SOAP_TYPE_tt__EapMethodExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EapMethodExtension(): __any(NULL), soap(NULL) { tt__EapMethodExtension::soap_default(NULL); }
	virtual ~tt__EapMethodExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__TLSConfiguration
#define SOAP_TYPE_tt__TLSConfiguration (442)
/* tt:TLSConfiguration */
class SOAP_CMAC tt__TLSConfiguration
{
public:
	char *CertificateID;	/* required element of type xsd:token */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 442; } /* = unique id SOAP_TYPE_tt__TLSConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__TLSConfiguration(): CertificateID(NULL), __any(NULL), soap(NULL) { tt__TLSConfiguration::soap_default(NULL); }
	virtual ~tt__TLSConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__GenericEapPwdConfigurationExtension
#define SOAP_TYPE_tt__GenericEapPwdConfigurationExtension (443)
/* tt:GenericEapPwdConfigurationExtension */
class SOAP_CMAC tt__GenericEapPwdConfigurationExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 443; } /* = unique id SOAP_TYPE_tt__GenericEapPwdConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__GenericEapPwdConfigurationExtension(): __any(NULL), soap(NULL) { tt__GenericEapPwdConfigurationExtension::soap_default(NULL); }
	virtual ~tt__GenericEapPwdConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__RelayOutputSettings
#define SOAP_TYPE_tt__RelayOutputSettings (444)
/* tt:RelayOutputSettings */
class SOAP_CMAC tt__RelayOutputSettings
{
public:
	enum tt__RelayMode Mode;	/* required element of type tt:RelayMode */
	LONG64 DelayTime;	/* external */
	enum tt__RelayIdleState IdleState;	/* required element of type tt:RelayIdleState */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 444; } /* = unique id SOAP_TYPE_tt__RelayOutputSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RelayOutputSettings(): soap(NULL) { tt__RelayOutputSettings::soap_default(NULL); }
	virtual ~tt__RelayOutputSettings() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZNodeExtension
#define SOAP_TYPE_tt__PTZNodeExtension (448)
/* tt:PTZNodeExtension */
class SOAP_CMAC tt__PTZNodeExtension
{
public:
	class tt__PTZPresetTourSupported *SupportedPresetTour;	/* required element of type tt:PTZPresetTourSupported */
	class tt__PTZNodeExtension2 *Extension;	/* optional element of type tt:PTZNodeExtension2 */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 448; } /* = unique id SOAP_TYPE_tt__PTZNodeExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZNodeExtension(): SupportedPresetTour(NULL), Extension(NULL), __any(NULL), soap(NULL) { tt__PTZNodeExtension::soap_default(NULL); }
	virtual ~tt__PTZNodeExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZNodeExtension2
#define SOAP_TYPE_tt__PTZNodeExtension2 (449)
/* tt:PTZNodeExtension2 */
class SOAP_CMAC tt__PTZNodeExtension2
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 449; } /* = unique id SOAP_TYPE_tt__PTZNodeExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZNodeExtension2(): __any(NULL), soap(NULL) { tt__PTZNodeExtension2::soap_default(NULL); }
	virtual ~tt__PTZNodeExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSupported
#define SOAP_TYPE_tt__PTZPresetTourSupported (450)
/* tt:PTZPresetTourSupported */
class SOAP_CMAC tt__PTZPresetTourSupported
{
public:
	int MaximumNumberOfPresetTours;	/* required element of type xsd:int */
	int __sizePTZPresetTourOperation;	/* sequence of elements <PTZPresetTourOperation> */
	enum tt__PTZPresetTourOperation *PTZPresetTourOperation;	/* optional element of type tt:PTZPresetTourOperation */
	class tt__PTZPresetTourSupportedExtension *Extension;	/* optional element of type tt:PTZPresetTourSupportedExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 450; } /* = unique id SOAP_TYPE_tt__PTZPresetTourSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourSupported(): PTZPresetTourOperation(NULL), Extension(NULL), soap(NULL) { tt__PTZPresetTourSupported::soap_default(NULL); }
	virtual ~tt__PTZPresetTourSupported() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSupportedExtension
#define SOAP_TYPE_tt__PTZPresetTourSupportedExtension (451)
/* tt:PTZPresetTourSupportedExtension */
class SOAP_CMAC tt__PTZPresetTourSupportedExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 451; } /* = unique id SOAP_TYPE_tt__PTZPresetTourSupportedExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourSupportedExtension(): __any(NULL), soap(NULL) { tt__PTZPresetTourSupportedExtension::soap_default(NULL); }
	virtual ~tt__PTZPresetTourSupportedExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZConfigurationExtension
#define SOAP_TYPE_tt__PTZConfigurationExtension (453)
/* tt:PTZConfigurationExtension */
class SOAP_CMAC tt__PTZConfigurationExtension
{
public:
	class tt__PTControlDirection *PTControlDirection;	/* optional element of type tt:PTControlDirection */
	class tt__PTZConfigurationExtension2 *Extension;	/* optional element of type tt:PTZConfigurationExtension2 */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 453; } /* = unique id SOAP_TYPE_tt__PTZConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZConfigurationExtension(): PTControlDirection(NULL), Extension(NULL), __any(NULL), soap(NULL) { tt__PTZConfigurationExtension::soap_default(NULL); }
	virtual ~tt__PTZConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZConfigurationExtension2
#define SOAP_TYPE_tt__PTZConfigurationExtension2 (454)
/* tt:PTZConfigurationExtension2 */
class SOAP_CMAC tt__PTZConfigurationExtension2
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 454; } /* = unique id SOAP_TYPE_tt__PTZConfigurationExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZConfigurationExtension2(): __any(NULL), soap(NULL) { tt__PTZConfigurationExtension2::soap_default(NULL); }
	virtual ~tt__PTZConfigurationExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTControlDirection
#define SOAP_TYPE_tt__PTControlDirection (455)
/* tt:PTControlDirection */
class SOAP_CMAC tt__PTControlDirection
{
public:
	class tt__EFlip *EFlip;	/* optional element of type tt:EFlip */
	class tt__Reverse *Reverse;	/* optional element of type tt:Reverse */
	class tt__PTControlDirectionExtension *Extension;	/* optional element of type tt:PTControlDirectionExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 455; } /* = unique id SOAP_TYPE_tt__PTControlDirection */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTControlDirection(): EFlip(NULL), Reverse(NULL), Extension(NULL), soap(NULL) { tt__PTControlDirection::soap_default(NULL); }
	virtual ~tt__PTControlDirection() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTControlDirectionExtension
#define SOAP_TYPE_tt__PTControlDirectionExtension (456)
/* tt:PTControlDirectionExtension */
class SOAP_CMAC tt__PTControlDirectionExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 456; } /* = unique id SOAP_TYPE_tt__PTControlDirectionExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTControlDirectionExtension(): __any(NULL), soap(NULL) { tt__PTControlDirectionExtension::soap_default(NULL); }
	virtual ~tt__PTControlDirectionExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__EFlip
#define SOAP_TYPE_tt__EFlip (457)
/* tt:EFlip */
class SOAP_CMAC tt__EFlip
{
public:
	enum tt__EFlipMode Mode;	/* required element of type tt:EFlipMode */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 457; } /* = unique id SOAP_TYPE_tt__EFlip */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EFlip(): __any(NULL), soap(NULL) { tt__EFlip::soap_default(NULL); }
	virtual ~tt__EFlip() { }
};
#endif

#ifndef SOAP_TYPE_tt__Reverse
#define SOAP_TYPE_tt__Reverse (458)
/* tt:Reverse */
class SOAP_CMAC tt__Reverse
{
public:
	enum tt__ReverseMode Mode;	/* required element of type tt:ReverseMode */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 458; } /* = unique id SOAP_TYPE_tt__Reverse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Reverse(): __any(NULL), soap(NULL) { tt__Reverse::soap_default(NULL); }
	virtual ~tt__Reverse() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZConfigurationOptions
#define SOAP_TYPE_tt__PTZConfigurationOptions (459)
/* tt:PTZConfigurationOptions */
class SOAP_CMAC tt__PTZConfigurationOptions
{
public:
	class tt__PTZSpaces *Spaces;	/* required element of type tt:PTZSpaces */
	tt__DurationRange *PTZTimeout;	/* required element of type tt:DurationRange */
	class tt__PTControlDirectionOptions *PTControlDirection;	/* optional element of type tt:PTControlDirectionOptions */
	class tt__PTZConfigurationOptions2 *Extension;	/* optional element of type tt:PTZConfigurationOptions2 */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 459; } /* = unique id SOAP_TYPE_tt__PTZConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZConfigurationOptions(): Spaces(NULL), PTZTimeout(NULL), PTControlDirection(NULL), Extension(NULL), __any(NULL), soap(NULL) { tt__PTZConfigurationOptions::soap_default(NULL); }
	virtual ~tt__PTZConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZConfigurationOptions2
#define SOAP_TYPE_tt__PTZConfigurationOptions2 (460)
/* tt:PTZConfigurationOptions2 */
class SOAP_CMAC tt__PTZConfigurationOptions2
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 460; } /* = unique id SOAP_TYPE_tt__PTZConfigurationOptions2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZConfigurationOptions2(): __any(NULL), soap(NULL) { tt__PTZConfigurationOptions2::soap_default(NULL); }
	virtual ~tt__PTZConfigurationOptions2() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTControlDirectionOptions
#define SOAP_TYPE_tt__PTControlDirectionOptions (461)
/* tt:PTControlDirectionOptions */
class SOAP_CMAC tt__PTControlDirectionOptions
{
public:
	class tt__EFlipOptions *EFlip;	/* optional element of type tt:EFlipOptions */
	class tt__ReverseOptions *Reverse;	/* optional element of type tt:ReverseOptions */
	class tt__PTControlDirectionOptionsExtension *Extension;	/* optional element of type tt:PTControlDirectionOptionsExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 461; } /* = unique id SOAP_TYPE_tt__PTControlDirectionOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTControlDirectionOptions(): EFlip(NULL), Reverse(NULL), Extension(NULL), soap(NULL) { tt__PTControlDirectionOptions::soap_default(NULL); }
	virtual ~tt__PTControlDirectionOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTControlDirectionOptionsExtension
#define SOAP_TYPE_tt__PTControlDirectionOptionsExtension (462)
/* tt:PTControlDirectionOptionsExtension */
class SOAP_CMAC tt__PTControlDirectionOptionsExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 462; } /* = unique id SOAP_TYPE_tt__PTControlDirectionOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTControlDirectionOptionsExtension(): __any(NULL), soap(NULL) { tt__PTControlDirectionOptionsExtension::soap_default(NULL); }
	virtual ~tt__PTControlDirectionOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__EFlipOptions
#define SOAP_TYPE_tt__EFlipOptions (463)
/* tt:EFlipOptions */
class SOAP_CMAC tt__EFlipOptions
{
public:
	int __sizeMode;	/* sequence of elements <Mode> */
	enum tt__EFlipMode *Mode;	/* optional element of type tt:EFlipMode */
	class tt__EFlipOptionsExtension *Extension;	/* optional element of type tt:EFlipOptionsExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 463; } /* = unique id SOAP_TYPE_tt__EFlipOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EFlipOptions(): Mode(NULL), Extension(NULL), soap(NULL) { tt__EFlipOptions::soap_default(NULL); }
	virtual ~tt__EFlipOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__EFlipOptionsExtension
#define SOAP_TYPE_tt__EFlipOptionsExtension (464)
/* tt:EFlipOptionsExtension */
class SOAP_CMAC tt__EFlipOptionsExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 464; } /* = unique id SOAP_TYPE_tt__EFlipOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EFlipOptionsExtension(): __any(NULL), soap(NULL) { tt__EFlipOptionsExtension::soap_default(NULL); }
	virtual ~tt__EFlipOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ReverseOptions
#define SOAP_TYPE_tt__ReverseOptions (465)
/* tt:ReverseOptions */
class SOAP_CMAC tt__ReverseOptions
{
public:
	int __sizeMode;	/* sequence of elements <Mode> */
	enum tt__ReverseMode *Mode;	/* optional element of type tt:ReverseMode */
	class tt__ReverseOptionsExtension *Extension;	/* optional element of type tt:ReverseOptionsExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 465; } /* = unique id SOAP_TYPE_tt__ReverseOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ReverseOptions(): Mode(NULL), Extension(NULL), soap(NULL) { tt__ReverseOptions::soap_default(NULL); }
	virtual ~tt__ReverseOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__ReverseOptionsExtension
#define SOAP_TYPE_tt__ReverseOptionsExtension (466)
/* tt:ReverseOptionsExtension */
class SOAP_CMAC tt__ReverseOptionsExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 466; } /* = unique id SOAP_TYPE_tt__ReverseOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ReverseOptionsExtension(): __any(NULL), soap(NULL) { tt__ReverseOptionsExtension::soap_default(NULL); }
	virtual ~tt__ReverseOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PanTiltLimits
#define SOAP_TYPE_tt__PanTiltLimits (467)
/* tt:PanTiltLimits */
class SOAP_CMAC tt__PanTiltLimits
{
public:
	class tt__Space2DDescription *Range;	/* required element of type tt:Space2DDescription */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 467; } /* = unique id SOAP_TYPE_tt__PanTiltLimits */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PanTiltLimits(): Range(NULL), soap(NULL) { tt__PanTiltLimits::soap_default(NULL); }
	virtual ~tt__PanTiltLimits() { }
};
#endif

#ifndef SOAP_TYPE_tt__ZoomLimits
#define SOAP_TYPE_tt__ZoomLimits (468)
/* tt:ZoomLimits */
class SOAP_CMAC tt__ZoomLimits
{
public:
	class tt__Space1DDescription *Range;	/* required element of type tt:Space1DDescription */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 468; } /* = unique id SOAP_TYPE_tt__ZoomLimits */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ZoomLimits(): Range(NULL), soap(NULL) { tt__ZoomLimits::soap_default(NULL); }
	virtual ~tt__ZoomLimits() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZSpaces
#define SOAP_TYPE_tt__PTZSpaces (469)
/* tt:PTZSpaces */
class SOAP_CMAC tt__PTZSpaces
{
public:
	int __sizeAbsolutePanTiltPositionSpace;	/* sequence of elements <AbsolutePanTiltPositionSpace> */
	tt__Space2DDescription **AbsolutePanTiltPositionSpace;	/* optional element of type tt:Space2DDescription */
	int __sizeAbsoluteZoomPositionSpace;	/* sequence of elements <AbsoluteZoomPositionSpace> */
	tt__Space1DDescription **AbsoluteZoomPositionSpace;	/* optional element of type tt:Space1DDescription */
	int __sizeRelativePanTiltTranslationSpace;	/* sequence of elements <RelativePanTiltTranslationSpace> */
	tt__Space2DDescription **RelativePanTiltTranslationSpace;	/* optional element of type tt:Space2DDescription */
	int __sizeRelativeZoomTranslationSpace;	/* sequence of elements <RelativeZoomTranslationSpace> */
	tt__Space1DDescription **RelativeZoomTranslationSpace;	/* optional element of type tt:Space1DDescription */
	int __sizeContinuousPanTiltVelocitySpace;	/* sequence of elements <ContinuousPanTiltVelocitySpace> */
	tt__Space2DDescription **ContinuousPanTiltVelocitySpace;	/* optional element of type tt:Space2DDescription */
	int __sizeContinuousZoomVelocitySpace;	/* sequence of elements <ContinuousZoomVelocitySpace> */
	tt__Space1DDescription **ContinuousZoomVelocitySpace;	/* optional element of type tt:Space1DDescription */
	int __sizePanTiltSpeedSpace;	/* sequence of elements <PanTiltSpeedSpace> */
	tt__Space1DDescription **PanTiltSpeedSpace;	/* optional element of type tt:Space1DDescription */
	int __sizeZoomSpeedSpace;	/* sequence of elements <ZoomSpeedSpace> */
	tt__Space1DDescription **ZoomSpeedSpace;	/* optional element of type tt:Space1DDescription */
	class tt__PTZSpacesExtension *Extension;	/* optional element of type tt:PTZSpacesExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 469; } /* = unique id SOAP_TYPE_tt__PTZSpaces */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZSpaces(): AbsolutePanTiltPositionSpace(NULL), AbsoluteZoomPositionSpace(NULL), RelativePanTiltTranslationSpace(NULL), RelativeZoomTranslationSpace(NULL), ContinuousPanTiltVelocitySpace(NULL), ContinuousZoomVelocitySpace(NULL), PanTiltSpeedSpace(NULL), ZoomSpeedSpace(NULL), Extension(NULL), soap(NULL) { tt__PTZSpaces::soap_default(NULL); }
	virtual ~tt__PTZSpaces() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZSpacesExtension
#define SOAP_TYPE_tt__PTZSpacesExtension (470)
/* tt:PTZSpacesExtension */
class SOAP_CMAC tt__PTZSpacesExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 470; } /* = unique id SOAP_TYPE_tt__PTZSpacesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZSpacesExtension(): __any(NULL), soap(NULL) { tt__PTZSpacesExtension::soap_default(NULL); }
	virtual ~tt__PTZSpacesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Space2DDescription
#define SOAP_TYPE_tt__Space2DDescription (471)
/* tt:Space2DDescription */
class SOAP_CMAC tt__Space2DDescription
{
public:
	char *URI;	/* required element of type xsd:anyURI */
	tt__FloatRange *XRange;	/* required element of type tt:FloatRange */
	tt__FloatRange *YRange;	/* required element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 471; } /* = unique id SOAP_TYPE_tt__Space2DDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Space2DDescription(): URI(NULL), XRange(NULL), YRange(NULL), soap(NULL) { tt__Space2DDescription::soap_default(NULL); }
	virtual ~tt__Space2DDescription() { }
};
#endif

#ifndef SOAP_TYPE_tt__Space1DDescription
#define SOAP_TYPE_tt__Space1DDescription (472)
/* tt:Space1DDescription */
class SOAP_CMAC tt__Space1DDescription
{
public:
	char *URI;	/* required element of type xsd:anyURI */
	tt__FloatRange *XRange;	/* required element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 472; } /* = unique id SOAP_TYPE_tt__Space1DDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Space1DDescription(): URI(NULL), XRange(NULL), soap(NULL) { tt__Space1DDescription::soap_default(NULL); }
	virtual ~tt__Space1DDescription() { }
};
#endif

#ifndef SOAP_TYPE_tt__Vector2D
#define SOAP_TYPE_tt__Vector2D (473)
/* tt:Vector2D */
class SOAP_CMAC tt__Vector2D
{
public:
	float x;	/* required attribute */
	float y;	/* required attribute */
	char *space;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 473; } /* = unique id SOAP_TYPE_tt__Vector2D */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Vector2D(): space(NULL), soap(NULL) { tt__Vector2D::soap_default(NULL); }
	virtual ~tt__Vector2D() { }
};
#endif

#ifndef SOAP_TYPE_tt__Vector1D
#define SOAP_TYPE_tt__Vector1D (474)
/* tt:Vector1D */
class SOAP_CMAC tt__Vector1D
{
public:
	float x;	/* required attribute */
	char *space;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 474; } /* = unique id SOAP_TYPE_tt__Vector1D */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Vector1D(): space(NULL), soap(NULL) { tt__Vector1D::soap_default(NULL); }
	virtual ~tt__Vector1D() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZVector
#define SOAP_TYPE_tt__PTZVector (475)
/* tt:PTZVector */
class SOAP_CMAC tt__PTZVector
{
public:
	tt__Vector2D *PanTilt;	/* optional element of type tt:Vector2D */
	tt__Vector1D *Zoom;	/* optional element of type tt:Vector1D */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 475; } /* = unique id SOAP_TYPE_tt__PTZVector */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZVector(): PanTilt(NULL), Zoom(NULL), soap(NULL) { tt__PTZVector::soap_default(NULL); }
	virtual ~tt__PTZVector() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZSpeed
#define SOAP_TYPE_tt__PTZSpeed (476)
/* tt:PTZSpeed */
class SOAP_CMAC tt__PTZSpeed
{
public:
	tt__Vector2D *PanTilt;	/* optional element of type tt:Vector2D */
	tt__Vector1D *Zoom;	/* optional element of type tt:Vector1D */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 476; } /* = unique id SOAP_TYPE_tt__PTZSpeed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZSpeed(): PanTilt(NULL), Zoom(NULL), soap(NULL) { tt__PTZSpeed::soap_default(NULL); }
	virtual ~tt__PTZSpeed() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZStatus
#define SOAP_TYPE_tt__PTZStatus (477)
/* tt:PTZStatus */
class SOAP_CMAC tt__PTZStatus
{
public:
	tt__PTZVector *Position;	/* optional element of type tt:PTZVector */
	class tt__PTZMoveStatus *MoveStatus;	/* optional element of type tt:PTZMoveStatus */
	char *Error;	/* optional element of type xsd:string */
	time_t UtcTime;	/* required element of type xsd:dateTime */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 477; } /* = unique id SOAP_TYPE_tt__PTZStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZStatus(): Position(NULL), MoveStatus(NULL), Error(NULL), __any(NULL), soap(NULL) { tt__PTZStatus::soap_default(NULL); }
	virtual ~tt__PTZStatus() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPreset
#define SOAP_TYPE_tt__PTZPreset (478)
/* tt:PTZPreset */
class SOAP_CMAC tt__PTZPreset
{
public:
	char *Name;	/* optional element of type tt:Name */
	tt__PTZVector *PTZPosition;	/* optional element of type tt:PTZVector */
	char *token;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 478; } /* = unique id SOAP_TYPE_tt__PTZPreset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPreset(): Name(NULL), PTZPosition(NULL), token(NULL), soap(NULL) { tt__PTZPreset::soap_default(NULL); }
	virtual ~tt__PTZPreset() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZMoveStatus
#define SOAP_TYPE_tt__PTZMoveStatus (479)
/* tt:PTZMoveStatus */
class SOAP_CMAC tt__PTZMoveStatus
{
public:
	enum tt__MoveStatus *PanTilt;	/* optional element of type tt:MoveStatus */
	enum tt__MoveStatus *Zoom;	/* optional element of type tt:MoveStatus */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 479; } /* = unique id SOAP_TYPE_tt__PTZMoveStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZMoveStatus(): PanTilt(NULL), Zoom(NULL), soap(NULL) { tt__PTZMoveStatus::soap_default(NULL); }
	virtual ~tt__PTZMoveStatus() { }
};
#endif

#ifndef SOAP_TYPE_tt__PresetTour
#define SOAP_TYPE_tt__PresetTour (480)
/* tt:PresetTour */
class SOAP_CMAC tt__PresetTour
{
public:
	char *Name;	/* optional element of type tt:Name */
	class tt__PTZPresetTourStatus *Status;	/* required element of type tt:PTZPresetTourStatus */
	bool AutoStart;	/* required element of type xsd:boolean */
	class tt__PTZPresetTourStartingCondition *StartingCondition;	/* required element of type tt:PTZPresetTourStartingCondition */
	int __sizeTourSpot;	/* sequence of elements <TourSpot> */
	class tt__PTZPresetTourSpot **TourSpot;	/* optional element of type tt:PTZPresetTourSpot */
	class tt__PTZPresetTourExtension *Extension;	/* optional element of type tt:PTZPresetTourExtension */
	char *token;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 480; } /* = unique id SOAP_TYPE_tt__PresetTour */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PresetTour(): Name(NULL), Status(NULL), StartingCondition(NULL), TourSpot(NULL), Extension(NULL), token(NULL), soap(NULL) { tt__PresetTour::soap_default(NULL); }
	virtual ~tt__PresetTour() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourExtension
#define SOAP_TYPE_tt__PTZPresetTourExtension (481)
/* tt:PTZPresetTourExtension */
class SOAP_CMAC tt__PTZPresetTourExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 481; } /* = unique id SOAP_TYPE_tt__PTZPresetTourExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourExtension(): __any(NULL), soap(NULL) { tt__PTZPresetTourExtension::soap_default(NULL); }
	virtual ~tt__PTZPresetTourExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSpot
#define SOAP_TYPE_tt__PTZPresetTourSpot (482)
/* tt:PTZPresetTourSpot */
class SOAP_CMAC tt__PTZPresetTourSpot
{
public:
	class tt__PTZPresetTourPresetDetail *PresetDetail;	/* required element of type tt:PTZPresetTourPresetDetail */
	tt__PTZSpeed *Speed;	/* optional element of type tt:PTZSpeed */
	LONG64 *StayTime;	/* optional element of type xsd:duration */
	class tt__PTZPresetTourSpotExtension *Extension;	/* optional element of type tt:PTZPresetTourSpotExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 482; } /* = unique id SOAP_TYPE_tt__PTZPresetTourSpot */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourSpot(): PresetDetail(NULL), Speed(NULL), StayTime(NULL), Extension(NULL), soap(NULL) { tt__PTZPresetTourSpot::soap_default(NULL); }
	virtual ~tt__PTZPresetTourSpot() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSpotExtension
#define SOAP_TYPE_tt__PTZPresetTourSpotExtension (483)
/* tt:PTZPresetTourSpotExtension */
class SOAP_CMAC tt__PTZPresetTourSpotExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 483; } /* = unique id SOAP_TYPE_tt__PTZPresetTourSpotExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourSpotExtension(): __any(NULL), soap(NULL) { tt__PTZPresetTourSpotExtension::soap_default(NULL); }
	virtual ~tt__PTZPresetTourSpotExtension() { }
};
#endif

#ifndef SOAP_TYPE__tt__union_PTZPresetTourPresetDetail
#define SOAP_TYPE__tt__union_PTZPresetTourPresetDetail (1241)
/* xsd:choice */
union _tt__union_PTZPresetTourPresetDetail
{
#define SOAP_UNION__tt__union_PTZPresetTourPresetDetail_PresetToken	(1)
	char *PresetToken;
#define SOAP_UNION__tt__union_PTZPresetTourPresetDetail_Home	(2)
	bool Home;
#define SOAP_UNION__tt__union_PTZPresetTourPresetDetail_PTZPosition	(3)
	tt__PTZVector *PTZPosition;
#define SOAP_UNION__tt__union_PTZPresetTourPresetDetail_TypeExtension	(4)
	class tt__PTZPresetTourTypeExtension *TypeExtension;
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetail
#define SOAP_TYPE_tt__PTZPresetTourPresetDetail (484)
/* tt:PTZPresetTourPresetDetail */
class SOAP_CMAC tt__PTZPresetTourPresetDetail
{
public:
	int __union_PTZPresetTourPresetDetail;	/* union discriminant (of union defined below) */
	union _tt__union_PTZPresetTourPresetDetail union_PTZPresetTourPresetDetail;	/* required element of type xsd:choice */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 484; } /* = unique id SOAP_TYPE_tt__PTZPresetTourPresetDetail */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourPresetDetail(): __any(NULL), soap(NULL) { tt__PTZPresetTourPresetDetail::soap_default(NULL); }
	virtual ~tt__PTZPresetTourPresetDetail() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourTypeExtension
#define SOAP_TYPE_tt__PTZPresetTourTypeExtension (485)
/* tt:PTZPresetTourTypeExtension */
class SOAP_CMAC tt__PTZPresetTourTypeExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 485; } /* = unique id SOAP_TYPE_tt__PTZPresetTourTypeExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourTypeExtension(): __any(NULL), soap(NULL) { tt__PTZPresetTourTypeExtension::soap_default(NULL); }
	virtual ~tt__PTZPresetTourTypeExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStatus
#define SOAP_TYPE_tt__PTZPresetTourStatus (486)
/* tt:PTZPresetTourStatus */
class SOAP_CMAC tt__PTZPresetTourStatus
{
public:
	enum tt__PTZPresetTourState State;	/* required element of type tt:PTZPresetTourState */
	tt__PTZPresetTourSpot *CurrentTourSpot;	/* optional element of type tt:PTZPresetTourSpot */
	class tt__PTZPresetTourStatusExtension *Extension;	/* optional element of type tt:PTZPresetTourStatusExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 486; } /* = unique id SOAP_TYPE_tt__PTZPresetTourStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourStatus(): CurrentTourSpot(NULL), Extension(NULL), soap(NULL) { tt__PTZPresetTourStatus::soap_default(NULL); }
	virtual ~tt__PTZPresetTourStatus() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStatusExtension
#define SOAP_TYPE_tt__PTZPresetTourStatusExtension (487)
/* tt:PTZPresetTourStatusExtension */
class SOAP_CMAC tt__PTZPresetTourStatusExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 487; } /* = unique id SOAP_TYPE_tt__PTZPresetTourStatusExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourStatusExtension(): __any(NULL), soap(NULL) { tt__PTZPresetTourStatusExtension::soap_default(NULL); }
	virtual ~tt__PTZPresetTourStatusExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingCondition
#define SOAP_TYPE_tt__PTZPresetTourStartingCondition (488)
/* tt:PTZPresetTourStartingCondition */
class SOAP_CMAC tt__PTZPresetTourStartingCondition
{
public:
	int *RecurringTime;	/* optional element of type xsd:int */
	LONG64 *RecurringDuration;	/* optional element of type xsd:duration */
	enum tt__PTZPresetTourDirection *Direction;	/* optional element of type tt:PTZPresetTourDirection */
	class tt__PTZPresetTourStartingConditionExtension *Extension;	/* optional element of type tt:PTZPresetTourStartingConditionExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 488; } /* = unique id SOAP_TYPE_tt__PTZPresetTourStartingCondition */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourStartingCondition(): RecurringTime(NULL), RecurringDuration(NULL), Direction(NULL), Extension(NULL), soap(NULL) { tt__PTZPresetTourStartingCondition::soap_default(NULL); }
	virtual ~tt__PTZPresetTourStartingCondition() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension (489)
/* tt:PTZPresetTourStartingConditionExtension */
class SOAP_CMAC tt__PTZPresetTourStartingConditionExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 489; } /* = unique id SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourStartingConditionExtension(): __any(NULL), soap(NULL) { tt__PTZPresetTourStartingConditionExtension::soap_default(NULL); }
	virtual ~tt__PTZPresetTourStartingConditionExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourOptions
#define SOAP_TYPE_tt__PTZPresetTourOptions (490)
/* tt:PTZPresetTourOptions */
class SOAP_CMAC tt__PTZPresetTourOptions
{
public:
	bool AutoStart;	/* required element of type xsd:boolean */
	class tt__PTZPresetTourStartingConditionOptions *StartingCondition;	/* required element of type tt:PTZPresetTourStartingConditionOptions */
	class tt__PTZPresetTourSpotOptions *TourSpot;	/* required element of type tt:PTZPresetTourSpotOptions */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 490; } /* = unique id SOAP_TYPE_tt__PTZPresetTourOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourOptions(): StartingCondition(NULL), TourSpot(NULL), __any(NULL), soap(NULL) { tt__PTZPresetTourOptions::soap_default(NULL); }
	virtual ~tt__PTZPresetTourOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSpotOptions
#define SOAP_TYPE_tt__PTZPresetTourSpotOptions (491)
/* tt:PTZPresetTourSpotOptions */
class SOAP_CMAC tt__PTZPresetTourSpotOptions
{
public:
	class tt__PTZPresetTourPresetDetailOptions *PresetDetail;	/* required element of type tt:PTZPresetTourPresetDetailOptions */
	tt__DurationRange *StayTime;	/* required element of type tt:DurationRange */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 491; } /* = unique id SOAP_TYPE_tt__PTZPresetTourSpotOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourSpotOptions(): PresetDetail(NULL), StayTime(NULL), __any(NULL), soap(NULL) { tt__PTZPresetTourSpotOptions::soap_default(NULL); }
	virtual ~tt__PTZPresetTourSpotOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions
#define SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions (492)
/* tt:PTZPresetTourPresetDetailOptions */
class SOAP_CMAC tt__PTZPresetTourPresetDetailOptions
{
public:
	int __sizePresetToken;	/* sequence of elements <PresetToken> */
	char **PresetToken;	/* optional element of type tt:ReferenceToken */
	bool *Home;	/* optional element of type xsd:boolean */
	tt__Space2DDescription *PanTiltPositionSpace;	/* optional element of type tt:Space2DDescription */
	tt__Space1DDescription *ZoomPositionSpace;	/* optional element of type tt:Space1DDescription */
	class tt__PTZPresetTourPresetDetailOptionsExtension *Extension;	/* optional element of type tt:PTZPresetTourPresetDetailOptionsExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 492; } /* = unique id SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourPresetDetailOptions(): PresetToken(NULL), Home(NULL), PanTiltPositionSpace(NULL), ZoomPositionSpace(NULL), Extension(NULL), soap(NULL) { tt__PTZPresetTourPresetDetailOptions::soap_default(NULL); }
	virtual ~tt__PTZPresetTourPresetDetailOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension
#define SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension (493)
/* tt:PTZPresetTourPresetDetailOptionsExtension */
class SOAP_CMAC tt__PTZPresetTourPresetDetailOptionsExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 493; } /* = unique id SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourPresetDetailOptionsExtension(): __any(NULL), soap(NULL) { tt__PTZPresetTourPresetDetailOptionsExtension::soap_default(NULL); }
	virtual ~tt__PTZPresetTourPresetDetailOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions (494)
/* tt:PTZPresetTourStartingConditionOptions */
class SOAP_CMAC tt__PTZPresetTourStartingConditionOptions
{
public:
	tt__IntRange *RecurringTime;	/* optional element of type tt:IntRange */
	tt__DurationRange *RecurringDuration;	/* optional element of type tt:DurationRange */
	int __sizeDirection;	/* sequence of elements <Direction> */
	enum tt__PTZPresetTourDirection *Direction;	/* optional element of type tt:PTZPresetTourDirection */
	class tt__PTZPresetTourStartingConditionOptionsExtension *Extension;	/* optional element of type tt:PTZPresetTourStartingConditionOptionsExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 494; } /* = unique id SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourStartingConditionOptions(): RecurringTime(NULL), RecurringDuration(NULL), Direction(NULL), Extension(NULL), soap(NULL) { tt__PTZPresetTourStartingConditionOptions::soap_default(NULL); }
	virtual ~tt__PTZPresetTourStartingConditionOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension (495)
/* tt:PTZPresetTourStartingConditionOptionsExtension */
class SOAP_CMAC tt__PTZPresetTourStartingConditionOptionsExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 495; } /* = unique id SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourStartingConditionOptionsExtension(): __any(NULL), soap(NULL) { tt__PTZPresetTourStartingConditionOptionsExtension::soap_default(NULL); }
	virtual ~tt__PTZPresetTourStartingConditionOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingStatus
#define SOAP_TYPE_tt__ImagingStatus (496)
/* tt:ImagingStatus */
class SOAP_CMAC tt__ImagingStatus
{
public:
	class tt__FocusStatus *FocusStatus;	/* required element of type tt:FocusStatus */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 496; } /* = unique id SOAP_TYPE_tt__ImagingStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingStatus(): FocusStatus(NULL), __any(NULL), soap(NULL) { tt__ImagingStatus::soap_default(NULL); }
	virtual ~tt__ImagingStatus() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusStatus
#define SOAP_TYPE_tt__FocusStatus (497)
/* tt:FocusStatus */
class SOAP_CMAC tt__FocusStatus
{
public:
	float Position;	/* required element of type xsd:float */
	enum tt__MoveStatus MoveStatus;	/* required element of type tt:MoveStatus */
	char *Error;	/* required element of type xsd:string */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 497; } /* = unique id SOAP_TYPE_tt__FocusStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusStatus(): Error(NULL), __any(NULL), soap(NULL) { tt__FocusStatus::soap_default(NULL); }
	virtual ~tt__FocusStatus() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusConfiguration
#define SOAP_TYPE_tt__FocusConfiguration (498)
/* tt:FocusConfiguration */
class SOAP_CMAC tt__FocusConfiguration
{
public:
	enum tt__AutoFocusMode AutoFocusMode;	/* required element of type tt:AutoFocusMode */
	float DefaultSpeed;	/* required element of type xsd:float */
	float NearLimit;	/* required element of type xsd:float */
	float FarLimit;	/* required element of type xsd:float */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 498; } /* = unique id SOAP_TYPE_tt__FocusConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusConfiguration(): __any(NULL), soap(NULL) { tt__FocusConfiguration::soap_default(NULL); }
	virtual ~tt__FocusConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingSettings
#define SOAP_TYPE_tt__ImagingSettings (499)
/* tt:ImagingSettings */
class SOAP_CMAC tt__ImagingSettings
{
public:
	class tt__BacklightCompensation *BacklightCompensation;	/* optional element of type tt:BacklightCompensation */
	float *Brightness;	/* optional element of type xsd:float */
	float *ColorSaturation;	/* optional element of type xsd:float */
	float *Contrast;	/* optional element of type xsd:float */
	class tt__Exposure *Exposure;	/* optional element of type tt:Exposure */
	tt__FocusConfiguration *Focus;	/* optional element of type tt:FocusConfiguration */
	enum tt__IrCutFilterMode *IrCutFilter;	/* optional element of type tt:IrCutFilterMode */
	float *Sharpness;	/* optional element of type xsd:float */
	class tt__WideDynamicRange *WideDynamicRange;	/* optional element of type tt:WideDynamicRange */
	class tt__WhiteBalance *WhiteBalance;	/* optional element of type tt:WhiteBalance */
	class tt__ImagingSettingsExtension *Extension;	/* optional element of type tt:ImagingSettingsExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 499; } /* = unique id SOAP_TYPE_tt__ImagingSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingSettings(): BacklightCompensation(NULL), Brightness(NULL), ColorSaturation(NULL), Contrast(NULL), Exposure(NULL), Focus(NULL), IrCutFilter(NULL), Sharpness(NULL), WideDynamicRange(NULL), WhiteBalance(NULL), Extension(NULL), soap(NULL) { tt__ImagingSettings::soap_default(NULL); }
	virtual ~tt__ImagingSettings() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingSettingsExtension
#define SOAP_TYPE_tt__ImagingSettingsExtension (500)
/* tt:ImagingSettingsExtension */
class SOAP_CMAC tt__ImagingSettingsExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 500; } /* = unique id SOAP_TYPE_tt__ImagingSettingsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingSettingsExtension(): __any(NULL), soap(NULL) { tt__ImagingSettingsExtension::soap_default(NULL); }
	virtual ~tt__ImagingSettingsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Exposure
#define SOAP_TYPE_tt__Exposure (501)
/* tt:Exposure */
class SOAP_CMAC tt__Exposure
{
public:
	enum tt__ExposureMode Mode;	/* required element of type tt:ExposureMode */
	enum tt__ExposurePriority Priority;	/* required element of type tt:ExposurePriority */
	class tt__Rectangle *Window;	/* required element of type tt:Rectangle */
	float MinExposureTime;	/* required element of type xsd:float */
	float MaxExposureTime;	/* required element of type xsd:float */
	float MinGain;	/* required element of type xsd:float */
	float MaxGain;	/* required element of type xsd:float */
	float MinIris;	/* required element of type xsd:float */
	float MaxIris;	/* required element of type xsd:float */
	float ExposureTime;	/* required element of type xsd:float */
	float Gain;	/* required element of type xsd:float */
	float Iris;	/* required element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 501; } /* = unique id SOAP_TYPE_tt__Exposure */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Exposure(): Window(NULL), soap(NULL) { tt__Exposure::soap_default(NULL); }
	virtual ~tt__Exposure() { }
};
#endif

#ifndef SOAP_TYPE_tt__WideDynamicRange
#define SOAP_TYPE_tt__WideDynamicRange (502)
/* tt:WideDynamicRange */
class SOAP_CMAC tt__WideDynamicRange
{
public:
	enum tt__WideDynamicMode Mode;	/* required element of type tt:WideDynamicMode */
	float Level;	/* required element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 502; } /* = unique id SOAP_TYPE_tt__WideDynamicRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WideDynamicRange(): soap(NULL) { tt__WideDynamicRange::soap_default(NULL); }
	virtual ~tt__WideDynamicRange() { }
};
#endif

#ifndef SOAP_TYPE_tt__BacklightCompensation
#define SOAP_TYPE_tt__BacklightCompensation (503)
/* tt:BacklightCompensation */
class SOAP_CMAC tt__BacklightCompensation
{
public:
	enum tt__BacklightCompensationMode Mode;	/* required element of type tt:BacklightCompensationMode */
	float Level;	/* required element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 503; } /* = unique id SOAP_TYPE_tt__BacklightCompensation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__BacklightCompensation(): soap(NULL) { tt__BacklightCompensation::soap_default(NULL); }
	virtual ~tt__BacklightCompensation() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingOptions
#define SOAP_TYPE_tt__ImagingOptions (504)
/* tt:ImagingOptions */
class SOAP_CMAC tt__ImagingOptions
{
public:
	class tt__BacklightCompensationOptions *BacklightCompensation;	/* required element of type tt:BacklightCompensationOptions */
	tt__FloatRange *Brightness;	/* required element of type tt:FloatRange */
	tt__FloatRange *ColorSaturation;	/* required element of type tt:FloatRange */
	tt__FloatRange *Contrast;	/* required element of type tt:FloatRange */
	class tt__ExposureOptions *Exposure;	/* required element of type tt:ExposureOptions */
	class tt__FocusOptions *Focus;	/* required element of type tt:FocusOptions */
	int __sizeIrCutFilterModes;	/* sequence of elements <IrCutFilterModes> */
	enum tt__IrCutFilterMode *IrCutFilterModes;	/* required element of type tt:IrCutFilterMode */
	tt__FloatRange *Sharpness;	/* required element of type tt:FloatRange */
	class tt__WideDynamicRangeOptions *WideDynamicRange;	/* required element of type tt:WideDynamicRangeOptions */
	class tt__WhiteBalanceOptions *WhiteBalance;	/* required element of type tt:WhiteBalanceOptions */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 504; } /* = unique id SOAP_TYPE_tt__ImagingOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingOptions(): BacklightCompensation(NULL), Brightness(NULL), ColorSaturation(NULL), Contrast(NULL), Exposure(NULL), Focus(NULL), IrCutFilterModes(NULL), Sharpness(NULL), WideDynamicRange(NULL), WhiteBalance(NULL), __any(NULL), soap(NULL) { tt__ImagingOptions::soap_default(NULL); }
	virtual ~tt__ImagingOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__WideDynamicRangeOptions
#define SOAP_TYPE_tt__WideDynamicRangeOptions (505)
/* tt:WideDynamicRangeOptions */
class SOAP_CMAC tt__WideDynamicRangeOptions
{
public:
	int __sizeMode;	/* sequence of elements <Mode> */
	enum tt__WideDynamicMode *Mode;	/* required element of type tt:WideDynamicMode */
	tt__FloatRange *Level;	/* required element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 505; } /* = unique id SOAP_TYPE_tt__WideDynamicRangeOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WideDynamicRangeOptions(): Mode(NULL), Level(NULL), soap(NULL) { tt__WideDynamicRangeOptions::soap_default(NULL); }
	virtual ~tt__WideDynamicRangeOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__BacklightCompensationOptions
#define SOAP_TYPE_tt__BacklightCompensationOptions (506)
/* tt:BacklightCompensationOptions */
class SOAP_CMAC tt__BacklightCompensationOptions
{
public:
	int __sizeMode;	/* sequence of elements <Mode> */
	enum tt__WideDynamicMode *Mode;	/* required element of type tt:WideDynamicMode */
	tt__FloatRange *Level;	/* required element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 506; } /* = unique id SOAP_TYPE_tt__BacklightCompensationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__BacklightCompensationOptions(): Mode(NULL), Level(NULL), soap(NULL) { tt__BacklightCompensationOptions::soap_default(NULL); }
	virtual ~tt__BacklightCompensationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusOptions
#define SOAP_TYPE_tt__FocusOptions (507)
/* tt:FocusOptions */
class SOAP_CMAC tt__FocusOptions
{
public:
	int __sizeAutoFocusModes;	/* sequence of elements <AutoFocusModes> */
	enum tt__AutoFocusMode *AutoFocusModes;	/* optional element of type tt:AutoFocusMode */
	tt__FloatRange *DefaultSpeed;	/* required element of type tt:FloatRange */
	tt__FloatRange *NearLimit;	/* required element of type tt:FloatRange */
	tt__FloatRange *FarLimit;	/* required element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 507; } /* = unique id SOAP_TYPE_tt__FocusOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusOptions(): AutoFocusModes(NULL), DefaultSpeed(NULL), NearLimit(NULL), FarLimit(NULL), soap(NULL) { tt__FocusOptions::soap_default(NULL); }
	virtual ~tt__FocusOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__ExposureOptions
#define SOAP_TYPE_tt__ExposureOptions (508)
/* tt:ExposureOptions */
class SOAP_CMAC tt__ExposureOptions
{
public:
	int __sizeMode;	/* sequence of elements <Mode> */
	enum tt__ExposureMode *Mode;	/* required element of type tt:ExposureMode */
	int __sizePriority;	/* sequence of elements <Priority> */
	enum tt__ExposurePriority *Priority;	/* required element of type tt:ExposurePriority */
	tt__FloatRange *MinExposureTime;	/* required element of type tt:FloatRange */
	tt__FloatRange *MaxExposureTime;	/* required element of type tt:FloatRange */
	tt__FloatRange *MinGain;	/* required element of type tt:FloatRange */
	tt__FloatRange *MaxGain;	/* required element of type tt:FloatRange */
	tt__FloatRange *MinIris;	/* required element of type tt:FloatRange */
	tt__FloatRange *MaxIris;	/* required element of type tt:FloatRange */
	tt__FloatRange *ExposureTime;	/* required element of type tt:FloatRange */
	tt__FloatRange *Gain;	/* required element of type tt:FloatRange */
	tt__FloatRange *Iris;	/* required element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 508; } /* = unique id SOAP_TYPE_tt__ExposureOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ExposureOptions(): Mode(NULL), Priority(NULL), MinExposureTime(NULL), MaxExposureTime(NULL), MinGain(NULL), MaxGain(NULL), MinIris(NULL), MaxIris(NULL), ExposureTime(NULL), Gain(NULL), Iris(NULL), soap(NULL) { tt__ExposureOptions::soap_default(NULL); }
	virtual ~tt__ExposureOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__WhiteBalanceOptions
#define SOAP_TYPE_tt__WhiteBalanceOptions (509)
/* tt:WhiteBalanceOptions */
class SOAP_CMAC tt__WhiteBalanceOptions
{
public:
	int __sizeMode;	/* sequence of elements <Mode> */
	enum tt__WhiteBalanceMode *Mode;	/* required element of type tt:WhiteBalanceMode */
	tt__FloatRange *YrGain;	/* required element of type tt:FloatRange */
	tt__FloatRange *YbGain;	/* required element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 509; } /* = unique id SOAP_TYPE_tt__WhiteBalanceOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WhiteBalanceOptions(): Mode(NULL), YrGain(NULL), YbGain(NULL), soap(NULL) { tt__WhiteBalanceOptions::soap_default(NULL); }
	virtual ~tt__WhiteBalanceOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusMove
#define SOAP_TYPE_tt__FocusMove (510)
/* tt:FocusMove */
class SOAP_CMAC tt__FocusMove
{
public:
	class tt__AbsoluteFocus *Absolute;	/* optional element of type tt:AbsoluteFocus */
	class tt__RelativeFocus *Relative;	/* optional element of type tt:RelativeFocus */
	class tt__ContinuousFocus *Continuous;	/* optional element of type tt:ContinuousFocus */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 510; } /* = unique id SOAP_TYPE_tt__FocusMove */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusMove(): Absolute(NULL), Relative(NULL), Continuous(NULL), soap(NULL) { tt__FocusMove::soap_default(NULL); }
	virtual ~tt__FocusMove() { }
};
#endif

#ifndef SOAP_TYPE_tt__AbsoluteFocus
#define SOAP_TYPE_tt__AbsoluteFocus (511)
/* tt:AbsoluteFocus */
class SOAP_CMAC tt__AbsoluteFocus
{
public:
	float Position;	/* required element of type xsd:float */
	float *Speed;	/* optional element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 511; } /* = unique id SOAP_TYPE_tt__AbsoluteFocus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AbsoluteFocus(): Speed(NULL), soap(NULL) { tt__AbsoluteFocus::soap_default(NULL); }
	virtual ~tt__AbsoluteFocus() { }
};
#endif

#ifndef SOAP_TYPE_tt__RelativeFocus
#define SOAP_TYPE_tt__RelativeFocus (512)
/* tt:RelativeFocus */
class SOAP_CMAC tt__RelativeFocus
{
public:
	float Distance;	/* required element of type xsd:float */
	float *Speed;	/* optional element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 512; } /* = unique id SOAP_TYPE_tt__RelativeFocus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RelativeFocus(): Speed(NULL), soap(NULL) { tt__RelativeFocus::soap_default(NULL); }
	virtual ~tt__RelativeFocus() { }
};
#endif

#ifndef SOAP_TYPE_tt__ContinuousFocus
#define SOAP_TYPE_tt__ContinuousFocus (513)
/* tt:ContinuousFocus */
class SOAP_CMAC tt__ContinuousFocus
{
public:
	float Speed;	/* required element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 513; } /* = unique id SOAP_TYPE_tt__ContinuousFocus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ContinuousFocus(): soap(NULL) { tt__ContinuousFocus::soap_default(NULL); }
	virtual ~tt__ContinuousFocus() { }
};
#endif

#ifndef SOAP_TYPE_tt__MoveOptions
#define SOAP_TYPE_tt__MoveOptions (514)
/* tt:MoveOptions */
class SOAP_CMAC tt__MoveOptions
{
public:
	class tt__AbsoluteFocusOptions *Absolute;	/* optional element of type tt:AbsoluteFocusOptions */
	class tt__RelativeFocusOptions *Relative;	/* optional element of type tt:RelativeFocusOptions */
	class tt__ContinuousFocusOptions *Continuous;	/* optional element of type tt:ContinuousFocusOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 514; } /* = unique id SOAP_TYPE_tt__MoveOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MoveOptions(): Absolute(NULL), Relative(NULL), Continuous(NULL), soap(NULL) { tt__MoveOptions::soap_default(NULL); }
	virtual ~tt__MoveOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__AbsoluteFocusOptions
#define SOAP_TYPE_tt__AbsoluteFocusOptions (515)
/* tt:AbsoluteFocusOptions */
class SOAP_CMAC tt__AbsoluteFocusOptions
{
public:
	tt__FloatRange *Position;	/* required element of type tt:FloatRange */
	tt__FloatRange *Speed;	/* optional element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 515; } /* = unique id SOAP_TYPE_tt__AbsoluteFocusOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AbsoluteFocusOptions(): Position(NULL), Speed(NULL), soap(NULL) { tt__AbsoluteFocusOptions::soap_default(NULL); }
	virtual ~tt__AbsoluteFocusOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__RelativeFocusOptions
#define SOAP_TYPE_tt__RelativeFocusOptions (516)
/* tt:RelativeFocusOptions */
class SOAP_CMAC tt__RelativeFocusOptions
{
public:
	tt__FloatRange *Distance;	/* required element of type tt:FloatRange */
	tt__FloatRange *Speed;	/* required element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 516; } /* = unique id SOAP_TYPE_tt__RelativeFocusOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RelativeFocusOptions(): Distance(NULL), Speed(NULL), soap(NULL) { tt__RelativeFocusOptions::soap_default(NULL); }
	virtual ~tt__RelativeFocusOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__ContinuousFocusOptions
#define SOAP_TYPE_tt__ContinuousFocusOptions (517)
/* tt:ContinuousFocusOptions */
class SOAP_CMAC tt__ContinuousFocusOptions
{
public:
	tt__FloatRange *Speed;	/* required element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 517; } /* = unique id SOAP_TYPE_tt__ContinuousFocusOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ContinuousFocusOptions(): Speed(NULL), soap(NULL) { tt__ContinuousFocusOptions::soap_default(NULL); }
	virtual ~tt__ContinuousFocusOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__WhiteBalance
#define SOAP_TYPE_tt__WhiteBalance (518)
/* tt:WhiteBalance */
class SOAP_CMAC tt__WhiteBalance
{
public:
	enum tt__WhiteBalanceMode Mode;	/* required element of type tt:WhiteBalanceMode */
	float CrGain;	/* required element of type xsd:float */
	float CbGain;	/* required element of type xsd:float */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 518; } /* = unique id SOAP_TYPE_tt__WhiteBalance */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WhiteBalance(): __any(NULL), soap(NULL) { tt__WhiteBalance::soap_default(NULL); }
	virtual ~tt__WhiteBalance() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingStatus20
#define SOAP_TYPE_tt__ImagingStatus20 (519)
/* tt:ImagingStatus20 */
class SOAP_CMAC tt__ImagingStatus20
{
public:
	class tt__FocusStatus20 *FocusStatus20;	/* optional element of type tt:FocusStatus20 */
	class tt__ImagingStatus20Extension *Extension;	/* optional element of type tt:ImagingStatus20Extension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 519; } /* = unique id SOAP_TYPE_tt__ImagingStatus20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingStatus20(): FocusStatus20(NULL), Extension(NULL), soap(NULL) { tt__ImagingStatus20::soap_default(NULL); }
	virtual ~tt__ImagingStatus20() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingStatus20Extension
#define SOAP_TYPE_tt__ImagingStatus20Extension (520)
/* tt:ImagingStatus20Extension */
class SOAP_CMAC tt__ImagingStatus20Extension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 520; } /* = unique id SOAP_TYPE_tt__ImagingStatus20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingStatus20Extension(): __any(NULL), soap(NULL) { tt__ImagingStatus20Extension::soap_default(NULL); }
	virtual ~tt__ImagingStatus20Extension() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusStatus20
#define SOAP_TYPE_tt__FocusStatus20 (521)
/* tt:FocusStatus20 */
class SOAP_CMAC tt__FocusStatus20
{
public:
	float Position;	/* required element of type xsd:float */
	enum tt__MoveStatus MoveStatus;	/* required element of type tt:MoveStatus */
	char *Error;	/* optional element of type xsd:string */
	class tt__FocusStatus20Extension *Extension;	/* optional element of type tt:FocusStatus20Extension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 521; } /* = unique id SOAP_TYPE_tt__FocusStatus20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusStatus20(): Error(NULL), Extension(NULL), soap(NULL) { tt__FocusStatus20::soap_default(NULL); }
	virtual ~tt__FocusStatus20() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusStatus20Extension
#define SOAP_TYPE_tt__FocusStatus20Extension (522)
/* tt:FocusStatus20Extension */
class SOAP_CMAC tt__FocusStatus20Extension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 522; } /* = unique id SOAP_TYPE_tt__FocusStatus20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusStatus20Extension(): __any(NULL), soap(NULL) { tt__FocusStatus20Extension::soap_default(NULL); }
	virtual ~tt__FocusStatus20Extension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingSettings20
#define SOAP_TYPE_tt__ImagingSettings20 (523)
/* tt:ImagingSettings20 */
class SOAP_CMAC tt__ImagingSettings20
{
public:
	class tt__BacklightCompensation20 *BacklightCompensation;	/* optional element of type tt:BacklightCompensation20 */
	float *Brightness;	/* optional element of type xsd:float */
	float *ColorSaturation;	/* optional element of type xsd:float */
	float *Contrast;	/* optional element of type xsd:float */
	class tt__Exposure20 *Exposure;	/* optional element of type tt:Exposure20 */
	class tt__FocusConfiguration20 *Focus;	/* optional element of type tt:FocusConfiguration20 */
	enum tt__IrCutFilterMode *IrCutFilter;	/* optional element of type tt:IrCutFilterMode */
	float *Sharpness;	/* optional element of type xsd:float */
	class tt__WideDynamicRange20 *WideDynamicRange;	/* optional element of type tt:WideDynamicRange20 */
	class tt__WhiteBalance20 *WhiteBalance;	/* optional element of type tt:WhiteBalance20 */
	class tt__ImagingSettingsExtension20 *Extension;	/* optional element of type tt:ImagingSettingsExtension20 */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 523; } /* = unique id SOAP_TYPE_tt__ImagingSettings20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingSettings20(): BacklightCompensation(NULL), Brightness(NULL), ColorSaturation(NULL), Contrast(NULL), Exposure(NULL), Focus(NULL), IrCutFilter(NULL), Sharpness(NULL), WideDynamicRange(NULL), WhiteBalance(NULL), Extension(NULL), soap(NULL) { tt__ImagingSettings20::soap_default(NULL); }
	virtual ~tt__ImagingSettings20() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingSettingsExtension20
#define SOAP_TYPE_tt__ImagingSettingsExtension20 (524)
/* tt:ImagingSettingsExtension20 */
class SOAP_CMAC tt__ImagingSettingsExtension20
{
public:
	class tt__ImageStabilization *ImageStabilization;	/* optional element of type tt:ImageStabilization */
	class tt__ImagingSettingsExtension202 *Extension;	/* optional element of type tt:ImagingSettingsExtension202 */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 524; } /* = unique id SOAP_TYPE_tt__ImagingSettingsExtension20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingSettingsExtension20(): ImageStabilization(NULL), Extension(NULL), __any(NULL), soap(NULL) { tt__ImagingSettingsExtension20::soap_default(NULL); }
	virtual ~tt__ImagingSettingsExtension20() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingSettingsExtension202
#define SOAP_TYPE_tt__ImagingSettingsExtension202 (525)
/* tt:ImagingSettingsExtension202 */
class SOAP_CMAC tt__ImagingSettingsExtension202
{
public:
	int __sizeIrCutFilterAutoAdjustment;	/* sequence of elements <IrCutFilterAutoAdjustment> */
	class tt__IrCutFilterAutoAdjustment **IrCutFilterAutoAdjustment;	/* optional element of type tt:IrCutFilterAutoAdjustment */
	class tt__ImagingSettingsExtension203 *Extension;	/* optional element of type tt:ImagingSettingsExtension203 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 525; } /* = unique id SOAP_TYPE_tt__ImagingSettingsExtension202 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingSettingsExtension202(): IrCutFilterAutoAdjustment(NULL), Extension(NULL), soap(NULL) { tt__ImagingSettingsExtension202::soap_default(NULL); }
	virtual ~tt__ImagingSettingsExtension202() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingSettingsExtension203
#define SOAP_TYPE_tt__ImagingSettingsExtension203 (526)
/* tt:ImagingSettingsExtension203 */
class SOAP_CMAC tt__ImagingSettingsExtension203
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 526; } /* = unique id SOAP_TYPE_tt__ImagingSettingsExtension203 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingSettingsExtension203(): __any(NULL), soap(NULL) { tt__ImagingSettingsExtension203::soap_default(NULL); }
	virtual ~tt__ImagingSettingsExtension203() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImageStabilization
#define SOAP_TYPE_tt__ImageStabilization (527)
/* tt:ImageStabilization */
class SOAP_CMAC tt__ImageStabilization
{
public:
	enum tt__ImageStabilizationMode Mode;	/* required element of type tt:ImageStabilizationMode */
	float *Level;	/* optional element of type xsd:float */
	class tt__ImageStabilizationExtension *Extension;	/* optional element of type tt:ImageStabilizationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 527; } /* = unique id SOAP_TYPE_tt__ImageStabilization */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImageStabilization(): Level(NULL), Extension(NULL), soap(NULL) { tt__ImageStabilization::soap_default(NULL); }
	virtual ~tt__ImageStabilization() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImageStabilizationExtension
#define SOAP_TYPE_tt__ImageStabilizationExtension (528)
/* tt:ImageStabilizationExtension */
class SOAP_CMAC tt__ImageStabilizationExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 528; } /* = unique id SOAP_TYPE_tt__ImageStabilizationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImageStabilizationExtension(): __any(NULL), soap(NULL) { tt__ImageStabilizationExtension::soap_default(NULL); }
	virtual ~tt__ImageStabilizationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustment
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustment (529)
/* tt:IrCutFilterAutoAdjustment */
class SOAP_CMAC tt__IrCutFilterAutoAdjustment
{
public:
	char *BoundaryType;	/* required element of type xsd:string */
	float *BoundaryOffset;	/* optional element of type xsd:float */
	LONG64 *ResponseTime;	/* optional element of type xsd:duration */
	class tt__IrCutFilterAutoAdjustmentExtension *Extension;	/* optional element of type tt:IrCutFilterAutoAdjustmentExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 529; } /* = unique id SOAP_TYPE_tt__IrCutFilterAutoAdjustment */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IrCutFilterAutoAdjustment(): BoundaryType(NULL), BoundaryOffset(NULL), ResponseTime(NULL), Extension(NULL), soap(NULL) { tt__IrCutFilterAutoAdjustment::soap_default(NULL); }
	virtual ~tt__IrCutFilterAutoAdjustment() { }
};
#endif

#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension (530)
/* tt:IrCutFilterAutoAdjustmentExtension */
class SOAP_CMAC tt__IrCutFilterAutoAdjustmentExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 530; } /* = unique id SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IrCutFilterAutoAdjustmentExtension(): __any(NULL), soap(NULL) { tt__IrCutFilterAutoAdjustmentExtension::soap_default(NULL); }
	virtual ~tt__IrCutFilterAutoAdjustmentExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__WideDynamicRange20
#define SOAP_TYPE_tt__WideDynamicRange20 (531)
/* tt:WideDynamicRange20 */
class SOAP_CMAC tt__WideDynamicRange20
{
public:
	enum tt__WideDynamicMode Mode;	/* required element of type tt:WideDynamicMode */
	float *Level;	/* optional element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 531; } /* = unique id SOAP_TYPE_tt__WideDynamicRange20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WideDynamicRange20(): Level(NULL), soap(NULL) { tt__WideDynamicRange20::soap_default(NULL); }
	virtual ~tt__WideDynamicRange20() { }
};
#endif

#ifndef SOAP_TYPE_tt__BacklightCompensation20
#define SOAP_TYPE_tt__BacklightCompensation20 (532)
/* tt:BacklightCompensation20 */
class SOAP_CMAC tt__BacklightCompensation20
{
public:
	enum tt__BacklightCompensationMode Mode;	/* required element of type tt:BacklightCompensationMode */
	float *Level;	/* optional element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 532; } /* = unique id SOAP_TYPE_tt__BacklightCompensation20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__BacklightCompensation20(): Level(NULL), soap(NULL) { tt__BacklightCompensation20::soap_default(NULL); }
	virtual ~tt__BacklightCompensation20() { }
};
#endif

#ifndef SOAP_TYPE_tt__Exposure20
#define SOAP_TYPE_tt__Exposure20 (533)
/* tt:Exposure20 */
class SOAP_CMAC tt__Exposure20
{
public:
	enum tt__ExposureMode Mode;	/* required element of type tt:ExposureMode */
	enum tt__ExposurePriority *Priority;	/* optional element of type tt:ExposurePriority */
	tt__Rectangle *Window;	/* optional element of type tt:Rectangle */
	float *MinExposureTime;	/* optional element of type xsd:float */
	float *MaxExposureTime;	/* optional element of type xsd:float */
	float *MinGain;	/* optional element of type xsd:float */
	float *MaxGain;	/* optional element of type xsd:float */
	float *MinIris;	/* optional element of type xsd:float */
	float *MaxIris;	/* optional element of type xsd:float */
	float *ExposureTime;	/* optional element of type xsd:float */
	float *Gain;	/* optional element of type xsd:float */
	float *Iris;	/* optional element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 533; } /* = unique id SOAP_TYPE_tt__Exposure20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Exposure20(): Priority(NULL), Window(NULL), MinExposureTime(NULL), MaxExposureTime(NULL), MinGain(NULL), MaxGain(NULL), MinIris(NULL), MaxIris(NULL), ExposureTime(NULL), Gain(NULL), Iris(NULL), soap(NULL) { tt__Exposure20::soap_default(NULL); }
	virtual ~tt__Exposure20() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingOptions20
#define SOAP_TYPE_tt__ImagingOptions20 (534)
/* tt:ImagingOptions20 */
class SOAP_CMAC tt__ImagingOptions20
{
public:
	class tt__BacklightCompensationOptions20 *BacklightCompensation;	/* optional element of type tt:BacklightCompensationOptions20 */
	tt__FloatRange *Brightness;	/* optional element of type tt:FloatRange */
	tt__FloatRange *ColorSaturation;	/* optional element of type tt:FloatRange */
	tt__FloatRange *Contrast;	/* optional element of type tt:FloatRange */
	class tt__ExposureOptions20 *Exposure;	/* optional element of type tt:ExposureOptions20 */
	class tt__FocusOptions20 *Focus;	/* optional element of type tt:FocusOptions20 */
	int __sizeIrCutFilterModes;	/* sequence of elements <IrCutFilterModes> */
	enum tt__IrCutFilterMode *IrCutFilterModes;	/* optional element of type tt:IrCutFilterMode */
	tt__FloatRange *Sharpness;	/* optional element of type tt:FloatRange */
	class tt__WideDynamicRangeOptions20 *WideDynamicRange;	/* optional element of type tt:WideDynamicRangeOptions20 */
	class tt__WhiteBalanceOptions20 *WhiteBalance;	/* optional element of type tt:WhiteBalanceOptions20 */
	class tt__ImagingOptions20Extension *Extension;	/* optional element of type tt:ImagingOptions20Extension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 534; } /* = unique id SOAP_TYPE_tt__ImagingOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingOptions20(): BacklightCompensation(NULL), Brightness(NULL), ColorSaturation(NULL), Contrast(NULL), Exposure(NULL), Focus(NULL), IrCutFilterModes(NULL), Sharpness(NULL), WideDynamicRange(NULL), WhiteBalance(NULL), Extension(NULL), soap(NULL) { tt__ImagingOptions20::soap_default(NULL); }
	virtual ~tt__ImagingOptions20() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingOptions20Extension
#define SOAP_TYPE_tt__ImagingOptions20Extension (535)
/* tt:ImagingOptions20Extension */
class SOAP_CMAC tt__ImagingOptions20Extension
{
public:
	class tt__ImageStabilizationOptions *ImageStabilization;	/* optional element of type tt:ImageStabilizationOptions */
	class tt__ImagingOptions20Extension2 *Extension;	/* optional element of type tt:ImagingOptions20Extension2 */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 535; } /* = unique id SOAP_TYPE_tt__ImagingOptions20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingOptions20Extension(): ImageStabilization(NULL), Extension(NULL), __any(NULL), soap(NULL) { tt__ImagingOptions20Extension::soap_default(NULL); }
	virtual ~tt__ImagingOptions20Extension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingOptions20Extension2
#define SOAP_TYPE_tt__ImagingOptions20Extension2 (536)
/* tt:ImagingOptions20Extension2 */
class SOAP_CMAC tt__ImagingOptions20Extension2
{
public:
	class tt__IrCutFilterAutoAdjustmentOptions *IrCutFilterAutoAdjustment;	/* optional element of type tt:IrCutFilterAutoAdjustmentOptions */
	class tt__ImagingOptions20Extension3 *Extension;	/* optional element of type tt:ImagingOptions20Extension3 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 536; } /* = unique id SOAP_TYPE_tt__ImagingOptions20Extension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingOptions20Extension2(): IrCutFilterAutoAdjustment(NULL), Extension(NULL), soap(NULL) { tt__ImagingOptions20Extension2::soap_default(NULL); }
	virtual ~tt__ImagingOptions20Extension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingOptions20Extension3
#define SOAP_TYPE_tt__ImagingOptions20Extension3 (537)
/* tt:ImagingOptions20Extension3 */
class SOAP_CMAC tt__ImagingOptions20Extension3
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 537; } /* = unique id SOAP_TYPE_tt__ImagingOptions20Extension3 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingOptions20Extension3(): __any(NULL), soap(NULL) { tt__ImagingOptions20Extension3::soap_default(NULL); }
	virtual ~tt__ImagingOptions20Extension3() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImageStabilizationOptions
#define SOAP_TYPE_tt__ImageStabilizationOptions (538)
/* tt:ImageStabilizationOptions */
class SOAP_CMAC tt__ImageStabilizationOptions
{
public:
	int __sizeMode;	/* sequence of elements <Mode> */
	enum tt__ImageStabilizationMode *Mode;	/* required element of type tt:ImageStabilizationMode */
	tt__FloatRange *Level;	/* optional element of type tt:FloatRange */
	class tt__ImageStabilizationOptionsExtension *Extension;	/* optional element of type tt:ImageStabilizationOptionsExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 538; } /* = unique id SOAP_TYPE_tt__ImageStabilizationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImageStabilizationOptions(): Mode(NULL), Level(NULL), Extension(NULL), soap(NULL) { tt__ImageStabilizationOptions::soap_default(NULL); }
	virtual ~tt__ImageStabilizationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImageStabilizationOptionsExtension
#define SOAP_TYPE_tt__ImageStabilizationOptionsExtension (539)
/* tt:ImageStabilizationOptionsExtension */
class SOAP_CMAC tt__ImageStabilizationOptionsExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 539; } /* = unique id SOAP_TYPE_tt__ImageStabilizationOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImageStabilizationOptionsExtension(): __any(NULL), soap(NULL) { tt__ImageStabilizationOptionsExtension::soap_default(NULL); }
	virtual ~tt__ImageStabilizationOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptions
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptions (540)
/* tt:IrCutFilterAutoAdjustmentOptions */
class SOAP_CMAC tt__IrCutFilterAutoAdjustmentOptions
{
public:
	int __sizeBoundaryType;	/* sequence of elements <BoundaryType> */
	char **BoundaryType;	/* required element of type xsd:string */
	bool *BoundaryOffset;	/* optional element of type xsd:boolean */
	tt__DurationRange *ResponseTimeRange;	/* optional element of type tt:DurationRange */
	class tt__IrCutFilterAutoAdjustmentOptionsExtension *Extension;	/* optional element of type tt:IrCutFilterAutoAdjustmentOptionsExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 540; } /* = unique id SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IrCutFilterAutoAdjustmentOptions(): BoundaryType(NULL), BoundaryOffset(NULL), ResponseTimeRange(NULL), Extension(NULL), soap(NULL) { tt__IrCutFilterAutoAdjustmentOptions::soap_default(NULL); }
	virtual ~tt__IrCutFilterAutoAdjustmentOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptionsExtension
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptionsExtension (541)
/* tt:IrCutFilterAutoAdjustmentOptionsExtension */
class SOAP_CMAC tt__IrCutFilterAutoAdjustmentOptionsExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 541; } /* = unique id SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IrCutFilterAutoAdjustmentOptionsExtension(): __any(NULL), soap(NULL) { tt__IrCutFilterAutoAdjustmentOptionsExtension::soap_default(NULL); }
	virtual ~tt__IrCutFilterAutoAdjustmentOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__WideDynamicRangeOptions20
#define SOAP_TYPE_tt__WideDynamicRangeOptions20 (542)
/* tt:WideDynamicRangeOptions20 */
class SOAP_CMAC tt__WideDynamicRangeOptions20
{
public:
	int __sizeMode;	/* sequence of elements <Mode> */
	enum tt__WideDynamicMode *Mode;	/* required element of type tt:WideDynamicMode */
	tt__FloatRange *Level;	/* optional element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 542; } /* = unique id SOAP_TYPE_tt__WideDynamicRangeOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WideDynamicRangeOptions20(): Mode(NULL), Level(NULL), soap(NULL) { tt__WideDynamicRangeOptions20::soap_default(NULL); }
	virtual ~tt__WideDynamicRangeOptions20() { }
};
#endif

#ifndef SOAP_TYPE_tt__BacklightCompensationOptions20
#define SOAP_TYPE_tt__BacklightCompensationOptions20 (543)
/* tt:BacklightCompensationOptions20 */
class SOAP_CMAC tt__BacklightCompensationOptions20
{
public:
	int __sizeMode;	/* sequence of elements <Mode> */
	enum tt__BacklightCompensationMode *Mode;	/* required element of type tt:BacklightCompensationMode */
	tt__FloatRange *Level;	/* optional element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 543; } /* = unique id SOAP_TYPE_tt__BacklightCompensationOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__BacklightCompensationOptions20(): Mode(NULL), Level(NULL), soap(NULL) { tt__BacklightCompensationOptions20::soap_default(NULL); }
	virtual ~tt__BacklightCompensationOptions20() { }
};
#endif

#ifndef SOAP_TYPE_tt__ExposureOptions20
#define SOAP_TYPE_tt__ExposureOptions20 (544)
/* tt:ExposureOptions20 */
class SOAP_CMAC tt__ExposureOptions20
{
public:
	int __sizeMode;	/* sequence of elements <Mode> */
	enum tt__ExposureMode *Mode;	/* required element of type tt:ExposureMode */
	int __sizePriority;	/* sequence of elements <Priority> */
	enum tt__ExposurePriority *Priority;	/* optional element of type tt:ExposurePriority */
	tt__FloatRange *MinExposureTime;	/* optional element of type tt:FloatRange */
	tt__FloatRange *MaxExposureTime;	/* optional element of type tt:FloatRange */
	tt__FloatRange *MinGain;	/* optional element of type tt:FloatRange */
	tt__FloatRange *MaxGain;	/* optional element of type tt:FloatRange */
	tt__FloatRange *MinIris;	/* optional element of type tt:FloatRange */
	tt__FloatRange *MaxIris;	/* optional element of type tt:FloatRange */
	tt__FloatRange *ExposureTime;	/* optional element of type tt:FloatRange */
	tt__FloatRange *Gain;	/* optional element of type tt:FloatRange */
	tt__FloatRange *Iris;	/* optional element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 544; } /* = unique id SOAP_TYPE_tt__ExposureOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ExposureOptions20(): Mode(NULL), Priority(NULL), MinExposureTime(NULL), MaxExposureTime(NULL), MinGain(NULL), MaxGain(NULL), MinIris(NULL), MaxIris(NULL), ExposureTime(NULL), Gain(NULL), Iris(NULL), soap(NULL) { tt__ExposureOptions20::soap_default(NULL); }
	virtual ~tt__ExposureOptions20() { }
};
#endif

#ifndef SOAP_TYPE_tt__MoveOptions20
#define SOAP_TYPE_tt__MoveOptions20 (545)
/* tt:MoveOptions20 */
class SOAP_CMAC tt__MoveOptions20
{
public:
	tt__AbsoluteFocusOptions *Absolute;	/* optional element of type tt:AbsoluteFocusOptions */
	class tt__RelativeFocusOptions20 *Relative;	/* optional element of type tt:RelativeFocusOptions20 */
	tt__ContinuousFocusOptions *Continuous;	/* optional element of type tt:ContinuousFocusOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 545; } /* = unique id SOAP_TYPE_tt__MoveOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MoveOptions20(): Absolute(NULL), Relative(NULL), Continuous(NULL), soap(NULL) { tt__MoveOptions20::soap_default(NULL); }
	virtual ~tt__MoveOptions20() { }
};
#endif

#ifndef SOAP_TYPE_tt__RelativeFocusOptions20
#define SOAP_TYPE_tt__RelativeFocusOptions20 (546)
/* tt:RelativeFocusOptions20 */
class SOAP_CMAC tt__RelativeFocusOptions20
{
public:
	tt__FloatRange *Distance;	/* required element of type tt:FloatRange */
	tt__FloatRange *Speed;	/* optional element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 546; } /* = unique id SOAP_TYPE_tt__RelativeFocusOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RelativeFocusOptions20(): Distance(NULL), Speed(NULL), soap(NULL) { tt__RelativeFocusOptions20::soap_default(NULL); }
	virtual ~tt__RelativeFocusOptions20() { }
};
#endif

#ifndef SOAP_TYPE_tt__WhiteBalance20
#define SOAP_TYPE_tt__WhiteBalance20 (547)
/* tt:WhiteBalance20 */
class SOAP_CMAC tt__WhiteBalance20
{
public:
	enum tt__WhiteBalanceMode Mode;	/* required element of type tt:WhiteBalanceMode */
	float *CrGain;	/* optional element of type xsd:float */
	float *CbGain;	/* optional element of type xsd:float */
	class tt__WhiteBalance20Extension *Extension;	/* optional element of type tt:WhiteBalance20Extension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 547; } /* = unique id SOAP_TYPE_tt__WhiteBalance20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WhiteBalance20(): CrGain(NULL), CbGain(NULL), Extension(NULL), soap(NULL) { tt__WhiteBalance20::soap_default(NULL); }
	virtual ~tt__WhiteBalance20() { }
};
#endif

#ifndef SOAP_TYPE_tt__WhiteBalance20Extension
#define SOAP_TYPE_tt__WhiteBalance20Extension (548)
/* tt:WhiteBalance20Extension */
class SOAP_CMAC tt__WhiteBalance20Extension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 548; } /* = unique id SOAP_TYPE_tt__WhiteBalance20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WhiteBalance20Extension(): __any(NULL), soap(NULL) { tt__WhiteBalance20Extension::soap_default(NULL); }
	virtual ~tt__WhiteBalance20Extension() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusConfiguration20
#define SOAP_TYPE_tt__FocusConfiguration20 (549)
/* tt:FocusConfiguration20 */
class SOAP_CMAC tt__FocusConfiguration20
{
public:
	enum tt__AutoFocusMode AutoFocusMode;	/* required element of type tt:AutoFocusMode */
	float *DefaultSpeed;	/* optional element of type xsd:float */
	float *NearLimit;	/* optional element of type xsd:float */
	float *FarLimit;	/* optional element of type xsd:float */
	class tt__FocusConfiguration20Extension *Extension;	/* optional element of type tt:FocusConfiguration20Extension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 549; } /* = unique id SOAP_TYPE_tt__FocusConfiguration20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusConfiguration20(): DefaultSpeed(NULL), NearLimit(NULL), FarLimit(NULL), Extension(NULL), soap(NULL) { tt__FocusConfiguration20::soap_default(NULL); }
	virtual ~tt__FocusConfiguration20() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusConfiguration20Extension
#define SOAP_TYPE_tt__FocusConfiguration20Extension (550)
/* tt:FocusConfiguration20Extension */
class SOAP_CMAC tt__FocusConfiguration20Extension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 550; } /* = unique id SOAP_TYPE_tt__FocusConfiguration20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusConfiguration20Extension(): __any(NULL), soap(NULL) { tt__FocusConfiguration20Extension::soap_default(NULL); }
	virtual ~tt__FocusConfiguration20Extension() { }
};
#endif

#ifndef SOAP_TYPE_tt__WhiteBalanceOptions20
#define SOAP_TYPE_tt__WhiteBalanceOptions20 (551)
/* tt:WhiteBalanceOptions20 */
class SOAP_CMAC tt__WhiteBalanceOptions20
{
public:
	int __sizeMode;	/* sequence of elements <Mode> */
	enum tt__WhiteBalanceMode *Mode;	/* required element of type tt:WhiteBalanceMode */
	tt__FloatRange *YrGain;	/* optional element of type tt:FloatRange */
	tt__FloatRange *YbGain;	/* optional element of type tt:FloatRange */
	class tt__WhiteBalanceOptions20Extension *Extension;	/* optional element of type tt:WhiteBalanceOptions20Extension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 551; } /* = unique id SOAP_TYPE_tt__WhiteBalanceOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WhiteBalanceOptions20(): Mode(NULL), YrGain(NULL), YbGain(NULL), Extension(NULL), soap(NULL) { tt__WhiteBalanceOptions20::soap_default(NULL); }
	virtual ~tt__WhiteBalanceOptions20() { }
};
#endif

#ifndef SOAP_TYPE_tt__WhiteBalanceOptions20Extension
#define SOAP_TYPE_tt__WhiteBalanceOptions20Extension (552)
/* tt:WhiteBalanceOptions20Extension */
class SOAP_CMAC tt__WhiteBalanceOptions20Extension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 552; } /* = unique id SOAP_TYPE_tt__WhiteBalanceOptions20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WhiteBalanceOptions20Extension(): __any(NULL), soap(NULL) { tt__WhiteBalanceOptions20Extension::soap_default(NULL); }
	virtual ~tt__WhiteBalanceOptions20Extension() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusOptions20
#define SOAP_TYPE_tt__FocusOptions20 (553)
/* tt:FocusOptions20 */
class SOAP_CMAC tt__FocusOptions20
{
public:
	int __sizeAutoFocusModes;	/* sequence of elements <AutoFocusModes> */
	enum tt__AutoFocusMode *AutoFocusModes;	/* optional element of type tt:AutoFocusMode */
	tt__FloatRange *DefaultSpeed;	/* optional element of type tt:FloatRange */
	tt__FloatRange *NearLimit;	/* optional element of type tt:FloatRange */
	tt__FloatRange *FarLimit;	/* optional element of type tt:FloatRange */
	class tt__FocusOptions20Extension *Extension;	/* optional element of type tt:FocusOptions20Extension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 553; } /* = unique id SOAP_TYPE_tt__FocusOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusOptions20(): AutoFocusModes(NULL), DefaultSpeed(NULL), NearLimit(NULL), FarLimit(NULL), Extension(NULL), soap(NULL) { tt__FocusOptions20::soap_default(NULL); }
	virtual ~tt__FocusOptions20() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusOptions20Extension
#define SOAP_TYPE_tt__FocusOptions20Extension (554)
/* tt:FocusOptions20Extension */
class SOAP_CMAC tt__FocusOptions20Extension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 554; } /* = unique id SOAP_TYPE_tt__FocusOptions20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusOptions20Extension(): __any(NULL), soap(NULL) { tt__FocusOptions20Extension::soap_default(NULL); }
	virtual ~tt__FocusOptions20Extension() { }
};
#endif

#ifndef SOAP_TYPE_tt__MessageExtension
#define SOAP_TYPE_tt__MessageExtension (555)
/* tt:MessageExtension */
class SOAP_CMAC tt__MessageExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 555; } /* = unique id SOAP_TYPE_tt__MessageExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MessageExtension(): __any(NULL), soap(NULL) { tt__MessageExtension::soap_default(NULL); }
	virtual ~tt__MessageExtension() { }
};
#endif

#ifndef SOAP_TYPE__tt__ItemList_SimpleItem
#define SOAP_TYPE__tt__ItemList_SimpleItem (1311)
/* tt:ItemList-SimpleItem */
class SOAP_CMAC _tt__ItemList_SimpleItem
{
public:
	char *Name;	/* required attribute */
	char *Value;	/* required attribute */
public:
	virtual int soap_type() const { return 1311; } /* = unique id SOAP_TYPE__tt__ItemList_SimpleItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__ItemList_SimpleItem(): Name(NULL), Value(NULL) { _tt__ItemList_SimpleItem::soap_default(NULL); }
	virtual ~_tt__ItemList_SimpleItem() { }
};
#endif

#ifndef SOAP_TYPE__tt__ItemList_ElementItem
#define SOAP_TYPE__tt__ItemList_ElementItem (1313)
/* tt:ItemList-ElementItem */
class SOAP_CMAC _tt__ItemList_ElementItem
{
public:
	struct soap_dom_element __any;	/* external */
	char *Name;	/* required attribute */
public:
	virtual int soap_type() const { return 1313; } /* = unique id SOAP_TYPE__tt__ItemList_ElementItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__ItemList_ElementItem(): Name(NULL) { _tt__ItemList_ElementItem::soap_default(NULL); }
	virtual ~_tt__ItemList_ElementItem() { }
};
#endif

#ifndef SOAP_TYPE_tt__ItemList
#define SOAP_TYPE_tt__ItemList (556)
/* tt:ItemList */
class SOAP_CMAC tt__ItemList
{
public:
	int __sizeSimpleItem;	/* sequence of elements <SimpleItem> */
	_tt__ItemList_SimpleItem *SimpleItem;	/* optional element of type tt:ItemList-SimpleItem */
	int __sizeElementItem;	/* sequence of elements <ElementItem> */
	_tt__ItemList_ElementItem *ElementItem;	/* optional element of type tt:ItemList-ElementItem */
	class tt__ItemListExtension *Extension;	/* optional element of type tt:ItemListExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 556; } /* = unique id SOAP_TYPE_tt__ItemList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ItemList(): SimpleItem(NULL), ElementItem(NULL), Extension(NULL), soap(NULL) { tt__ItemList::soap_default(NULL); }
	virtual ~tt__ItemList() { }
};
#endif

#ifndef SOAP_TYPE_tt__ItemListExtension
#define SOAP_TYPE_tt__ItemListExtension (557)
/* tt:ItemListExtension */
class SOAP_CMAC tt__ItemListExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 557; } /* = unique id SOAP_TYPE_tt__ItemListExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ItemListExtension(): __any(NULL), soap(NULL) { tt__ItemListExtension::soap_default(NULL); }
	virtual ~tt__ItemListExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__MessageDescription
#define SOAP_TYPE_tt__MessageDescription (558)
/* tt:MessageDescription */
class SOAP_CMAC tt__MessageDescription
{
public:
	class tt__ItemListDescription *Source;	/* optional element of type tt:ItemListDescription */
	tt__ItemListDescription *Key;	/* optional element of type tt:ItemListDescription */
	tt__ItemListDescription *Data;	/* optional element of type tt:ItemListDescription */
	class tt__MessageDescriptionExtension *Extension;	/* optional element of type tt:MessageDescriptionExtension */
	bool *IsProperty;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 558; } /* = unique id SOAP_TYPE_tt__MessageDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MessageDescription(): Source(NULL), Key(NULL), Data(NULL), Extension(NULL), IsProperty(NULL), soap(NULL) { tt__MessageDescription::soap_default(NULL); }
	virtual ~tt__MessageDescription() { }
};
#endif

#ifndef SOAP_TYPE_tt__MessageDescriptionExtension
#define SOAP_TYPE_tt__MessageDescriptionExtension (559)
/* tt:MessageDescriptionExtension */
class SOAP_CMAC tt__MessageDescriptionExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 559; } /* = unique id SOAP_TYPE_tt__MessageDescriptionExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MessageDescriptionExtension(): __any(NULL), soap(NULL) { tt__MessageDescriptionExtension::soap_default(NULL); }
	virtual ~tt__MessageDescriptionExtension() { }
};
#endif

#ifndef SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription
#define SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription (1318)
/* tt:ItemListDescription-SimpleItemDescription */
class SOAP_CMAC _tt__ItemListDescription_SimpleItemDescription
{
public:
	char *Name;	/* required attribute */
	char *Type;	/* required attribute */
public:
	virtual int soap_type() const { return 1318; } /* = unique id SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__ItemListDescription_SimpleItemDescription(): Name(NULL), Type(NULL) { _tt__ItemListDescription_SimpleItemDescription::soap_default(NULL); }
	virtual ~_tt__ItemListDescription_SimpleItemDescription() { }
};
#endif

#ifndef SOAP_TYPE__tt__ItemListDescription_ElementItemDescription
#define SOAP_TYPE__tt__ItemListDescription_ElementItemDescription (1320)
/* tt:ItemListDescription-ElementItemDescription */
class SOAP_CMAC _tt__ItemListDescription_ElementItemDescription
{
public:
	char *Name;	/* required attribute */
	char *Type;	/* required attribute */
public:
	virtual int soap_type() const { return 1320; } /* = unique id SOAP_TYPE__tt__ItemListDescription_ElementItemDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__ItemListDescription_ElementItemDescription(): Name(NULL), Type(NULL) { _tt__ItemListDescription_ElementItemDescription::soap_default(NULL); }
	virtual ~_tt__ItemListDescription_ElementItemDescription() { }
};
#endif

#ifndef SOAP_TYPE_tt__ItemListDescription
#define SOAP_TYPE_tt__ItemListDescription (560)
/* tt:ItemListDescription */
class SOAP_CMAC tt__ItemListDescription
{
public:
	int __sizeSimpleItemDescription;	/* sequence of elements <SimpleItemDescription> */
	_tt__ItemListDescription_SimpleItemDescription *SimpleItemDescription;	/* optional element of type tt:ItemListDescription-SimpleItemDescription */
	int __sizeElementItemDescription;	/* sequence of elements <ElementItemDescription> */
	_tt__ItemListDescription_ElementItemDescription *ElementItemDescription;	/* optional element of type tt:ItemListDescription-ElementItemDescription */
	class tt__ItemListDescriptionExtension *Extension;	/* optional element of type tt:ItemListDescriptionExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 560; } /* = unique id SOAP_TYPE_tt__ItemListDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ItemListDescription(): SimpleItemDescription(NULL), ElementItemDescription(NULL), Extension(NULL), soap(NULL) { tt__ItemListDescription::soap_default(NULL); }
	virtual ~tt__ItemListDescription() { }
};
#endif

#ifndef SOAP_TYPE_tt__ItemListDescriptionExtension
#define SOAP_TYPE_tt__ItemListDescriptionExtension (561)
/* tt:ItemListDescriptionExtension */
class SOAP_CMAC tt__ItemListDescriptionExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 561; } /* = unique id SOAP_TYPE_tt__ItemListDescriptionExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ItemListDescriptionExtension(): __any(NULL), soap(NULL) { tt__ItemListDescriptionExtension::soap_default(NULL); }
	virtual ~tt__ItemListDescriptionExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Vector
#define SOAP_TYPE_tt__Vector (562)
/* tt:Vector */
class SOAP_CMAC tt__Vector
{
public:
	float *x;	/* optional attribute */
	float *y;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 562; } /* = unique id SOAP_TYPE_tt__Vector */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Vector(): x(NULL), y(NULL), soap(NULL) { tt__Vector::soap_default(NULL); }
	virtual ~tt__Vector() { }
};
#endif

#ifndef SOAP_TYPE_tt__Rectangle
#define SOAP_TYPE_tt__Rectangle (563)
/* tt:Rectangle */
class SOAP_CMAC tt__Rectangle
{
public:
	float *bottom;	/* optional attribute */
	float *top;	/* optional attribute */
	float *right;	/* optional attribute */
	float *left;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 563; } /* = unique id SOAP_TYPE_tt__Rectangle */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Rectangle(): bottom(NULL), top(NULL), right(NULL), left(NULL), soap(NULL) { tt__Rectangle::soap_default(NULL); }
	virtual ~tt__Rectangle() { }
};
#endif

#ifndef SOAP_TYPE_tt__Polygon
#define SOAP_TYPE_tt__Polygon (564)
/* tt:Polygon */
class SOAP_CMAC tt__Polygon
{
public:
	int __sizePoint;	/* sequence of elements <Point> */
	tt__Vector **Point;	/* required element of type tt:Vector */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 564; } /* = unique id SOAP_TYPE_tt__Polygon */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Polygon(): Point(NULL), soap(NULL) { tt__Polygon::soap_default(NULL); }
	virtual ~tt__Polygon() { }
};
#endif

#ifndef SOAP_TYPE_tt__Polyline
#define SOAP_TYPE_tt__Polyline (565)
/* tt:Polyline */
class SOAP_CMAC tt__Polyline
{
public:
	int __sizePoint;	/* sequence of elements <Point> */
	tt__Vector **Point;	/* required element of type tt:Vector */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 565; } /* = unique id SOAP_TYPE_tt__Polyline */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Polyline(): Point(NULL), soap(NULL) { tt__Polyline::soap_default(NULL); }
	virtual ~tt__Polyline() { }
};
#endif

#ifndef SOAP_TYPE_tt__Color
#define SOAP_TYPE_tt__Color (566)
/* tt:Color */
class SOAP_CMAC tt__Color
{
public:
	float X;	/* required attribute */
	float Y;	/* required attribute */
	float Z;	/* required attribute */
	char *Colorspace;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 566; } /* = unique id SOAP_TYPE_tt__Color */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Color(): Colorspace(NULL), soap(NULL) { tt__Color::soap_default(NULL); }
	virtual ~tt__Color() { }
};
#endif

#ifndef SOAP_TYPE_tt__ColorCovariance
#define SOAP_TYPE_tt__ColorCovariance (567)
/* tt:ColorCovariance */
class SOAP_CMAC tt__ColorCovariance
{
public:
	float XX;	/* required attribute */
	float YY;	/* required attribute */
	float ZZ;	/* required attribute */
	float *XY;	/* optional attribute */
	float *XZ;	/* optional attribute */
	float *YZ;	/* optional attribute */
	char *Colorspace;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 567; } /* = unique id SOAP_TYPE_tt__ColorCovariance */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ColorCovariance(): XY(NULL), XZ(NULL), YZ(NULL), Colorspace(NULL), soap(NULL) { tt__ColorCovariance::soap_default(NULL); }
	virtual ~tt__ColorCovariance() { }
};
#endif

#ifndef SOAP_TYPE_tt__Appearance
#define SOAP_TYPE_tt__Appearance (568)
/* tt:Appearance */
class SOAP_CMAC tt__Appearance
{
public:
	class tt__Transformation *Transformation;	/* optional element of type tt:Transformation */
	class tt__ShapeDescriptor *Shape;	/* optional element of type tt:ShapeDescriptor */
	class tt__ColorDescriptor *Color;	/* optional element of type tt:ColorDescriptor */
	class tt__ClassDescriptor *Class;	/* optional element of type tt:ClassDescriptor */
	class tt__AppearanceExtension *Extension;	/* optional element of type tt:AppearanceExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 568; } /* = unique id SOAP_TYPE_tt__Appearance */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Appearance(): Transformation(NULL), Shape(NULL), Color(NULL), Class(NULL), Extension(NULL), soap(NULL) { tt__Appearance::soap_default(NULL); }
	virtual ~tt__Appearance() { }
};
#endif

#ifndef SOAP_TYPE_tt__AppearanceExtension
#define SOAP_TYPE_tt__AppearanceExtension (569)
/* tt:AppearanceExtension */
class SOAP_CMAC tt__AppearanceExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 569; } /* = unique id SOAP_TYPE_tt__AppearanceExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AppearanceExtension(): __any(NULL), soap(NULL) { tt__AppearanceExtension::soap_default(NULL); }
	virtual ~tt__AppearanceExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ShapeDescriptor
#define SOAP_TYPE_tt__ShapeDescriptor (570)
/* tt:ShapeDescriptor */
class SOAP_CMAC tt__ShapeDescriptor
{
public:
	tt__Rectangle *BoundingBox;	/* required element of type tt:Rectangle */
	tt__Vector *CenterOfGravity;	/* required element of type tt:Vector */
	int __sizePolygon;	/* sequence of elements <Polygon> */
	tt__Polygon **Polygon;	/* optional element of type tt:Polygon */
	class tt__ShapeDescriptorExtension *Extension;	/* optional element of type tt:ShapeDescriptorExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 570; } /* = unique id SOAP_TYPE_tt__ShapeDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ShapeDescriptor(): BoundingBox(NULL), CenterOfGravity(NULL), Polygon(NULL), Extension(NULL), soap(NULL) { tt__ShapeDescriptor::soap_default(NULL); }
	virtual ~tt__ShapeDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_tt__ShapeDescriptorExtension
#define SOAP_TYPE_tt__ShapeDescriptorExtension (571)
/* tt:ShapeDescriptorExtension */
class SOAP_CMAC tt__ShapeDescriptorExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 571; } /* = unique id SOAP_TYPE_tt__ShapeDescriptorExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ShapeDescriptorExtension(): __any(NULL), soap(NULL) { tt__ShapeDescriptorExtension::soap_default(NULL); }
	virtual ~tt__ShapeDescriptorExtension() { }
};
#endif

#ifndef SOAP_TYPE__tt__ColorDescriptor_ColorCluster
#define SOAP_TYPE__tt__ColorDescriptor_ColorCluster (1333)
/* tt:ColorDescriptor-ColorCluster */
class SOAP_CMAC _tt__ColorDescriptor_ColorCluster
{
public:
	tt__Color *Color;	/* required element of type tt:Color */
	float *Weight;	/* optional element of type xsd:float */
	tt__ColorCovariance *Covariance;	/* optional element of type tt:ColorCovariance */
public:
	virtual int soap_type() const { return 1333; } /* = unique id SOAP_TYPE__tt__ColorDescriptor_ColorCluster */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__ColorDescriptor_ColorCluster(): Color(NULL), Weight(NULL), Covariance(NULL) { _tt__ColorDescriptor_ColorCluster::soap_default(NULL); }
	virtual ~_tt__ColorDescriptor_ColorCluster() { }
};
#endif

#ifndef SOAP_TYPE_tt__ColorDescriptor
#define SOAP_TYPE_tt__ColorDescriptor (572)
/* tt:ColorDescriptor */
class SOAP_CMAC tt__ColorDescriptor
{
public:
	int __sizeColorCluster;	/* sequence of elements <ColorCluster> */
	_tt__ColorDescriptor_ColorCluster *ColorCluster;	/* optional element of type tt:ColorDescriptor-ColorCluster */
	class tt__ColorDescriptorExtension *Extension;	/* optional element of type tt:ColorDescriptorExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 572; } /* = unique id SOAP_TYPE_tt__ColorDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ColorDescriptor(): ColorCluster(NULL), Extension(NULL), soap(NULL) { tt__ColorDescriptor::soap_default(NULL); }
	virtual ~tt__ColorDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_tt__ColorDescriptorExtension
#define SOAP_TYPE_tt__ColorDescriptorExtension (573)
/* tt:ColorDescriptorExtension */
class SOAP_CMAC tt__ColorDescriptorExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 573; } /* = unique id SOAP_TYPE_tt__ColorDescriptorExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ColorDescriptorExtension(): __any(NULL), soap(NULL) { tt__ColorDescriptorExtension::soap_default(NULL); }
	virtual ~tt__ColorDescriptorExtension() { }
};
#endif

#ifndef SOAP_TYPE__tt__ClassDescriptor_ClassCandidate
#define SOAP_TYPE__tt__ClassDescriptor_ClassCandidate (1338)
/* tt:ClassDescriptor-ClassCandidate */
class SOAP_CMAC _tt__ClassDescriptor_ClassCandidate
{
public:
	enum tt__ClassType Type;	/* required element of type tt:ClassType */
	float Likelihood;	/* required element of type xsd:float */
public:
	virtual int soap_type() const { return 1338; } /* = unique id SOAP_TYPE__tt__ClassDescriptor_ClassCandidate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__ClassDescriptor_ClassCandidate() { _tt__ClassDescriptor_ClassCandidate::soap_default(NULL); }
	virtual ~_tt__ClassDescriptor_ClassCandidate() { }
};
#endif

#ifndef SOAP_TYPE_tt__ClassDescriptor
#define SOAP_TYPE_tt__ClassDescriptor (574)
/* tt:ClassDescriptor */
class SOAP_CMAC tt__ClassDescriptor
{
public:
	int __sizeClassCandidate;	/* sequence of elements <ClassCandidate> */
	_tt__ClassDescriptor_ClassCandidate *ClassCandidate;	/* optional element of type tt:ClassDescriptor-ClassCandidate */
	class tt__ClassDescriptorExtension *Extension;	/* optional element of type tt:ClassDescriptorExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 574; } /* = unique id SOAP_TYPE_tt__ClassDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ClassDescriptor(): ClassCandidate(NULL), Extension(NULL), soap(NULL) { tt__ClassDescriptor::soap_default(NULL); }
	virtual ~tt__ClassDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_tt__ClassDescriptorExtension
#define SOAP_TYPE_tt__ClassDescriptorExtension (575)
/* tt:ClassDescriptorExtension */
class SOAP_CMAC tt__ClassDescriptorExtension
{
public:
	int __sizeOtherTypes;	/* sequence of elements <OtherTypes> */
	class tt__OtherType **OtherTypes;	/* required element of type tt:OtherType */
	class tt__ClassDescriptorExtension2 *Extension;	/* optional element of type tt:ClassDescriptorExtension2 */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 575; } /* = unique id SOAP_TYPE_tt__ClassDescriptorExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ClassDescriptorExtension(): OtherTypes(NULL), Extension(NULL), __any(NULL), soap(NULL) { tt__ClassDescriptorExtension::soap_default(NULL); }
	virtual ~tt__ClassDescriptorExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ClassDescriptorExtension2
#define SOAP_TYPE_tt__ClassDescriptorExtension2 (576)
/* tt:ClassDescriptorExtension2 */
class SOAP_CMAC tt__ClassDescriptorExtension2
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 576; } /* = unique id SOAP_TYPE_tt__ClassDescriptorExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ClassDescriptorExtension2(): __any(NULL), soap(NULL) { tt__ClassDescriptorExtension2::soap_default(NULL); }
	virtual ~tt__ClassDescriptorExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__OtherType
#define SOAP_TYPE_tt__OtherType (577)
/* tt:OtherType */
class SOAP_CMAC tt__OtherType
{
public:
	char *Type;	/* required element of type xsd:string */
	float Likelihood;	/* required element of type xsd:float */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 577; } /* = unique id SOAP_TYPE_tt__OtherType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OtherType(): Type(NULL), __any(NULL), soap(NULL) { tt__OtherType::soap_default(NULL); }
	virtual ~tt__OtherType() { }
};
#endif

#ifndef SOAP_TYPE_tt__ObjectExtension
#define SOAP_TYPE_tt__ObjectExtension (579)
/* tt:ObjectExtension */
class SOAP_CMAC tt__ObjectExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 579; } /* = unique id SOAP_TYPE_tt__ObjectExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ObjectExtension(): __any(NULL), soap(NULL) { tt__ObjectExtension::soap_default(NULL); }
	virtual ~tt__ObjectExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Transformation
#define SOAP_TYPE_tt__Transformation (580)
/* tt:Transformation */
class SOAP_CMAC tt__Transformation
{
public:
	tt__Vector *Translate;	/* optional element of type tt:Vector */
	tt__Vector *Scale;	/* optional element of type tt:Vector */
	class tt__TransformationExtension *Extension;	/* optional element of type tt:TransformationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 580; } /* = unique id SOAP_TYPE_tt__Transformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Transformation(): Translate(NULL), Scale(NULL), Extension(NULL), soap(NULL) { tt__Transformation::soap_default(NULL); }
	virtual ~tt__Transformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__TransformationExtension
#define SOAP_TYPE_tt__TransformationExtension (581)
/* tt:TransformationExtension */
class SOAP_CMAC tt__TransformationExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 581; } /* = unique id SOAP_TYPE_tt__TransformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__TransformationExtension(): __any(NULL), soap(NULL) { tt__TransformationExtension::soap_default(NULL); }
	virtual ~tt__TransformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Frame
#define SOAP_TYPE_tt__Frame (582)
/* tt:Frame */
class SOAP_CMAC tt__Frame
{
public:
	tt__PTZStatus *PTZStatus;	/* optional element of type tt:PTZStatus */
	tt__Transformation *Transformation;	/* optional element of type tt:Transformation */
	int __sizeObject;	/* sequence of elements <Object> */
	class tt__Object **Object;	/* optional element of type tt:Object */
	class tt__ObjectTree *ObjectTree;	/* optional element of type tt:ObjectTree */
	class tt__FrameExtension *Extension;	/* optional element of type tt:FrameExtension */
	time_t UtcTime;	/* required attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 582; } /* = unique id SOAP_TYPE_tt__Frame */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Frame(): PTZStatus(NULL), Transformation(NULL), Object(NULL), ObjectTree(NULL), Extension(NULL), soap(NULL) { tt__Frame::soap_default(NULL); }
	virtual ~tt__Frame() { }
};
#endif

#ifndef SOAP_TYPE_tt__FrameExtension
#define SOAP_TYPE_tt__FrameExtension (583)
/* tt:FrameExtension */
class SOAP_CMAC tt__FrameExtension
{
public:
	class tt__MotionInCells *MotionInCells;	/* optional element of type tt:MotionInCells */
	class tt__FrameExtension2 *Extension;	/* optional element of type tt:FrameExtension2 */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 583; } /* = unique id SOAP_TYPE_tt__FrameExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FrameExtension(): MotionInCells(NULL), Extension(NULL), __any(NULL), soap(NULL) { tt__FrameExtension::soap_default(NULL); }
	virtual ~tt__FrameExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__FrameExtension2
#define SOAP_TYPE_tt__FrameExtension2 (584)
/* tt:FrameExtension2 */
class SOAP_CMAC tt__FrameExtension2
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 584; } /* = unique id SOAP_TYPE_tt__FrameExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FrameExtension2(): __any(NULL), soap(NULL) { tt__FrameExtension2::soap_default(NULL); }
	virtual ~tt__FrameExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__Merge
#define SOAP_TYPE_tt__Merge (585)
/* tt:Merge */
class SOAP_CMAC tt__Merge
{
public:
	int __sizefrom;	/* sequence of elements <from> */
	class tt__ObjectId **from;	/* required element of type tt:ObjectId */
	tt__ObjectId *to;	/* required element of type tt:ObjectId */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 585; } /* = unique id SOAP_TYPE_tt__Merge */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Merge(): from(NULL), to(NULL), soap(NULL) { tt__Merge::soap_default(NULL); }
	virtual ~tt__Merge() { }
};
#endif

#ifndef SOAP_TYPE_tt__Split
#define SOAP_TYPE_tt__Split (586)
/* tt:Split */
class SOAP_CMAC tt__Split
{
public:
	tt__ObjectId *from;	/* required element of type tt:ObjectId */
	int __sizeto;	/* sequence of elements <to> */
	tt__ObjectId **to;	/* required element of type tt:ObjectId */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 586; } /* = unique id SOAP_TYPE_tt__Split */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Split(): from(NULL), to(NULL), soap(NULL) { tt__Split::soap_default(NULL); }
	virtual ~tt__Split() { }
};
#endif

#ifndef SOAP_TYPE_tt__Rename
#define SOAP_TYPE_tt__Rename (587)
/* tt:Rename */
class SOAP_CMAC tt__Rename
{
public:
	tt__ObjectId *from;	/* required element of type tt:ObjectId */
	tt__ObjectId *to;	/* required element of type tt:ObjectId */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 587; } /* = unique id SOAP_TYPE_tt__Rename */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Rename(): from(NULL), to(NULL), soap(NULL) { tt__Rename::soap_default(NULL); }
	virtual ~tt__Rename() { }
};
#endif

#ifndef SOAP_TYPE_tt__ObjectId
#define SOAP_TYPE_tt__ObjectId (588)
/* tt:ObjectId */
class SOAP_CMAC tt__ObjectId
{
public:
	char *ObjectId;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 588; } /* = unique id SOAP_TYPE_tt__ObjectId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ObjectId(): ObjectId(NULL), soap(NULL) { tt__ObjectId::soap_default(NULL); }
	virtual ~tt__ObjectId() { }
};
#endif

#ifndef SOAP_TYPE__tt__Behaviour_Removed
#define SOAP_TYPE__tt__Behaviour_Removed (1354)
/* tt:Behaviour-Removed */
class SOAP_CMAC _tt__Behaviour_Removed
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
public:
	virtual int soap_type() const { return 1354; } /* = unique id SOAP_TYPE__tt__Behaviour_Removed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__Behaviour_Removed(): __any(NULL) { _tt__Behaviour_Removed::soap_default(NULL); }
	virtual ~_tt__Behaviour_Removed() { }
};
#endif

#ifndef SOAP_TYPE__tt__Behaviour_Idle
#define SOAP_TYPE__tt__Behaviour_Idle (1356)
/* tt:Behaviour-Idle */
class SOAP_CMAC _tt__Behaviour_Idle
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
public:
	virtual int soap_type() const { return 1356; } /* = unique id SOAP_TYPE__tt__Behaviour_Idle */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__Behaviour_Idle(): __any(NULL) { _tt__Behaviour_Idle::soap_default(NULL); }
	virtual ~_tt__Behaviour_Idle() { }
};
#endif

#ifndef SOAP_TYPE_tt__Behaviour
#define SOAP_TYPE_tt__Behaviour (589)
/* tt:Behaviour */
class SOAP_CMAC tt__Behaviour
{
public:
	_tt__Behaviour_Removed *Removed;	/* optional element of type tt:Behaviour-Removed */
	_tt__Behaviour_Idle *Idle;	/* optional element of type tt:Behaviour-Idle */
	class tt__BehaviourExtension *Extension;	/* optional element of type tt:BehaviourExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 589; } /* = unique id SOAP_TYPE_tt__Behaviour */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Behaviour(): Removed(NULL), Idle(NULL), Extension(NULL), soap(NULL) { tt__Behaviour::soap_default(NULL); }
	virtual ~tt__Behaviour() { }
};
#endif

#ifndef SOAP_TYPE_tt__BehaviourExtension
#define SOAP_TYPE_tt__BehaviourExtension (590)
/* tt:BehaviourExtension */
class SOAP_CMAC tt__BehaviourExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 590; } /* = unique id SOAP_TYPE_tt__BehaviourExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__BehaviourExtension(): __any(NULL), soap(NULL) { tt__BehaviourExtension::soap_default(NULL); }
	virtual ~tt__BehaviourExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ObjectTree
#define SOAP_TYPE_tt__ObjectTree (591)
/* tt:ObjectTree */
class SOAP_CMAC tt__ObjectTree
{
public:
	int __sizeRename;	/* sequence of elements <Rename> */
	tt__Rename **Rename;	/* optional element of type tt:Rename */
	int __sizeSplit;	/* sequence of elements <Split> */
	tt__Split **Split;	/* optional element of type tt:Split */
	int __sizeMerge;	/* sequence of elements <Merge> */
	tt__Merge **Merge;	/* optional element of type tt:Merge */
	int __sizeDelete;	/* sequence of elements <Delete> */
	tt__ObjectId **Delete;	/* optional element of type tt:ObjectId */
	class tt__ObjectTreeExtension *Extension;	/* optional element of type tt:ObjectTreeExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 591; } /* = unique id SOAP_TYPE_tt__ObjectTree */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ObjectTree(): Rename(NULL), Split(NULL), Merge(NULL), Delete(NULL), Extension(NULL), soap(NULL) { tt__ObjectTree::soap_default(NULL); }
	virtual ~tt__ObjectTree() { }
};
#endif

#ifndef SOAP_TYPE_tt__ObjectTreeExtension
#define SOAP_TYPE_tt__ObjectTreeExtension (592)
/* tt:ObjectTreeExtension */
class SOAP_CMAC tt__ObjectTreeExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 592; } /* = unique id SOAP_TYPE_tt__ObjectTreeExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ObjectTreeExtension(): __any(NULL), soap(NULL) { tt__ObjectTreeExtension::soap_default(NULL); }
	virtual ~tt__ObjectTreeExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__MotionInCells
#define SOAP_TYPE_tt__MotionInCells (593)
/* tt:MotionInCells */
class SOAP_CMAC tt__MotionInCells
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	char *Columns;	/* required attribute */
	char *Rows;	/* required attribute */
	xsd__base64Binary Cells;	/* required attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 593; } /* = unique id SOAP_TYPE_tt__MotionInCells */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MotionInCells(): __any(NULL), Columns(NULL), Rows(NULL), soap(NULL) { tt__MotionInCells::soap_default(NULL); }
	virtual ~tt__MotionInCells() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngineConfiguration
#define SOAP_TYPE_tt__AnalyticsEngineConfiguration (594)
/* tt:AnalyticsEngineConfiguration */
class SOAP_CMAC tt__AnalyticsEngineConfiguration
{
public:
	int __sizeAnalyticsModule;	/* sequence of elements <AnalyticsModule> */
	class tt__Config **AnalyticsModule;	/* optional element of type tt:Config */
	class tt__AnalyticsEngineConfigurationExtension *Extension;	/* optional element of type tt:AnalyticsEngineConfigurationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 594; } /* = unique id SOAP_TYPE_tt__AnalyticsEngineConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsEngineConfiguration(): AnalyticsModule(NULL), Extension(NULL), soap(NULL) { tt__AnalyticsEngineConfiguration::soap_default(NULL); }
	virtual ~tt__AnalyticsEngineConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension
#define SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension (595)
/* tt:AnalyticsEngineConfigurationExtension */
class SOAP_CMAC tt__AnalyticsEngineConfigurationExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 595; } /* = unique id SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsEngineConfigurationExtension(): __any(NULL), soap(NULL) { tt__AnalyticsEngineConfigurationExtension::soap_default(NULL); }
	virtual ~tt__AnalyticsEngineConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__RuleEngineConfiguration
#define SOAP_TYPE_tt__RuleEngineConfiguration (596)
/* tt:RuleEngineConfiguration */
class SOAP_CMAC tt__RuleEngineConfiguration
{
public:
	int __sizeRule;	/* sequence of elements <Rule> */
	tt__Config **Rule;	/* optional element of type tt:Config */
	class tt__RuleEngineConfigurationExtension *Extension;	/* optional element of type tt:RuleEngineConfigurationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 596; } /* = unique id SOAP_TYPE_tt__RuleEngineConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RuleEngineConfiguration(): Rule(NULL), Extension(NULL), soap(NULL) { tt__RuleEngineConfiguration::soap_default(NULL); }
	virtual ~tt__RuleEngineConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__RuleEngineConfigurationExtension
#define SOAP_TYPE_tt__RuleEngineConfigurationExtension (597)
/* tt:RuleEngineConfigurationExtension */
class SOAP_CMAC tt__RuleEngineConfigurationExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 597; } /* = unique id SOAP_TYPE_tt__RuleEngineConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RuleEngineConfigurationExtension(): __any(NULL), soap(NULL) { tt__RuleEngineConfigurationExtension::soap_default(NULL); }
	virtual ~tt__RuleEngineConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Config
#define SOAP_TYPE_tt__Config (598)
/* tt:Config */
class SOAP_CMAC tt__Config
{
public:
	tt__ItemList *Parameters;	/* required element of type tt:ItemList */
	char *Name;	/* required attribute */
	char *Type;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 598; } /* = unique id SOAP_TYPE_tt__Config */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Config(): Parameters(NULL), Name(NULL), Type(NULL), soap(NULL) { tt__Config::soap_default(NULL); }
	virtual ~tt__Config() { }
};
#endif

#ifndef SOAP_TYPE__tt__ConfigDescription_Messages
#define SOAP_TYPE__tt__ConfigDescription_Messages (1371)
/* tt:ConfigDescription-Messages */
class SOAP_CMAC _tt__ConfigDescription_Messages
{
public:
	tt__ItemListDescription *Source;	/* optional element of type tt:ItemListDescription */
	tt__ItemListDescription *Key;	/* optional element of type tt:ItemListDescription */
	tt__ItemListDescription *Data;	/* optional element of type tt:ItemListDescription */
	tt__MessageDescriptionExtension *Extension;	/* optional element of type tt:MessageDescriptionExtension */
	bool *IsProperty;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	char *ParentTopic;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1371; } /* = unique id SOAP_TYPE__tt__ConfigDescription_Messages */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__ConfigDescription_Messages(): Source(NULL), Key(NULL), Data(NULL), Extension(NULL), IsProperty(NULL), ParentTopic(NULL) { _tt__ConfigDescription_Messages::soap_default(NULL); }
	virtual ~_tt__ConfigDescription_Messages() { }
};
#endif

#ifndef SOAP_TYPE_tt__ConfigDescription
#define SOAP_TYPE_tt__ConfigDescription (599)
/* tt:ConfigDescription */
class SOAP_CMAC tt__ConfigDescription
{
public:
	tt__ItemListDescription *Parameters;	/* required element of type tt:ItemListDescription */
	int __sizeMessages;	/* sequence of elements <Messages> */
	_tt__ConfigDescription_Messages *Messages;	/* optional element of type tt:ConfigDescription-Messages */
	class tt__ConfigDescriptionExtension *Extension;	/* optional element of type tt:ConfigDescriptionExtension */
	char *Name;	/* required attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 599; } /* = unique id SOAP_TYPE_tt__ConfigDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ConfigDescription(): Parameters(NULL), Messages(NULL), Extension(NULL), Name(NULL), soap(NULL) { tt__ConfigDescription::soap_default(NULL); }
	virtual ~tt__ConfigDescription() { }
};
#endif

#ifndef SOAP_TYPE_tt__ConfigDescriptionExtension
#define SOAP_TYPE_tt__ConfigDescriptionExtension (600)
/* tt:ConfigDescriptionExtension */
class SOAP_CMAC tt__ConfigDescriptionExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 600; } /* = unique id SOAP_TYPE_tt__ConfigDescriptionExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ConfigDescriptionExtension(): __any(NULL), soap(NULL) { tt__ConfigDescriptionExtension::soap_default(NULL); }
	virtual ~tt__ConfigDescriptionExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__SupportedRules
#define SOAP_TYPE_tt__SupportedRules (601)
/* tt:SupportedRules */
class SOAP_CMAC tt__SupportedRules
{
public:
	int __sizeRuleContentSchemaLocation;	/* sequence of elements <RuleContentSchemaLocation> */
	char **RuleContentSchemaLocation;	/* optional element of type xsd:anyURI */
	int __sizeRuleDescription;	/* sequence of elements <RuleDescription> */
	tt__ConfigDescription **RuleDescription;	/* optional element of type tt:ConfigDescription */
	class tt__SupportedRulesExtension *Extension;	/* optional element of type tt:SupportedRulesExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 601; } /* = unique id SOAP_TYPE_tt__SupportedRules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SupportedRules(): RuleContentSchemaLocation(NULL), RuleDescription(NULL), Extension(NULL), soap(NULL) { tt__SupportedRules::soap_default(NULL); }
	virtual ~tt__SupportedRules() { }
};
#endif

#ifndef SOAP_TYPE_tt__SupportedRulesExtension
#define SOAP_TYPE_tt__SupportedRulesExtension (602)
/* tt:SupportedRulesExtension */
class SOAP_CMAC tt__SupportedRulesExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 602; } /* = unique id SOAP_TYPE_tt__SupportedRulesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SupportedRulesExtension(): __any(NULL), soap(NULL) { tt__SupportedRulesExtension::soap_default(NULL); }
	virtual ~tt__SupportedRulesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__SupportedAnalyticsModules
#define SOAP_TYPE_tt__SupportedAnalyticsModules (603)
/* tt:SupportedAnalyticsModules */
class SOAP_CMAC tt__SupportedAnalyticsModules
{
public:
	int __sizeAnalyticsModuleContentSchemaLocation;	/* sequence of elements <AnalyticsModuleContentSchemaLocation> */
	char **AnalyticsModuleContentSchemaLocation;	/* optional element of type xsd:anyURI */
	int __sizeAnalyticsModuleDescription;	/* sequence of elements <AnalyticsModuleDescription> */
	tt__ConfigDescription **AnalyticsModuleDescription;	/* optional element of type tt:ConfigDescription */
	class tt__SupportedAnalyticsModulesExtension *Extension;	/* optional element of type tt:SupportedAnalyticsModulesExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 603; } /* = unique id SOAP_TYPE_tt__SupportedAnalyticsModules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SupportedAnalyticsModules(): AnalyticsModuleContentSchemaLocation(NULL), AnalyticsModuleDescription(NULL), Extension(NULL), soap(NULL) { tt__SupportedAnalyticsModules::soap_default(NULL); }
	virtual ~tt__SupportedAnalyticsModules() { }
};
#endif

#ifndef SOAP_TYPE_tt__SupportedAnalyticsModulesExtension
#define SOAP_TYPE_tt__SupportedAnalyticsModulesExtension (604)
/* tt:SupportedAnalyticsModulesExtension */
class SOAP_CMAC tt__SupportedAnalyticsModulesExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 604; } /* = unique id SOAP_TYPE_tt__SupportedAnalyticsModulesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SupportedAnalyticsModulesExtension(): __any(NULL), soap(NULL) { tt__SupportedAnalyticsModulesExtension::soap_default(NULL); }
	virtual ~tt__SupportedAnalyticsModulesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PolygonConfiguration
#define SOAP_TYPE_tt__PolygonConfiguration (605)
/* tt:PolygonConfiguration */
class SOAP_CMAC tt__PolygonConfiguration
{
public:
	tt__Polygon *Polygon;	/* required element of type tt:Polygon */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 605; } /* = unique id SOAP_TYPE_tt__PolygonConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PolygonConfiguration(): Polygon(NULL), __any(NULL), soap(NULL) { tt__PolygonConfiguration::soap_default(NULL); }
	virtual ~tt__PolygonConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__PolylineArray
#define SOAP_TYPE_tt__PolylineArray (606)
/* tt:PolylineArray */
class SOAP_CMAC tt__PolylineArray
{
public:
	int __sizeSegment;	/* sequence of elements <Segment> */
	tt__Polyline **Segment;	/* required element of type tt:Polyline */
	class tt__PolylineArrayExtension *Extension;	/* optional element of type tt:PolylineArrayExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 606; } /* = unique id SOAP_TYPE_tt__PolylineArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PolylineArray(): Segment(NULL), Extension(NULL), soap(NULL) { tt__PolylineArray::soap_default(NULL); }
	virtual ~tt__PolylineArray() { }
};
#endif

#ifndef SOAP_TYPE_tt__PolylineArrayExtension
#define SOAP_TYPE_tt__PolylineArrayExtension (607)
/* tt:PolylineArrayExtension */
class SOAP_CMAC tt__PolylineArrayExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 607; } /* = unique id SOAP_TYPE_tt__PolylineArrayExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PolylineArrayExtension(): __any(NULL), soap(NULL) { tt__PolylineArrayExtension::soap_default(NULL); }
	virtual ~tt__PolylineArrayExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PolylineArrayConfiguration
#define SOAP_TYPE_tt__PolylineArrayConfiguration (608)
/* tt:PolylineArrayConfiguration */
class SOAP_CMAC tt__PolylineArrayConfiguration
{
public:
	tt__PolylineArray *PolylineArray;	/* required element of type tt:PolylineArray */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 608; } /* = unique id SOAP_TYPE_tt__PolylineArrayConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PolylineArrayConfiguration(): PolylineArray(NULL), __any(NULL), soap(NULL) { tt__PolylineArrayConfiguration::soap_default(NULL); }
	virtual ~tt__PolylineArrayConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__MotionExpression
#define SOAP_TYPE_tt__MotionExpression (609)
/* tt:MotionExpression */
class SOAP_CMAC tt__MotionExpression
{
public:
	char *Expression;	/* required element of type xsd:string */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	char *Type;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 609; } /* = unique id SOAP_TYPE_tt__MotionExpression */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MotionExpression(): Expression(NULL), __any(NULL), Type(NULL), soap(NULL) { tt__MotionExpression::soap_default(NULL); }
	virtual ~tt__MotionExpression() { }
};
#endif

#ifndef SOAP_TYPE_tt__MotionExpressionConfiguration
#define SOAP_TYPE_tt__MotionExpressionConfiguration (610)
/* tt:MotionExpressionConfiguration */
class SOAP_CMAC tt__MotionExpressionConfiguration
{
public:
	tt__MotionExpression *MotionExpression;	/* required element of type tt:MotionExpression */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 610; } /* = unique id SOAP_TYPE_tt__MotionExpressionConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MotionExpressionConfiguration(): MotionExpression(NULL), __any(NULL), soap(NULL) { tt__MotionExpressionConfiguration::soap_default(NULL); }
	virtual ~tt__MotionExpressionConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__CellLayout
#define SOAP_TYPE_tt__CellLayout (611)
/* tt:CellLayout */
class SOAP_CMAC tt__CellLayout
{
public:
	tt__Transformation *Transformation;	/* required element of type tt:Transformation */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	char *Columns;	/* required attribute */
	char *Rows;	/* required attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 611; } /* = unique id SOAP_TYPE_tt__CellLayout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CellLayout(): Transformation(NULL), __any(NULL), Columns(NULL), Rows(NULL), soap(NULL) { tt__CellLayout::soap_default(NULL); }
	virtual ~tt__CellLayout() { }
};
#endif

#ifndef SOAP_TYPE__tt__union_MetadataStream
#define SOAP_TYPE__tt__union_MetadataStream (1388)
/* xsd:choice */
union _tt__union_MetadataStream
{
#define SOAP_UNION__tt__union_MetadataStream_VideoAnalytics	(1)
	class tt__VideoAnalyticsStream *VideoAnalytics;
#define SOAP_UNION__tt__union_MetadataStream_PTZ	(2)
	class tt__PTZStream *PTZ;
#define SOAP_UNION__tt__union_MetadataStream_Event	(3)
	class tt__EventStream *Event;
#define SOAP_UNION__tt__union_MetadataStream_Extension	(4)
	class tt__MetadataStreamExtension *Extension;
};
#endif

#ifndef SOAP_TYPE___tt__union_MetadataStream
#define SOAP_TYPE___tt__union_MetadataStream (1383)
/* Operation wrapper: */
class SOAP_CMAC __tt__union_MetadataStream
{
public:
	int __union_MetadataStream;	/* union discriminant (of union defined below) */
	union _tt__union_MetadataStream union_MetadataStream;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1383; } /* = unique id SOAP_TYPE___tt__union_MetadataStream */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __tt__union_MetadataStream() { __tt__union_MetadataStream::soap_default(NULL); }
	virtual ~__tt__union_MetadataStream() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataStream
#define SOAP_TYPE_tt__MetadataStream (612)
/* tt:MetadataStream */
class SOAP_CMAC tt__MetadataStream
{
public:
	int __size_MetadataStream;	/* sequence of elements <-union-MetadataStream> */
	__tt__union_MetadataStream *__union_MetadataStream;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 612; } /* = unique id SOAP_TYPE_tt__MetadataStream */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataStream(): __union_MetadataStream(NULL), soap(NULL) { tt__MetadataStream::soap_default(NULL); }
	virtual ~tt__MetadataStream() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataStreamExtension
#define SOAP_TYPE_tt__MetadataStreamExtension (613)
/* tt:MetadataStreamExtension */
class SOAP_CMAC tt__MetadataStreamExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 613; } /* = unique id SOAP_TYPE_tt__MetadataStreamExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataStreamExtension(): __any(NULL), soap(NULL) { tt__MetadataStreamExtension::soap_default(NULL); }
	virtual ~tt__MetadataStreamExtension() { }
};
#endif

#ifndef SOAP_TYPE__tt__union_VideoAnalyticsStream
#define SOAP_TYPE__tt__union_VideoAnalyticsStream (1393)
/* xsd:choice */
union _tt__union_VideoAnalyticsStream
{
#define SOAP_UNION__tt__union_VideoAnalyticsStream_Frame	(1)
	tt__Frame *Frame;
#define SOAP_UNION__tt__union_VideoAnalyticsStream_Extension	(2)
	class tt__VideoAnalyticsStreamExtension *Extension;
};
#endif

#ifndef SOAP_TYPE___tt__union_VideoAnalyticsStream
#define SOAP_TYPE___tt__union_VideoAnalyticsStream (1390)
/* Operation wrapper: */
class SOAP_CMAC __tt__union_VideoAnalyticsStream
{
public:
	int __union_VideoAnalyticsStream;	/* union discriminant (of union defined below) */
	union _tt__union_VideoAnalyticsStream union_VideoAnalyticsStream;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1390; } /* = unique id SOAP_TYPE___tt__union_VideoAnalyticsStream */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __tt__union_VideoAnalyticsStream() { __tt__union_VideoAnalyticsStream::soap_default(NULL); }
	virtual ~__tt__union_VideoAnalyticsStream() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoAnalyticsStream
#define SOAP_TYPE_tt__VideoAnalyticsStream (614)
/* tt:VideoAnalyticsStream */
class SOAP_CMAC tt__VideoAnalyticsStream
{
public:
	int __size_VideoAnalyticsStream;	/* sequence of elements <-union-VideoAnalyticsStream> */
	__tt__union_VideoAnalyticsStream *__union_VideoAnalyticsStream;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 614; } /* = unique id SOAP_TYPE_tt__VideoAnalyticsStream */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoAnalyticsStream(): __union_VideoAnalyticsStream(NULL), soap(NULL) { tt__VideoAnalyticsStream::soap_default(NULL); }
	virtual ~tt__VideoAnalyticsStream() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoAnalyticsStreamExtension
#define SOAP_TYPE_tt__VideoAnalyticsStreamExtension (615)
/* tt:VideoAnalyticsStreamExtension */
class SOAP_CMAC tt__VideoAnalyticsStreamExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 615; } /* = unique id SOAP_TYPE_tt__VideoAnalyticsStreamExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoAnalyticsStreamExtension(): __any(NULL), soap(NULL) { tt__VideoAnalyticsStreamExtension::soap_default(NULL); }
	virtual ~tt__VideoAnalyticsStreamExtension() { }
};
#endif

#ifndef SOAP_TYPE__tt__union_PTZStream
#define SOAP_TYPE__tt__union_PTZStream (1397)
/* xsd:choice */
union _tt__union_PTZStream
{
#define SOAP_UNION__tt__union_PTZStream_PTZStatus	(1)
	tt__PTZStatus *PTZStatus;
#define SOAP_UNION__tt__union_PTZStream_Extension	(2)
	class tt__PTZStreamExtension *Extension;
};
#endif

#ifndef SOAP_TYPE___tt__union_PTZStream
#define SOAP_TYPE___tt__union_PTZStream (1395)
/* Operation wrapper: */
class SOAP_CMAC __tt__union_PTZStream
{
public:
	int __union_PTZStream;	/* union discriminant (of union defined below) */
	union _tt__union_PTZStream union_PTZStream;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1395; } /* = unique id SOAP_TYPE___tt__union_PTZStream */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __tt__union_PTZStream() { __tt__union_PTZStream::soap_default(NULL); }
	virtual ~__tt__union_PTZStream() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZStream
#define SOAP_TYPE_tt__PTZStream (616)
/* tt:PTZStream */
class SOAP_CMAC tt__PTZStream
{
public:
	int __size_PTZStream;	/* sequence of elements <-union-PTZStream> */
	__tt__union_PTZStream *__union_PTZStream;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 616; } /* = unique id SOAP_TYPE_tt__PTZStream */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZStream(): __union_PTZStream(NULL), soap(NULL) { tt__PTZStream::soap_default(NULL); }
	virtual ~tt__PTZStream() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZStreamExtension
#define SOAP_TYPE_tt__PTZStreamExtension (617)
/* tt:PTZStreamExtension */
class SOAP_CMAC tt__PTZStreamExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 617; } /* = unique id SOAP_TYPE_tt__PTZStreamExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZStreamExtension(): __any(NULL), soap(NULL) { tt__PTZStreamExtension::soap_default(NULL); }
	virtual ~tt__PTZStreamExtension() { }
};
#endif

#ifndef SOAP_TYPE__tt__union_EventStream
#define SOAP_TYPE__tt__union_EventStream (1402)
/* xsd:choice */
union _tt__union_EventStream
{
#define SOAP_UNION__tt__union_EventStream_wsnt__NotificationMessage	(1)
	class wsnt__NotificationMessageHolderType *wsnt__NotificationMessage;
#define SOAP_UNION__tt__union_EventStream_Extension	(2)
	class tt__EventStreamExtension *Extension;
};
#endif

#ifndef SOAP_TYPE___tt__union_EventStream
#define SOAP_TYPE___tt__union_EventStream (1399)
/* Operation wrapper: */
class SOAP_CMAC __tt__union_EventStream
{
public:
	int __union_EventStream;	/* union discriminant (of union defined below) */
	union _tt__union_EventStream union_EventStream;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1399; } /* = unique id SOAP_TYPE___tt__union_EventStream */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __tt__union_EventStream() { __tt__union_EventStream::soap_default(NULL); }
	virtual ~__tt__union_EventStream() { }
};
#endif

#ifndef SOAP_TYPE_tt__EventStream
#define SOAP_TYPE_tt__EventStream (618)
/* tt:EventStream */
class SOAP_CMAC tt__EventStream
{
public:
	int __size_EventStream;	/* sequence of elements <-union-EventStream> */
	__tt__union_EventStream *__union_EventStream;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 618; } /* = unique id SOAP_TYPE_tt__EventStream */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EventStream(): __union_EventStream(NULL), soap(NULL) { tt__EventStream::soap_default(NULL); }
	virtual ~tt__EventStream() { }
};
#endif

#ifndef SOAP_TYPE_tt__EventStreamExtension
#define SOAP_TYPE_tt__EventStreamExtension (619)
/* tt:EventStreamExtension */
class SOAP_CMAC tt__EventStreamExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 619; } /* = unique id SOAP_TYPE_tt__EventStreamExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EventStreamExtension(): __any(NULL), soap(NULL) { tt__EventStreamExtension::soap_default(NULL); }
	virtual ~tt__EventStreamExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PaneConfiguration
#define SOAP_TYPE_tt__PaneConfiguration (620)
/* tt:PaneConfiguration */
class SOAP_CMAC tt__PaneConfiguration
{
public:
	char *PaneName;	/* optional element of type xsd:string */
	char *AudioOutputToken;	/* optional element of type tt:ReferenceToken */
	char *AudioSourceToken;	/* optional element of type tt:ReferenceToken */
	tt__AudioEncoderConfiguration *AudioEncoderConfiguration;	/* optional element of type tt:AudioEncoderConfiguration */
	char *ReceiverToken;	/* optional element of type tt:ReferenceToken */
	char *Token;	/* required element of type tt:ReferenceToken */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 620; } /* = unique id SOAP_TYPE_tt__PaneConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PaneConfiguration(): PaneName(NULL), AudioOutputToken(NULL), AudioSourceToken(NULL), AudioEncoderConfiguration(NULL), ReceiverToken(NULL), Token(NULL), __any(NULL), soap(NULL) { tt__PaneConfiguration::soap_default(NULL); }
	virtual ~tt__PaneConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__PaneLayout
#define SOAP_TYPE_tt__PaneLayout (621)
/* tt:PaneLayout */
class SOAP_CMAC tt__PaneLayout
{
public:
	char *Pane;	/* required element of type tt:ReferenceToken */
	tt__Rectangle *Area;	/* required element of type tt:Rectangle */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 621; } /* = unique id SOAP_TYPE_tt__PaneLayout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PaneLayout(): Pane(NULL), Area(NULL), __any(NULL), soap(NULL) { tt__PaneLayout::soap_default(NULL); }
	virtual ~tt__PaneLayout() { }
};
#endif

#ifndef SOAP_TYPE_tt__Layout
#define SOAP_TYPE_tt__Layout (622)
/* tt:Layout */
class SOAP_CMAC tt__Layout
{
public:
	int __sizePaneLayout;	/* sequence of elements <PaneLayout> */
	tt__PaneLayout **PaneLayout;	/* required element of type tt:PaneLayout */
	class tt__LayoutExtension *Extension;	/* optional element of type tt:LayoutExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 622; } /* = unique id SOAP_TYPE_tt__Layout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Layout(): PaneLayout(NULL), Extension(NULL), soap(NULL) { tt__Layout::soap_default(NULL); }
	virtual ~tt__Layout() { }
};
#endif

#ifndef SOAP_TYPE_tt__LayoutExtension
#define SOAP_TYPE_tt__LayoutExtension (623)
/* tt:LayoutExtension */
class SOAP_CMAC tt__LayoutExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 623; } /* = unique id SOAP_TYPE_tt__LayoutExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__LayoutExtension(): __any(NULL), soap(NULL) { tt__LayoutExtension::soap_default(NULL); }
	virtual ~tt__LayoutExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__CodingCapabilities
#define SOAP_TYPE_tt__CodingCapabilities (624)
/* tt:CodingCapabilities */
class SOAP_CMAC tt__CodingCapabilities
{
public:
	tt__AudioEncoderConfigurationOptions *AudioEncodingCapabilities;	/* optional element of type tt:AudioEncoderConfigurationOptions */
	tt__AudioDecoderConfigurationOptions *AudioDecodingCapabilities;	/* optional element of type tt:AudioDecoderConfigurationOptions */
	tt__VideoDecoderConfigurationOptions *VideoDecodingCapabilities;	/* required element of type tt:VideoDecoderConfigurationOptions */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 624; } /* = unique id SOAP_TYPE_tt__CodingCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CodingCapabilities(): AudioEncodingCapabilities(NULL), AudioDecodingCapabilities(NULL), VideoDecodingCapabilities(NULL), __any(NULL), soap(NULL) { tt__CodingCapabilities::soap_default(NULL); }
	virtual ~tt__CodingCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__LayoutOptions
#define SOAP_TYPE_tt__LayoutOptions (625)
/* tt:LayoutOptions */
class SOAP_CMAC tt__LayoutOptions
{
public:
	int __sizePaneLayoutOptions;	/* sequence of elements <PaneLayoutOptions> */
	class tt__PaneLayoutOptions **PaneLayoutOptions;	/* required element of type tt:PaneLayoutOptions */
	class tt__LayoutOptionsExtension *Extension;	/* optional element of type tt:LayoutOptionsExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 625; } /* = unique id SOAP_TYPE_tt__LayoutOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__LayoutOptions(): PaneLayoutOptions(NULL), Extension(NULL), soap(NULL) { tt__LayoutOptions::soap_default(NULL); }
	virtual ~tt__LayoutOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__LayoutOptionsExtension
#define SOAP_TYPE_tt__LayoutOptionsExtension (626)
/* tt:LayoutOptionsExtension */
class SOAP_CMAC tt__LayoutOptionsExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 626; } /* = unique id SOAP_TYPE_tt__LayoutOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__LayoutOptionsExtension(): __any(NULL), soap(NULL) { tt__LayoutOptionsExtension::soap_default(NULL); }
	virtual ~tt__LayoutOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PaneLayoutOptions
#define SOAP_TYPE_tt__PaneLayoutOptions (627)
/* tt:PaneLayoutOptions */
class SOAP_CMAC tt__PaneLayoutOptions
{
public:
	int __sizeArea;	/* sequence of elements <Area> */
	tt__Rectangle **Area;	/* required element of type tt:Rectangle */
	class tt__PaneOptionExtension *Extension;	/* optional element of type tt:PaneOptionExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 627; } /* = unique id SOAP_TYPE_tt__PaneLayoutOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PaneLayoutOptions(): Area(NULL), Extension(NULL), soap(NULL) { tt__PaneLayoutOptions::soap_default(NULL); }
	virtual ~tt__PaneLayoutOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__PaneOptionExtension
#define SOAP_TYPE_tt__PaneOptionExtension (628)
/* tt:PaneOptionExtension */
class SOAP_CMAC tt__PaneOptionExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 628; } /* = unique id SOAP_TYPE_tt__PaneOptionExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PaneOptionExtension(): __any(NULL), soap(NULL) { tt__PaneOptionExtension::soap_default(NULL); }
	virtual ~tt__PaneOptionExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Receiver
#define SOAP_TYPE_tt__Receiver (629)
/* tt:Receiver */
class SOAP_CMAC tt__Receiver
{
public:
	char *Token;	/* required element of type tt:ReferenceToken */
	class tt__ReceiverConfiguration *Configuration;	/* required element of type tt:ReceiverConfiguration */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 629; } /* = unique id SOAP_TYPE_tt__Receiver */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Receiver(): Token(NULL), Configuration(NULL), __any(NULL), soap(NULL) { tt__Receiver::soap_default(NULL); }
	virtual ~tt__Receiver() { }
};
#endif

#ifndef SOAP_TYPE_tt__ReceiverConfiguration
#define SOAP_TYPE_tt__ReceiverConfiguration (630)
/* tt:ReceiverConfiguration */
class SOAP_CMAC tt__ReceiverConfiguration
{
public:
	enum tt__ReceiverMode Mode;	/* required element of type tt:ReceiverMode */
	char *MediaUri;	/* required element of type xsd:anyURI */
	tt__StreamSetup *StreamSetup;	/* required element of type tt:StreamSetup */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 630; } /* = unique id SOAP_TYPE_tt__ReceiverConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ReceiverConfiguration(): MediaUri(NULL), StreamSetup(NULL), __any(NULL), soap(NULL) { tt__ReceiverConfiguration::soap_default(NULL); }
	virtual ~tt__ReceiverConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__ReceiverStateInformation
#define SOAP_TYPE_tt__ReceiverStateInformation (631)
/* tt:ReceiverStateInformation */
class SOAP_CMAC tt__ReceiverStateInformation
{
public:
	enum tt__ReceiverState State;	/* required element of type tt:ReceiverState */
	bool AutoCreated;	/* required element of type xsd:boolean */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 631; } /* = unique id SOAP_TYPE_tt__ReceiverStateInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ReceiverStateInformation(): __any(NULL), soap(NULL) { tt__ReceiverStateInformation::soap_default(NULL); }
	virtual ~tt__ReceiverStateInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__SourceReference
#define SOAP_TYPE_tt__SourceReference (632)
/* tt:SourceReference */
class SOAP_CMAC tt__SourceReference
{
public:
	char *Token;	/* required element of type tt:ReferenceToken */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	char *Type;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 632; } /* = unique id SOAP_TYPE_tt__SourceReference */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SourceReference(): Token(NULL), __any(NULL), Type(NULL), soap(NULL) { tt__SourceReference::soap_default(NULL); }
	virtual ~tt__SourceReference() { }
};
#endif

#ifndef SOAP_TYPE_tt__DateTimeRange
#define SOAP_TYPE_tt__DateTimeRange (633)
/* tt:DateTimeRange */
class SOAP_CMAC tt__DateTimeRange
{
public:
	time_t From;	/* required element of type xsd:dateTime */
	time_t Until;	/* required element of type xsd:dateTime */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 633; } /* = unique id SOAP_TYPE_tt__DateTimeRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DateTimeRange(): __any(NULL), soap(NULL) { tt__DateTimeRange::soap_default(NULL); }
	virtual ~tt__DateTimeRange() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingSummary
#define SOAP_TYPE_tt__RecordingSummary (634)
/* tt:RecordingSummary */
class SOAP_CMAC tt__RecordingSummary
{
public:
	time_t DataFrom;	/* required element of type xsd:dateTime */
	time_t DataUntil;	/* required element of type xsd:dateTime */
	int NumberRecordings;	/* required element of type xsd:int */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 634; } /* = unique id SOAP_TYPE_tt__RecordingSummary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingSummary(): __any(NULL), soap(NULL) { tt__RecordingSummary::soap_default(NULL); }
	virtual ~tt__RecordingSummary() { }
};
#endif

#ifndef SOAP_TYPE_tt__SearchScope
#define SOAP_TYPE_tt__SearchScope (635)
/* tt:SearchScope */
class SOAP_CMAC tt__SearchScope
{
public:
	int __sizeIncludedSources;	/* sequence of elements <IncludedSources> */
	tt__SourceReference **IncludedSources;	/* optional element of type tt:SourceReference */
	int __sizeIncludedRecordings;	/* sequence of elements <IncludedRecordings> */
	char **IncludedRecordings;	/* optional element of type tt:RecordingReference */
	char *RecordingInformationFilter;	/* optional element of type tt:XPathExpression */
	class tt__SearchScopeExtension *Extension;	/* optional element of type tt:SearchScopeExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 635; } /* = unique id SOAP_TYPE_tt__SearchScope */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SearchScope(): IncludedSources(NULL), IncludedRecordings(NULL), RecordingInformationFilter(NULL), Extension(NULL), soap(NULL) { tt__SearchScope::soap_default(NULL); }
	virtual ~tt__SearchScope() { }
};
#endif

#ifndef SOAP_TYPE_tt__SearchScopeExtension
#define SOAP_TYPE_tt__SearchScopeExtension (636)
/* tt:SearchScopeExtension */
class SOAP_CMAC tt__SearchScopeExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 636; } /* = unique id SOAP_TYPE_tt__SearchScopeExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SearchScopeExtension(): __any(NULL), soap(NULL) { tt__SearchScopeExtension::soap_default(NULL); }
	virtual ~tt__SearchScopeExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPositionFilter
#define SOAP_TYPE_tt__PTZPositionFilter (638)
/* tt:PTZPositionFilter */
class SOAP_CMAC tt__PTZPositionFilter
{
public:
	tt__PTZVector *MinPosition;	/* required element of type tt:PTZVector */
	tt__PTZVector *MaxPosition;	/* required element of type tt:PTZVector */
	bool EnterOrExit;	/* required element of type xsd:boolean */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 638; } /* = unique id SOAP_TYPE_tt__PTZPositionFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPositionFilter(): MinPosition(NULL), MaxPosition(NULL), __any(NULL), soap(NULL) { tt__PTZPositionFilter::soap_default(NULL); }
	virtual ~tt__PTZPositionFilter() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataFilter
#define SOAP_TYPE_tt__MetadataFilter (639)
/* tt:MetadataFilter */
class SOAP_CMAC tt__MetadataFilter
{
public:
	char *MetadataStreamFilter;	/* required element of type tt:XPathExpression */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 639; } /* = unique id SOAP_TYPE_tt__MetadataFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataFilter(): MetadataStreamFilter(NULL), __any(NULL), soap(NULL) { tt__MetadataFilter::soap_default(NULL); }
	virtual ~tt__MetadataFilter() { }
};
#endif

#ifndef SOAP_TYPE_tt__FindRecordingResultList
#define SOAP_TYPE_tt__FindRecordingResultList (640)
/* tt:FindRecordingResultList */
class SOAP_CMAC tt__FindRecordingResultList
{
public:
	enum tt__SearchState SearchState;	/* required element of type tt:SearchState */
	int __sizeRecordingInformation;	/* sequence of elements <RecordingInformation> */
	class tt__RecordingInformation **RecordingInformation;	/* optional element of type tt:RecordingInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 640; } /* = unique id SOAP_TYPE_tt__FindRecordingResultList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FindRecordingResultList(): RecordingInformation(NULL), soap(NULL) { tt__FindRecordingResultList::soap_default(NULL); }
	virtual ~tt__FindRecordingResultList() { }
};
#endif

#ifndef SOAP_TYPE_tt__FindEventResultList
#define SOAP_TYPE_tt__FindEventResultList (641)
/* tt:FindEventResultList */
class SOAP_CMAC tt__FindEventResultList
{
public:
	enum tt__SearchState SearchState;	/* required element of type tt:SearchState */
	int __sizeResult;	/* sequence of elements <Result> */
	class tt__FindEventResult **Result;	/* optional element of type tt:FindEventResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 641; } /* = unique id SOAP_TYPE_tt__FindEventResultList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FindEventResultList(): Result(NULL), soap(NULL) { tt__FindEventResultList::soap_default(NULL); }
	virtual ~tt__FindEventResultList() { }
};
#endif

#ifndef SOAP_TYPE_tt__FindEventResult
#define SOAP_TYPE_tt__FindEventResult (642)
/* tt:FindEventResult */
class SOAP_CMAC tt__FindEventResult
{
public:
	char *RecordingToken;	/* required element of type tt:RecordingReference */
	char *TrackToken;	/* required element of type tt:TrackReference */
	time_t Time;	/* required element of type xsd:dateTime */
	wsnt__NotificationMessageHolderType *Event;	/* required element of type wsnt:NotificationMessageHolderType */
	bool StartStateEvent;	/* required element of type xsd:boolean */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 642; } /* = unique id SOAP_TYPE_tt__FindEventResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FindEventResult(): RecordingToken(NULL), TrackToken(NULL), Event(NULL), __any(NULL), soap(NULL) { tt__FindEventResult::soap_default(NULL); }
	virtual ~tt__FindEventResult() { }
};
#endif

#ifndef SOAP_TYPE_tt__FindPTZPositionResultList
#define SOAP_TYPE_tt__FindPTZPositionResultList (643)
/* tt:FindPTZPositionResultList */
class SOAP_CMAC tt__FindPTZPositionResultList
{
public:
	enum tt__SearchState SearchState;	/* required element of type tt:SearchState */
	int __sizeResult;	/* sequence of elements <Result> */
	class tt__FindPTZPositionResult **Result;	/* optional element of type tt:FindPTZPositionResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 643; } /* = unique id SOAP_TYPE_tt__FindPTZPositionResultList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FindPTZPositionResultList(): Result(NULL), soap(NULL) { tt__FindPTZPositionResultList::soap_default(NULL); }
	virtual ~tt__FindPTZPositionResultList() { }
};
#endif

#ifndef SOAP_TYPE_tt__FindPTZPositionResult
#define SOAP_TYPE_tt__FindPTZPositionResult (644)
/* tt:FindPTZPositionResult */
class SOAP_CMAC tt__FindPTZPositionResult
{
public:
	char *RecordingToken;	/* required element of type tt:RecordingReference */
	char *TrackToken;	/* required element of type tt:TrackReference */
	time_t Time;	/* required element of type xsd:dateTime */
	tt__PTZVector *Position;	/* required element of type tt:PTZVector */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 644; } /* = unique id SOAP_TYPE_tt__FindPTZPositionResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FindPTZPositionResult(): RecordingToken(NULL), TrackToken(NULL), Position(NULL), __any(NULL), soap(NULL) { tt__FindPTZPositionResult::soap_default(NULL); }
	virtual ~tt__FindPTZPositionResult() { }
};
#endif

#ifndef SOAP_TYPE_tt__FindMetadataResultList
#define SOAP_TYPE_tt__FindMetadataResultList (645)
/* tt:FindMetadataResultList */
class SOAP_CMAC tt__FindMetadataResultList
{
public:
	enum tt__SearchState SearchState;	/* required element of type tt:SearchState */
	int __sizeResult;	/* sequence of elements <Result> */
	class tt__FindMetadataResult **Result;	/* optional element of type tt:FindMetadataResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 645; } /* = unique id SOAP_TYPE_tt__FindMetadataResultList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FindMetadataResultList(): Result(NULL), soap(NULL) { tt__FindMetadataResultList::soap_default(NULL); }
	virtual ~tt__FindMetadataResultList() { }
};
#endif

#ifndef SOAP_TYPE_tt__FindMetadataResult
#define SOAP_TYPE_tt__FindMetadataResult (646)
/* tt:FindMetadataResult */
class SOAP_CMAC tt__FindMetadataResult
{
public:
	char *RecordingToken;	/* required element of type tt:RecordingReference */
	char *TrackToken;	/* required element of type tt:TrackReference */
	time_t Time;	/* required element of type xsd:dateTime */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 646; } /* = unique id SOAP_TYPE_tt__FindMetadataResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FindMetadataResult(): RecordingToken(NULL), TrackToken(NULL), __any(NULL), soap(NULL) { tt__FindMetadataResult::soap_default(NULL); }
	virtual ~tt__FindMetadataResult() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingInformation
#define SOAP_TYPE_tt__RecordingInformation (647)
/* tt:RecordingInformation */
class SOAP_CMAC tt__RecordingInformation
{
public:
	char *RecordingToken;	/* required element of type tt:RecordingReference */
	class tt__RecordingSourceInformation *Source;	/* required element of type tt:RecordingSourceInformation */
	time_t *EarliestRecording;	/* optional element of type xsd:dateTime */
	time_t *LatestRecording;	/* optional element of type xsd:dateTime */
	char *Content;	/* required element of type tt:Description */
	int __sizeTrack;	/* sequence of elements <Track> */
	class tt__TrackInformation **Track;	/* optional element of type tt:TrackInformation */
	enum tt__RecordingStatus RecordingStatus;	/* required element of type tt:RecordingStatus */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 647; } /* = unique id SOAP_TYPE_tt__RecordingInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingInformation(): RecordingToken(NULL), Source(NULL), EarliestRecording(NULL), LatestRecording(NULL), Content(NULL), Track(NULL), __any(NULL), soap(NULL) { tt__RecordingInformation::soap_default(NULL); }
	virtual ~tt__RecordingInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingSourceInformation
#define SOAP_TYPE_tt__RecordingSourceInformation (648)
/* tt:RecordingSourceInformation */
class SOAP_CMAC tt__RecordingSourceInformation
{
public:
	char *SourceId;	/* required element of type xsd:anyURI */
	char *Name;	/* required element of type tt:Name */
	char *Location;	/* required element of type tt:Description */
	char *Description;	/* required element of type tt:Description */
	char *Address;	/* required element of type xsd:anyURI */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 648; } /* = unique id SOAP_TYPE_tt__RecordingSourceInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingSourceInformation(): SourceId(NULL), Name(NULL), Location(NULL), Description(NULL), Address(NULL), __any(NULL), soap(NULL) { tt__RecordingSourceInformation::soap_default(NULL); }
	virtual ~tt__RecordingSourceInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__TrackInformation
#define SOAP_TYPE_tt__TrackInformation (649)
/* tt:TrackInformation */
class SOAP_CMAC tt__TrackInformation
{
public:
	char *TrackToken;	/* required element of type tt:TrackReference */
	enum tt__TrackType TrackType;	/* required element of type tt:TrackType */
	char *Description;	/* required element of type tt:Description */
	time_t DataFrom;	/* required element of type xsd:dateTime */
	time_t DataTo;	/* required element of type xsd:dateTime */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 649; } /* = unique id SOAP_TYPE_tt__TrackInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__TrackInformation(): TrackToken(NULL), Description(NULL), __any(NULL), soap(NULL) { tt__TrackInformation::soap_default(NULL); }
	virtual ~tt__TrackInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__MediaAttributes
#define SOAP_TYPE_tt__MediaAttributes (650)
/* tt:MediaAttributes */
class SOAP_CMAC tt__MediaAttributes
{
public:
	char *RecordingToken;	/* required element of type tt:RecordingReference */
	int __sizeTrackAttributes;	/* sequence of elements <TrackAttributes> */
	class tt__TrackAttributes **TrackAttributes;	/* optional element of type tt:TrackAttributes */
	time_t From;	/* required element of type xsd:dateTime */
	time_t Until;	/* required element of type xsd:dateTime */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 650; } /* = unique id SOAP_TYPE_tt__MediaAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MediaAttributes(): RecordingToken(NULL), TrackAttributes(NULL), __any(NULL), soap(NULL) { tt__MediaAttributes::soap_default(NULL); }
	virtual ~tt__MediaAttributes() { }
};
#endif

#ifndef SOAP_TYPE_tt__TrackAttributes
#define SOAP_TYPE_tt__TrackAttributes (651)
/* tt:TrackAttributes */
class SOAP_CMAC tt__TrackAttributes
{
public:
	tt__TrackInformation *TrackInformation;	/* required element of type tt:TrackInformation */
	class tt__VideoAttributes *VideoAttributes;	/* optional element of type tt:VideoAttributes */
	class tt__AudioAttributes *AudioAttributes;	/* optional element of type tt:AudioAttributes */
	class tt__MetadataAttributes *MetadataAttributes;	/* optional element of type tt:MetadataAttributes */
	class tt__TrackAttributesExtension *Extension;	/* optional element of type tt:TrackAttributesExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 651; } /* = unique id SOAP_TYPE_tt__TrackAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__TrackAttributes(): TrackInformation(NULL), VideoAttributes(NULL), AudioAttributes(NULL), MetadataAttributes(NULL), Extension(NULL), soap(NULL) { tt__TrackAttributes::soap_default(NULL); }
	virtual ~tt__TrackAttributes() { }
};
#endif

#ifndef SOAP_TYPE_tt__TrackAttributesExtension
#define SOAP_TYPE_tt__TrackAttributesExtension (652)
/* tt:TrackAttributesExtension */
class SOAP_CMAC tt__TrackAttributesExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 652; } /* = unique id SOAP_TYPE_tt__TrackAttributesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__TrackAttributesExtension(): __any(NULL), soap(NULL) { tt__TrackAttributesExtension::soap_default(NULL); }
	virtual ~tt__TrackAttributesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoAttributes
#define SOAP_TYPE_tt__VideoAttributes (653)
/* tt:VideoAttributes */
class SOAP_CMAC tt__VideoAttributes
{
public:
	int *Bitrate;	/* optional element of type xsd:int */
	int Width;	/* required element of type xsd:int */
	int Height;	/* required element of type xsd:int */
	enum tt__VideoEncoding Encoding;	/* required element of type tt:VideoEncoding */
	float Framerate;	/* required element of type xsd:float */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 653; } /* = unique id SOAP_TYPE_tt__VideoAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoAttributes(): Bitrate(NULL), __any(NULL), soap(NULL) { tt__VideoAttributes::soap_default(NULL); }
	virtual ~tt__VideoAttributes() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioAttributes
#define SOAP_TYPE_tt__AudioAttributes (654)
/* tt:AudioAttributes */
class SOAP_CMAC tt__AudioAttributes
{
public:
	int *Bitrate;	/* optional element of type xsd:int */
	enum tt__AudioEncoding Encoding;	/* required element of type tt:AudioEncoding */
	int Samplerate;	/* required element of type xsd:int */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 654; } /* = unique id SOAP_TYPE_tt__AudioAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioAttributes(): Bitrate(NULL), __any(NULL), soap(NULL) { tt__AudioAttributes::soap_default(NULL); }
	virtual ~tt__AudioAttributes() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataAttributes
#define SOAP_TYPE_tt__MetadataAttributes (655)
/* tt:MetadataAttributes */
class SOAP_CMAC tt__MetadataAttributes
{
public:
	bool CanContainPTZ;	/* required element of type xsd:boolean */
	bool CanContainAnalytics;	/* required element of type xsd:boolean */
	bool CanContainNotifications;	/* required element of type xsd:boolean */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	char *PtzSpaces;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 655; } /* = unique id SOAP_TYPE_tt__MetadataAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataAttributes(): __any(NULL), PtzSpaces(NULL), soap(NULL) { tt__MetadataAttributes::soap_default(NULL); }
	virtual ~tt__MetadataAttributes() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingConfiguration
#define SOAP_TYPE_tt__RecordingConfiguration (656)
/* tt:RecordingConfiguration */
class SOAP_CMAC tt__RecordingConfiguration
{
public:
	tt__RecordingSourceInformation *Source;	/* required element of type tt:RecordingSourceInformation */
	char *Content;	/* required element of type tt:Description */
	LONG64 MaximumRetentionTime;	/* external */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 656; } /* = unique id SOAP_TYPE_tt__RecordingConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingConfiguration(): Source(NULL), Content(NULL), __any(NULL), soap(NULL) { tt__RecordingConfiguration::soap_default(NULL); }
	virtual ~tt__RecordingConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__TrackConfiguration
#define SOAP_TYPE_tt__TrackConfiguration (657)
/* tt:TrackConfiguration */
class SOAP_CMAC tt__TrackConfiguration
{
public:
	enum tt__TrackType TrackType;	/* required element of type tt:TrackType */
	char *Description;	/* required element of type tt:Description */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 657; } /* = unique id SOAP_TYPE_tt__TrackConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__TrackConfiguration(): Description(NULL), __any(NULL), soap(NULL) { tt__TrackConfiguration::soap_default(NULL); }
	virtual ~tt__TrackConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__GetRecordingsResponseItem
#define SOAP_TYPE_tt__GetRecordingsResponseItem (658)
/* tt:GetRecordingsResponseItem */
class SOAP_CMAC tt__GetRecordingsResponseItem
{
public:
	char *RecordingToken;	/* required element of type tt:RecordingReference */
	tt__RecordingConfiguration *Configuration;	/* required element of type tt:RecordingConfiguration */
	class tt__GetTracksResponseList *Tracks;	/* required element of type tt:GetTracksResponseList */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 658; } /* = unique id SOAP_TYPE_tt__GetRecordingsResponseItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__GetRecordingsResponseItem(): RecordingToken(NULL), Configuration(NULL), Tracks(NULL), __any(NULL), soap(NULL) { tt__GetRecordingsResponseItem::soap_default(NULL); }
	virtual ~tt__GetRecordingsResponseItem() { }
};
#endif

#ifndef SOAP_TYPE_tt__GetTracksResponseList
#define SOAP_TYPE_tt__GetTracksResponseList (659)
/* tt:GetTracksResponseList */
class SOAP_CMAC tt__GetTracksResponseList
{
public:
	int __sizeTrack;	/* sequence of elements <Track> */
	class tt__GetTracksResponseItem **Track;	/* optional element of type tt:GetTracksResponseItem */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 659; } /* = unique id SOAP_TYPE_tt__GetTracksResponseList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__GetTracksResponseList(): Track(NULL), soap(NULL) { tt__GetTracksResponseList::soap_default(NULL); }
	virtual ~tt__GetTracksResponseList() { }
};
#endif

#ifndef SOAP_TYPE_tt__GetTracksResponseItem
#define SOAP_TYPE_tt__GetTracksResponseItem (660)
/* tt:GetTracksResponseItem */
class SOAP_CMAC tt__GetTracksResponseItem
{
public:
	char *TrackToken;	/* required element of type tt:TrackReference */
	tt__TrackConfiguration *Configuration;	/* required element of type tt:TrackConfiguration */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 660; } /* = unique id SOAP_TYPE_tt__GetTracksResponseItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__GetTracksResponseItem(): TrackToken(NULL), Configuration(NULL), __any(NULL), soap(NULL) { tt__GetTracksResponseItem::soap_default(NULL); }
	virtual ~tt__GetTracksResponseItem() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobConfiguration
#define SOAP_TYPE_tt__RecordingJobConfiguration (661)
/* tt:RecordingJobConfiguration */
class SOAP_CMAC tt__RecordingJobConfiguration
{
public:
	char *RecordingToken;	/* required element of type tt:RecordingReference */
	char *Mode;	/* required element of type tt:RecordingJobMode */
	int Priority;	/* required element of type xsd:int */
	int __sizeSource;	/* sequence of elements <Source> */
	class tt__RecordingJobSource **Source;	/* optional element of type tt:RecordingJobSource */
	class tt__RecordingJobConfigurationExtension *Extension;	/* optional element of type tt:RecordingJobConfigurationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 661; } /* = unique id SOAP_TYPE_tt__RecordingJobConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobConfiguration(): RecordingToken(NULL), Mode(NULL), Source(NULL), Extension(NULL), soap(NULL) { tt__RecordingJobConfiguration::soap_default(NULL); }
	virtual ~tt__RecordingJobConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobConfigurationExtension
#define SOAP_TYPE_tt__RecordingJobConfigurationExtension (662)
/* tt:RecordingJobConfigurationExtension */
class SOAP_CMAC tt__RecordingJobConfigurationExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 662; } /* = unique id SOAP_TYPE_tt__RecordingJobConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobConfigurationExtension(): __any(NULL), soap(NULL) { tt__RecordingJobConfigurationExtension::soap_default(NULL); }
	virtual ~tt__RecordingJobConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobSource
#define SOAP_TYPE_tt__RecordingJobSource (663)
/* tt:RecordingJobSource */
class SOAP_CMAC tt__RecordingJobSource
{
public:
	tt__SourceReference *SourceToken;	/* optional element of type tt:SourceReference */
	bool *AutoCreateReceiver;	/* optional element of type xsd:boolean */
	int __sizeTracks;	/* sequence of elements <Tracks> */
	class tt__RecordingJobTrack **Tracks;	/* optional element of type tt:RecordingJobTrack */
	class tt__RecordingJobSourceExtension *Extension;	/* optional element of type tt:RecordingJobSourceExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 663; } /* = unique id SOAP_TYPE_tt__RecordingJobSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobSource(): SourceToken(NULL), AutoCreateReceiver(NULL), Tracks(NULL), Extension(NULL), soap(NULL) { tt__RecordingJobSource::soap_default(NULL); }
	virtual ~tt__RecordingJobSource() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobSourceExtension
#define SOAP_TYPE_tt__RecordingJobSourceExtension (664)
/* tt:RecordingJobSourceExtension */
class SOAP_CMAC tt__RecordingJobSourceExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 664; } /* = unique id SOAP_TYPE_tt__RecordingJobSourceExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobSourceExtension(): __any(NULL), soap(NULL) { tt__RecordingJobSourceExtension::soap_default(NULL); }
	virtual ~tt__RecordingJobSourceExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobTrack
#define SOAP_TYPE_tt__RecordingJobTrack (665)
/* tt:RecordingJobTrack */
class SOAP_CMAC tt__RecordingJobTrack
{
public:
	char *SourceTag;	/* required element of type xsd:string */
	char *Destination;	/* required element of type tt:TrackReference */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 665; } /* = unique id SOAP_TYPE_tt__RecordingJobTrack */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobTrack(): SourceTag(NULL), Destination(NULL), __any(NULL), soap(NULL) { tt__RecordingJobTrack::soap_default(NULL); }
	virtual ~tt__RecordingJobTrack() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobStateInformation
#define SOAP_TYPE_tt__RecordingJobStateInformation (666)
/* tt:RecordingJobStateInformation */
class SOAP_CMAC tt__RecordingJobStateInformation
{
public:
	char *RecordingToken;	/* required element of type tt:RecordingReference */
	char *State;	/* required element of type tt:RecordingJobState */
	int __sizeSources;	/* sequence of elements <Sources> */
	class tt__RecordingJobStateSource **Sources;	/* optional element of type tt:RecordingJobStateSource */
	class tt__RecordingJobStateInformationExtension *Extension;	/* optional element of type tt:RecordingJobStateInformationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 666; } /* = unique id SOAP_TYPE_tt__RecordingJobStateInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobStateInformation(): RecordingToken(NULL), State(NULL), Sources(NULL), Extension(NULL), soap(NULL) { tt__RecordingJobStateInformation::soap_default(NULL); }
	virtual ~tt__RecordingJobStateInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobStateInformationExtension
#define SOAP_TYPE_tt__RecordingJobStateInformationExtension (667)
/* tt:RecordingJobStateInformationExtension */
class SOAP_CMAC tt__RecordingJobStateInformationExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 667; } /* = unique id SOAP_TYPE_tt__RecordingJobStateInformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobStateInformationExtension(): __any(NULL), soap(NULL) { tt__RecordingJobStateInformationExtension::soap_default(NULL); }
	virtual ~tt__RecordingJobStateInformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobStateSource
#define SOAP_TYPE_tt__RecordingJobStateSource (668)
/* tt:RecordingJobStateSource */
class SOAP_CMAC tt__RecordingJobStateSource
{
public:
	tt__SourceReference *SourceToken;	/* required element of type tt:SourceReference */
	char *State;	/* required element of type tt:RecordingJobState */
	class tt__RecordingJobStateTracks *Tracks;	/* required element of type tt:RecordingJobStateTracks */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 668; } /* = unique id SOAP_TYPE_tt__RecordingJobStateSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobStateSource(): SourceToken(NULL), State(NULL), Tracks(NULL), __any(NULL), soap(NULL) { tt__RecordingJobStateSource::soap_default(NULL); }
	virtual ~tt__RecordingJobStateSource() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobStateTracks
#define SOAP_TYPE_tt__RecordingJobStateTracks (669)
/* tt:RecordingJobStateTracks */
class SOAP_CMAC tt__RecordingJobStateTracks
{
public:
	int __sizeTrack;	/* sequence of elements <Track> */
	class tt__RecordingJobStateTrack **Track;	/* optional element of type tt:RecordingJobStateTrack */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 669; } /* = unique id SOAP_TYPE_tt__RecordingJobStateTracks */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobStateTracks(): Track(NULL), soap(NULL) { tt__RecordingJobStateTracks::soap_default(NULL); }
	virtual ~tt__RecordingJobStateTracks() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobStateTrack
#define SOAP_TYPE_tt__RecordingJobStateTrack (670)
/* tt:RecordingJobStateTrack */
class SOAP_CMAC tt__RecordingJobStateTrack
{
public:
	char *SourceTag;	/* required element of type xsd:string */
	char *Destination;	/* required element of type tt:TrackReference */
	char *Error;	/* optional element of type xsd:string */
	char *State;	/* required element of type tt:RecordingJobState */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 670; } /* = unique id SOAP_TYPE_tt__RecordingJobStateTrack */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobStateTrack(): SourceTag(NULL), Destination(NULL), Error(NULL), State(NULL), __any(NULL), soap(NULL) { tt__RecordingJobStateTrack::soap_default(NULL); }
	virtual ~tt__RecordingJobStateTrack() { }
};
#endif

#ifndef SOAP_TYPE_tt__GetRecordingJobsResponseItem
#define SOAP_TYPE_tt__GetRecordingJobsResponseItem (671)
/* tt:GetRecordingJobsResponseItem */
class SOAP_CMAC tt__GetRecordingJobsResponseItem
{
public:
	char *JobToken;	/* required element of type tt:RecordingJobReference */
	tt__RecordingJobConfiguration *JobConfiguration;	/* required element of type tt:RecordingJobConfiguration */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 671; } /* = unique id SOAP_TYPE_tt__GetRecordingJobsResponseItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__GetRecordingJobsResponseItem(): JobToken(NULL), JobConfiguration(NULL), __any(NULL), soap(NULL) { tt__GetRecordingJobsResponseItem::soap_default(NULL); }
	virtual ~tt__GetRecordingJobsResponseItem() { }
};
#endif

#ifndef SOAP_TYPE_tt__ReplayConfiguration
#define SOAP_TYPE_tt__ReplayConfiguration (672)
/* tt:ReplayConfiguration */
class SOAP_CMAC tt__ReplayConfiguration
{
public:
	LONG64 SessionTimeout;	/* external */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 672; } /* = unique id SOAP_TYPE_tt__ReplayConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ReplayConfiguration(): __any(NULL), soap(NULL) { tt__ReplayConfiguration::soap_default(NULL); }
	virtual ~tt__ReplayConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration
#define SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration (674)
/* tt:AnalyticsDeviceEngineConfiguration */
class SOAP_CMAC tt__AnalyticsDeviceEngineConfiguration
{
public:
	int __sizeEngineConfiguration;	/* sequence of elements <EngineConfiguration> */
	class tt__EngineConfiguration **EngineConfiguration;	/* required element of type tt:EngineConfiguration */
	class tt__AnalyticsDeviceEngineConfigurationExtension *Extension;	/* optional element of type tt:AnalyticsDeviceEngineConfigurationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 674; } /* = unique id SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsDeviceEngineConfiguration(): EngineConfiguration(NULL), Extension(NULL), soap(NULL) { tt__AnalyticsDeviceEngineConfiguration::soap_default(NULL); }
	virtual ~tt__AnalyticsDeviceEngineConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension
#define SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension (675)
/* tt:AnalyticsDeviceEngineConfigurationExtension */
class SOAP_CMAC tt__AnalyticsDeviceEngineConfigurationExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 675; } /* = unique id SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsDeviceEngineConfigurationExtension(): __any(NULL), soap(NULL) { tt__AnalyticsDeviceEngineConfigurationExtension::soap_default(NULL); }
	virtual ~tt__AnalyticsDeviceEngineConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__EngineConfiguration
#define SOAP_TYPE_tt__EngineConfiguration (676)
/* tt:EngineConfiguration */
class SOAP_CMAC tt__EngineConfiguration
{
public:
	tt__VideoAnalyticsConfiguration *VideoAnalyticsConfiguration;	/* required element of type tt:VideoAnalyticsConfiguration */
	class tt__AnalyticsEngineInputInfo *AnalyticsEngineInputInfo;	/* required element of type tt:AnalyticsEngineInputInfo */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 676; } /* = unique id SOAP_TYPE_tt__EngineConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EngineConfiguration(): VideoAnalyticsConfiguration(NULL), AnalyticsEngineInputInfo(NULL), __any(NULL), soap(NULL) { tt__EngineConfiguration::soap_default(NULL); }
	virtual ~tt__EngineConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngineInputInfo
#define SOAP_TYPE_tt__AnalyticsEngineInputInfo (677)
/* tt:AnalyticsEngineInputInfo */
class SOAP_CMAC tt__AnalyticsEngineInputInfo
{
public:
	tt__Config *InputInfo;	/* optional element of type tt:Config */
	class tt__AnalyticsEngineInputInfoExtension *Extension;	/* optional element of type tt:AnalyticsEngineInputInfoExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 677; } /* = unique id SOAP_TYPE_tt__AnalyticsEngineInputInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsEngineInputInfo(): InputInfo(NULL), Extension(NULL), soap(NULL) { tt__AnalyticsEngineInputInfo::soap_default(NULL); }
	virtual ~tt__AnalyticsEngineInputInfo() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension
#define SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension (678)
/* tt:AnalyticsEngineInputInfoExtension */
class SOAP_CMAC tt__AnalyticsEngineInputInfoExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 678; } /* = unique id SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsEngineInputInfoExtension(): __any(NULL), soap(NULL) { tt__AnalyticsEngineInputInfoExtension::soap_default(NULL); }
	virtual ~tt__AnalyticsEngineInputInfoExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__SourceIdentification
#define SOAP_TYPE_tt__SourceIdentification (680)
/* tt:SourceIdentification */
class SOAP_CMAC tt__SourceIdentification
{
public:
	char *Name;	/* required element of type xsd:string */
	int __sizeToken;	/* sequence of elements <Token> */
	char **Token;	/* required element of type tt:ReferenceToken */
	class tt__SourceIdentificationExtension *Extension;	/* optional element of type tt:SourceIdentificationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 680; } /* = unique id SOAP_TYPE_tt__SourceIdentification */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SourceIdentification(): Name(NULL), Token(NULL), Extension(NULL), soap(NULL) { tt__SourceIdentification::soap_default(NULL); }
	virtual ~tt__SourceIdentification() { }
};
#endif

#ifndef SOAP_TYPE_tt__SourceIdentificationExtension
#define SOAP_TYPE_tt__SourceIdentificationExtension (681)
/* tt:SourceIdentificationExtension */
class SOAP_CMAC tt__SourceIdentificationExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 681; } /* = unique id SOAP_TYPE_tt__SourceIdentificationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SourceIdentificationExtension(): __any(NULL), soap(NULL) { tt__SourceIdentificationExtension::soap_default(NULL); }
	virtual ~tt__SourceIdentificationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataInput
#define SOAP_TYPE_tt__MetadataInput (682)
/* tt:MetadataInput */
class SOAP_CMAC tt__MetadataInput
{
public:
	int __sizeMetadataConfig;	/* sequence of elements <MetadataConfig> */
	tt__Config **MetadataConfig;	/* optional element of type tt:Config */
	class tt__MetadataInputExtension *Extension;	/* optional element of type tt:MetadataInputExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 682; } /* = unique id SOAP_TYPE_tt__MetadataInput */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataInput(): MetadataConfig(NULL), Extension(NULL), soap(NULL) { tt__MetadataInput::soap_default(NULL); }
	virtual ~tt__MetadataInput() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataInputExtension
#define SOAP_TYPE_tt__MetadataInputExtension (683)
/* tt:MetadataInputExtension */
class SOAP_CMAC tt__MetadataInputExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 683; } /* = unique id SOAP_TYPE_tt__MetadataInputExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataInputExtension(): __any(NULL), soap(NULL) { tt__MetadataInputExtension::soap_default(NULL); }
	virtual ~tt__MetadataInputExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsStateInformation
#define SOAP_TYPE_tt__AnalyticsStateInformation (685)
/* tt:AnalyticsStateInformation */
class SOAP_CMAC tt__AnalyticsStateInformation
{
public:
	char *AnalyticsEngineControlToken;	/* required element of type tt:ReferenceToken */
	class tt__AnalyticsState *State;	/* required element of type tt:AnalyticsState */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 685; } /* = unique id SOAP_TYPE_tt__AnalyticsStateInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsStateInformation(): AnalyticsEngineControlToken(NULL), State(NULL), __any(NULL), soap(NULL) { tt__AnalyticsStateInformation::soap_default(NULL); }
	virtual ~tt__AnalyticsStateInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsState
#define SOAP_TYPE_tt__AnalyticsState (686)
/* tt:AnalyticsState */
class SOAP_CMAC tt__AnalyticsState
{
public:
	char *Error;	/* optional element of type xsd:string */
	char *State;	/* required element of type xsd:string */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 686; } /* = unique id SOAP_TYPE_tt__AnalyticsState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsState(): Error(NULL), State(NULL), __any(NULL), soap(NULL) { tt__AnalyticsState::soap_default(NULL); }
	virtual ~tt__AnalyticsState() { }
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (1462)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

#ifndef SOAP_TYPE_tt__ActionEngineEventPayload
#define SOAP_TYPE_tt__ActionEngineEventPayload (687)
/* tt:ActionEngineEventPayload */
class SOAP_CMAC tt__ActionEngineEventPayload
{
public:
	char *RequestInfo;	/* optional element of type SOAP-ENV:Envelope */
	char *ResponseInfo;	/* optional element of type SOAP-ENV:Envelope */
	struct SOAP_ENV__Fault *Fault;	/* optional element of type SOAP-ENV:Fault */
	class tt__ActionEngineEventPayloadExtension *Extension;	/* optional element of type tt:ActionEngineEventPayloadExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 687; } /* = unique id SOAP_TYPE_tt__ActionEngineEventPayload */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ActionEngineEventPayload(): RequestInfo(NULL), ResponseInfo(NULL), Fault(NULL), Extension(NULL), soap(NULL) { tt__ActionEngineEventPayload::soap_default(NULL); }
	virtual ~tt__ActionEngineEventPayload() { }
};
#endif

#ifndef SOAP_TYPE_tt__ActionEngineEventPayloadExtension
#define SOAP_TYPE_tt__ActionEngineEventPayloadExtension (688)
/* tt:ActionEngineEventPayloadExtension */
class SOAP_CMAC tt__ActionEngineEventPayloadExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 688; } /* = unique id SOAP_TYPE_tt__ActionEngineEventPayloadExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ActionEngineEventPayloadExtension(): __any(NULL), soap(NULL) { tt__ActionEngineEventPayloadExtension::soap_default(NULL); }
	virtual ~tt__ActionEngineEventPayloadExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioClassCandidate
#define SOAP_TYPE_tt__AudioClassCandidate (689)
/* tt:AudioClassCandidate */
class SOAP_CMAC tt__AudioClassCandidate
{
public:
	char *Type;	/* required element of type tt:AudioClassType */
	float Likelihood;	/* required element of type xsd:float */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 689; } /* = unique id SOAP_TYPE_tt__AudioClassCandidate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioClassCandidate(): Type(NULL), __any(NULL), soap(NULL) { tt__AudioClassCandidate::soap_default(NULL); }
	virtual ~tt__AudioClassCandidate() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioClassDescriptor
#define SOAP_TYPE_tt__AudioClassDescriptor (690)
/* tt:AudioClassDescriptor */
class SOAP_CMAC tt__AudioClassDescriptor
{
public:
	int __sizeClassCandidate;	/* sequence of elements <ClassCandidate> */
	tt__AudioClassCandidate **ClassCandidate;	/* optional element of type tt:AudioClassCandidate */
	class tt__AudioClassDescriptorExtension *Extension;	/* optional element of type tt:AudioClassDescriptorExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 690; } /* = unique id SOAP_TYPE_tt__AudioClassDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioClassDescriptor(): ClassCandidate(NULL), Extension(NULL), soap(NULL) { tt__AudioClassDescriptor::soap_default(NULL); }
	virtual ~tt__AudioClassDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioClassDescriptorExtension
#define SOAP_TYPE_tt__AudioClassDescriptorExtension (691)
/* tt:AudioClassDescriptorExtension */
class SOAP_CMAC tt__AudioClassDescriptorExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 691; } /* = unique id SOAP_TYPE_tt__AudioClassDescriptorExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioClassDescriptorExtension(): __any(NULL), soap(NULL) { tt__AudioClassDescriptorExtension::soap_default(NULL); }
	virtual ~tt__AudioClassDescriptorExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDPosConfiguration
#define SOAP_TYPE_tt__OSDPosConfiguration (693)
/* tt:OSDPosConfiguration */
class SOAP_CMAC tt__OSDPosConfiguration
{
public:
	char *Type;	/* required element of type xsd:string */
	tt__Vector *Pos;	/* optional element of type tt:Vector */
	class tt__OSDPosConfigurationExtension *Extension;	/* optional element of type tt:OSDPosConfigurationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 693; } /* = unique id SOAP_TYPE_tt__OSDPosConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDPosConfiguration(): Type(NULL), Pos(NULL), Extension(NULL), soap(NULL) { tt__OSDPosConfiguration::soap_default(NULL); }
	virtual ~tt__OSDPosConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDPosConfigurationExtension
#define SOAP_TYPE_tt__OSDPosConfigurationExtension (694)
/* tt:OSDPosConfigurationExtension */
class SOAP_CMAC tt__OSDPosConfigurationExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 694; } /* = unique id SOAP_TYPE_tt__OSDPosConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDPosConfigurationExtension(): __any(NULL), soap(NULL) { tt__OSDPosConfigurationExtension::soap_default(NULL); }
	virtual ~tt__OSDPosConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDColor
#define SOAP_TYPE_tt__OSDColor (695)
/* tt:OSDColor */
class SOAP_CMAC tt__OSDColor
{
public:
	tt__Color *Color;	/* required element of type tt:Color */
	int *Transparent;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 695; } /* = unique id SOAP_TYPE_tt__OSDColor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDColor(): Color(NULL), Transparent(NULL), soap(NULL) { tt__OSDColor::soap_default(NULL); }
	virtual ~tt__OSDColor() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDTextConfiguration
#define SOAP_TYPE_tt__OSDTextConfiguration (696)
/* tt:OSDTextConfiguration */
class SOAP_CMAC tt__OSDTextConfiguration
{
public:
	char *Type;	/* required element of type xsd:string */
	char *DateFormat;	/* optional element of type xsd:string */
	char *TimeFormat;	/* optional element of type xsd:string */
	int *FontSize;	/* optional element of type xsd:int */
	tt__OSDColor *FontColor;	/* optional element of type tt:OSDColor */
	tt__OSDColor *BackgroundColor;	/* optional element of type tt:OSDColor */
	char *PlainText;	/* optional element of type xsd:string */
	class tt__OSDTextConfigurationExtension *Extension;	/* optional element of type tt:OSDTextConfigurationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 696; } /* = unique id SOAP_TYPE_tt__OSDTextConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDTextConfiguration(): Type(NULL), DateFormat(NULL), TimeFormat(NULL), FontSize(NULL), FontColor(NULL), BackgroundColor(NULL), PlainText(NULL), Extension(NULL), soap(NULL) { tt__OSDTextConfiguration::soap_default(NULL); }
	virtual ~tt__OSDTextConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDTextConfigurationExtension
#define SOAP_TYPE_tt__OSDTextConfigurationExtension (697)
/* tt:OSDTextConfigurationExtension */
class SOAP_CMAC tt__OSDTextConfigurationExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 697; } /* = unique id SOAP_TYPE_tt__OSDTextConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDTextConfigurationExtension(): __any(NULL), soap(NULL) { tt__OSDTextConfigurationExtension::soap_default(NULL); }
	virtual ~tt__OSDTextConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDImgConfiguration
#define SOAP_TYPE_tt__OSDImgConfiguration (698)
/* tt:OSDImgConfiguration */
class SOAP_CMAC tt__OSDImgConfiguration
{
public:
	char *ImgPath;	/* required element of type xsd:anyURI */
	class tt__OSDImgConfigurationExtension *Extension;	/* optional element of type tt:OSDImgConfigurationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 698; } /* = unique id SOAP_TYPE_tt__OSDImgConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDImgConfiguration(): ImgPath(NULL), Extension(NULL), soap(NULL) { tt__OSDImgConfiguration::soap_default(NULL); }
	virtual ~tt__OSDImgConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDImgConfigurationExtension
#define SOAP_TYPE_tt__OSDImgConfigurationExtension (699)
/* tt:OSDImgConfigurationExtension */
class SOAP_CMAC tt__OSDImgConfigurationExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 699; } /* = unique id SOAP_TYPE_tt__OSDImgConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDImgConfigurationExtension(): __any(NULL), soap(NULL) { tt__OSDImgConfigurationExtension::soap_default(NULL); }
	virtual ~tt__OSDImgConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ColorspaceRange
#define SOAP_TYPE_tt__ColorspaceRange (700)
/* tt:ColorspaceRange */
class SOAP_CMAC tt__ColorspaceRange
{
public:
	tt__FloatRange *X;	/* required element of type tt:FloatRange */
	tt__FloatRange *Y;	/* required element of type tt:FloatRange */
	tt__FloatRange *Z;	/* required element of type tt:FloatRange */
	char *Colorspace;	/* required element of type xsd:anyURI */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 700; } /* = unique id SOAP_TYPE_tt__ColorspaceRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ColorspaceRange(): X(NULL), Y(NULL), Z(NULL), Colorspace(NULL), soap(NULL) { tt__ColorspaceRange::soap_default(NULL); }
	virtual ~tt__ColorspaceRange() { }
};
#endif

#ifndef SOAP_TYPE_tt__ColorOptions
#define SOAP_TYPE_tt__ColorOptions (701)
/* tt:ColorOptions */
class SOAP_CMAC tt__ColorOptions
{
public:
	int __sizeColorList;	/* sequence of elements <ColorList> */
	tt__Color **ColorList;	/* optional element of type tt:Color */
	int __sizeColorspaceRange;	/* sequence of elements <ColorspaceRange> */
	tt__ColorspaceRange **ColorspaceRange;	/* optional element of type tt:ColorspaceRange */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 701; } /* = unique id SOAP_TYPE_tt__ColorOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ColorOptions(): ColorList(NULL), ColorspaceRange(NULL), soap(NULL) { tt__ColorOptions::soap_default(NULL); }
	virtual ~tt__ColorOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDColorOptions
#define SOAP_TYPE_tt__OSDColorOptions (702)
/* tt:OSDColorOptions */
class SOAP_CMAC tt__OSDColorOptions
{
public:
	tt__ColorOptions *Color;	/* optional element of type tt:ColorOptions */
	tt__IntRange *Transparent;	/* optional element of type tt:IntRange */
	class tt__OSDColorOptionsExtension *Extension;	/* optional element of type tt:OSDColorOptionsExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 702; } /* = unique id SOAP_TYPE_tt__OSDColorOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDColorOptions(): Color(NULL), Transparent(NULL), Extension(NULL), soap(NULL) { tt__OSDColorOptions::soap_default(NULL); }
	virtual ~tt__OSDColorOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDColorOptionsExtension
#define SOAP_TYPE_tt__OSDColorOptionsExtension (703)
/* tt:OSDColorOptionsExtension */
class SOAP_CMAC tt__OSDColorOptionsExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 703; } /* = unique id SOAP_TYPE_tt__OSDColorOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDColorOptionsExtension(): __any(NULL), soap(NULL) { tt__OSDColorOptionsExtension::soap_default(NULL); }
	virtual ~tt__OSDColorOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDTextOptions
#define SOAP_TYPE_tt__OSDTextOptions (704)
/* tt:OSDTextOptions */
class SOAP_CMAC tt__OSDTextOptions
{
public:
	int __sizeType;	/* sequence of elements <Type> */
	char **Type;	/* required element of type xsd:string */
	tt__IntRange *FontSizeRange;	/* optional element of type tt:IntRange */
	int __sizeDateFormat;	/* sequence of elements <DateFormat> */
	char **DateFormat;	/* optional element of type xsd:string */
	int __sizeTimeFormat;	/* sequence of elements <TimeFormat> */
	char **TimeFormat;	/* optional element of type xsd:string */
	tt__OSDColorOptions *FontColor;	/* optional element of type tt:OSDColorOptions */
	tt__OSDColorOptions *BackgroundColor;	/* optional element of type tt:OSDColorOptions */
	class tt__OSDTextOptionsExtension *Extension;	/* optional element of type tt:OSDTextOptionsExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 704; } /* = unique id SOAP_TYPE_tt__OSDTextOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDTextOptions(): Type(NULL), FontSizeRange(NULL), DateFormat(NULL), TimeFormat(NULL), FontColor(NULL), BackgroundColor(NULL), Extension(NULL), soap(NULL) { tt__OSDTextOptions::soap_default(NULL); }
	virtual ~tt__OSDTextOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDTextOptionsExtension
#define SOAP_TYPE_tt__OSDTextOptionsExtension (705)
/* tt:OSDTextOptionsExtension */
class SOAP_CMAC tt__OSDTextOptionsExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 705; } /* = unique id SOAP_TYPE_tt__OSDTextOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDTextOptionsExtension(): __any(NULL), soap(NULL) { tt__OSDTextOptionsExtension::soap_default(NULL); }
	virtual ~tt__OSDTextOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDImgOptions
#define SOAP_TYPE_tt__OSDImgOptions (706)
/* tt:OSDImgOptions */
class SOAP_CMAC tt__OSDImgOptions
{
public:
	int __sizeImagePath;	/* sequence of elements <ImagePath> */
	char **ImagePath;	/* required element of type xsd:anyURI */
	class tt__OSDImgOptionsExtension *Extension;	/* optional element of type tt:OSDImgOptionsExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 706; } /* = unique id SOAP_TYPE_tt__OSDImgOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDImgOptions(): ImagePath(NULL), Extension(NULL), soap(NULL) { tt__OSDImgOptions::soap_default(NULL); }
	virtual ~tt__OSDImgOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDImgOptionsExtension
#define SOAP_TYPE_tt__OSDImgOptionsExtension (707)
/* tt:OSDImgOptionsExtension */
class SOAP_CMAC tt__OSDImgOptionsExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 707; } /* = unique id SOAP_TYPE_tt__OSDImgOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDImgOptionsExtension(): __any(NULL), soap(NULL) { tt__OSDImgOptionsExtension::soap_default(NULL); }
	virtual ~tt__OSDImgOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDConfigurationExtension
#define SOAP_TYPE_tt__OSDConfigurationExtension (709)
/* tt:OSDConfigurationExtension */
class SOAP_CMAC tt__OSDConfigurationExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 709; } /* = unique id SOAP_TYPE_tt__OSDConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDConfigurationExtension(): __any(NULL), soap(NULL) { tt__OSDConfigurationExtension::soap_default(NULL); }
	virtual ~tt__OSDConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__MaximumNumberOfOSDs
#define SOAP_TYPE_tt__MaximumNumberOfOSDs (710)
/* tt:MaximumNumberOfOSDs */
class SOAP_CMAC tt__MaximumNumberOfOSDs
{
public:
	int Total;	/* required attribute */
	int *Image;	/* optional attribute */
	int *PlainText;	/* optional attribute */
	int *Date;	/* optional attribute */
	int *Time;	/* optional attribute */
	int *DateAndTime;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 710; } /* = unique id SOAP_TYPE_tt__MaximumNumberOfOSDs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MaximumNumberOfOSDs(): Image(NULL), PlainText(NULL), Date(NULL), Time(NULL), DateAndTime(NULL), soap(NULL) { tt__MaximumNumberOfOSDs::soap_default(NULL); }
	virtual ~tt__MaximumNumberOfOSDs() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDConfigurationOptions
#define SOAP_TYPE_tt__OSDConfigurationOptions (711)
/* tt:OSDConfigurationOptions */
class SOAP_CMAC tt__OSDConfigurationOptions
{
public:
	tt__MaximumNumberOfOSDs *MaximumNumberOfOSDs;	/* required element of type tt:MaximumNumberOfOSDs */
	int __sizeType;	/* sequence of elements <Type> */
	enum tt__OSDType *Type;	/* required element of type tt:OSDType */
	int __sizePositionOption;	/* sequence of elements <PositionOption> */
	char **PositionOption;	/* required element of type xsd:string */
	tt__OSDTextOptions *TextOption;	/* optional element of type tt:OSDTextOptions */
	tt__OSDImgOptions *ImageOption;	/* optional element of type tt:OSDImgOptions */
	class tt__OSDConfigurationOptionsExtension *Extension;	/* optional element of type tt:OSDConfigurationOptionsExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 711; } /* = unique id SOAP_TYPE_tt__OSDConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDConfigurationOptions(): MaximumNumberOfOSDs(NULL), Type(NULL), PositionOption(NULL), TextOption(NULL), ImageOption(NULL), Extension(NULL), soap(NULL) { tt__OSDConfigurationOptions::soap_default(NULL); }
	virtual ~tt__OSDConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDConfigurationOptionsExtension
#define SOAP_TYPE_tt__OSDConfigurationOptionsExtension (712)
/* tt:OSDConfigurationOptionsExtension */
class SOAP_CMAC tt__OSDConfigurationOptionsExtension
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 712; } /* = unique id SOAP_TYPE_tt__OSDConfigurationOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDConfigurationOptionsExtension(): __any(NULL), soap(NULL) { tt__OSDConfigurationOptionsExtension::soap_default(NULL); }
	virtual ~tt__OSDConfigurationOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE__tt__Message
#define SOAP_TYPE__tt__Message (713)
/* tt:Message */
class SOAP_CMAC _tt__Message
{
public:
	tt__ItemList *Source;	/* optional element of type tt:ItemList */
	tt__ItemList *Key;	/* optional element of type tt:ItemList */
	tt__ItemList *Data;	/* optional element of type tt:ItemList */
	tt__MessageExtension *Extension;	/* optional element of type tt:MessageExtension */
	time_t UtcTime;	/* required attribute */
	enum tt__PropertyOperation *PropertyOperation;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 713; } /* = unique id SOAP_TYPE__tt__Message */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__Message(): Source(NULL), Key(NULL), Data(NULL), Extension(NULL), PropertyOperation(NULL), soap(NULL) { _tt__Message::soap_default(NULL); }
	virtual ~_tt__Message() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__QueryExpressionType
#define SOAP_TYPE_wsnt__QueryExpressionType (716)
/* wsnt:QueryExpressionType */
class SOAP_CMAC wsnt__QueryExpressionType
{
public:
	struct soap_dom_element __any;	/* external */
	char *Dialect;	/* required attribute */
	struct soap_dom_element __mixed;	/* external */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 716; } /* = unique id SOAP_TYPE_wsnt__QueryExpressionType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__QueryExpressionType(): Dialect(NULL), soap(NULL) { wsnt__QueryExpressionType::soap_default(NULL); }
	virtual ~wsnt__QueryExpressionType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__TopicExpressionType
#define SOAP_TYPE_wsnt__TopicExpressionType (717)
/* wsnt:TopicExpressionType */
class SOAP_CMAC wsnt__TopicExpressionType
{
public:
	struct soap_dom_element __any;	/* external */
	char *Dialect;	/* required attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap_dom_element __mixed;	/* external */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 717; } /* = unique id SOAP_TYPE_wsnt__TopicExpressionType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__TopicExpressionType(): Dialect(NULL), soap(NULL) { wsnt__TopicExpressionType::soap_default(NULL); }
	virtual ~wsnt__TopicExpressionType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__FilterType
#define SOAP_TYPE_wsnt__FilterType (718)
/* wsnt:FilterType */
class SOAP_CMAC wsnt__FilterType
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 718; } /* = unique id SOAP_TYPE_wsnt__FilterType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__FilterType(): __any(NULL), soap(NULL) { wsnt__FilterType::soap_default(NULL); }
	virtual ~wsnt__FilterType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__SubscriptionPolicyType
#define SOAP_TYPE_wsnt__SubscriptionPolicyType (719)
/* wsnt:SubscriptionPolicyType */
class SOAP_CMAC wsnt__SubscriptionPolicyType
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 719; } /* = unique id SOAP_TYPE_wsnt__SubscriptionPolicyType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__SubscriptionPolicyType(): __any(NULL), soap(NULL) { wsnt__SubscriptionPolicyType::soap_default(NULL); }
	virtual ~wsnt__SubscriptionPolicyType() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__NotificationMessageHolderType_Message
#define SOAP_TYPE__wsnt__NotificationMessageHolderType_Message (1489)
/* wsnt:NotificationMessageHolderType-Message */
class SOAP_CMAC _wsnt__NotificationMessageHolderType_Message
{
public:
	struct soap_dom_element __any;	/* external */
public:
	virtual int soap_type() const { return 1489; } /* = unique id SOAP_TYPE__wsnt__NotificationMessageHolderType_Message */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__NotificationMessageHolderType_Message() { _wsnt__NotificationMessageHolderType_Message::soap_default(NULL); }
	virtual ~_wsnt__NotificationMessageHolderType_Message() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__NotificationMessageHolderType
#define SOAP_TYPE_wsnt__NotificationMessageHolderType (720)
/* wsnt:NotificationMessageHolderType */
class SOAP_CMAC wsnt__NotificationMessageHolderType
{
public:
	class wsa5__EndpointReferenceType *SubscriptionReference;	/* optional element of type wsa5:EndpointReferenceType */
	wsnt__TopicExpressionType *Topic;	/* optional element of type wsnt:TopicExpressionType */
	wsa5__EndpointReferenceType *ProducerReference;	/* optional element of type wsa5:EndpointReferenceType */
	_wsnt__NotificationMessageHolderType_Message Message;	/* required element of type wsnt:NotificationMessageHolderType-Message */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 720; } /* = unique id SOAP_TYPE_wsnt__NotificationMessageHolderType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__NotificationMessageHolderType(): SubscriptionReference(NULL), Topic(NULL), ProducerReference(NULL), soap(NULL) { wsnt__NotificationMessageHolderType::soap_default(NULL); }
	virtual ~wsnt__NotificationMessageHolderType() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__NotificationProducerRP
#define SOAP_TYPE__wsnt__NotificationProducerRP (741)
/* wsnt:NotificationProducerRP */
class SOAP_CMAC _wsnt__NotificationProducerRP
{
public:
	int __sizeTopicExpression;	/* sequence of elements <TopicExpression> */
	wsnt__TopicExpressionType **TopicExpression;	/* optional element of type wsnt:TopicExpressionType */
	bool *FixedTopicSet;	/* optional element of type xsd:boolean */
	int __sizeTopicExpressionDialect;	/* sequence of elements <TopicExpressionDialect> */
	char **TopicExpressionDialect;	/* optional element of type xsd:anyURI */
	class wstop__TopicSetType *wstop__TopicSet;	/* optional element of type wstop:TopicSetType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 741; } /* = unique id SOAP_TYPE__wsnt__NotificationProducerRP */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__NotificationProducerRP(): TopicExpression(NULL), FixedTopicSet(NULL), TopicExpressionDialect(NULL), wstop__TopicSet(NULL), soap(NULL) { _wsnt__NotificationProducerRP::soap_default(NULL); }
	virtual ~_wsnt__NotificationProducerRP() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__SubscriptionManagerRP
#define SOAP_TYPE__wsnt__SubscriptionManagerRP (742)
/* wsnt:SubscriptionManagerRP */
class SOAP_CMAC _wsnt__SubscriptionManagerRP
{
public:
	wsa5__EndpointReferenceType *ConsumerReference;	/* required element of type wsa5:EndpointReferenceType */
	wsnt__FilterType *Filter;	/* optional element of type wsnt:FilterType */
	wsnt__SubscriptionPolicyType *SubscriptionPolicy;	/* optional element of type wsnt:SubscriptionPolicyType */
	time_t *CreationTime;	/* optional element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 742; } /* = unique id SOAP_TYPE__wsnt__SubscriptionManagerRP */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__SubscriptionManagerRP(): ConsumerReference(NULL), Filter(NULL), SubscriptionPolicy(NULL), CreationTime(NULL), soap(NULL) { _wsnt__SubscriptionManagerRP::soap_default(NULL); }
	virtual ~_wsnt__SubscriptionManagerRP() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__Notify
#define SOAP_TYPE__wsnt__Notify (743)
/* wsnt:Notify */
class SOAP_CMAC _wsnt__Notify
{
public:
	int __sizeNotificationMessage;	/* sequence of elements <NotificationMessage> */
	wsnt__NotificationMessageHolderType **NotificationMessage;	/* required element of type wsnt:NotificationMessageHolderType */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 743; } /* = unique id SOAP_TYPE__wsnt__Notify */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__Notify(): NotificationMessage(NULL), __any(NULL), soap(NULL) { _wsnt__Notify::soap_default(NULL); }
	virtual ~_wsnt__Notify() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__UseRaw
#define SOAP_TYPE__wsnt__UseRaw (744)
/* wsnt:UseRaw */
class SOAP_CMAC _wsnt__UseRaw
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 744; } /* = unique id SOAP_TYPE__wsnt__UseRaw */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__UseRaw(): soap(NULL) { _wsnt__UseRaw::soap_default(NULL); }
	virtual ~_wsnt__UseRaw() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy
#define SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy (1494)
/* wsnt:Subscribe-SubscriptionPolicy */
class SOAP_CMAC _wsnt__Subscribe_SubscriptionPolicy
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
public:
	virtual int soap_type() const { return 1494; } /* = unique id SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__Subscribe_SubscriptionPolicy(): __any(NULL) { _wsnt__Subscribe_SubscriptionPolicy::soap_default(NULL); }
	virtual ~_wsnt__Subscribe_SubscriptionPolicy() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__Subscribe
#define SOAP_TYPE__wsnt__Subscribe (745)
/* wsnt:Subscribe */
class SOAP_CMAC _wsnt__Subscribe
{
public:
	wsa5__EndpointReferenceType *ConsumerReference;	/* required element of type wsa5:EndpointReferenceType */
	wsnt__FilterType *Filter;	/* optional element of type wsnt:FilterType */
	char *InitialTerminationTime;	/* optional element of type wsnt:AbsoluteOrRelativeTimeType */
	_wsnt__Subscribe_SubscriptionPolicy *SubscriptionPolicy;	/* optional element of type wsnt:Subscribe-SubscriptionPolicy */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 745; } /* = unique id SOAP_TYPE__wsnt__Subscribe */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__Subscribe(): ConsumerReference(NULL), Filter(NULL), InitialTerminationTime(NULL), SubscriptionPolicy(NULL), __any(NULL), soap(NULL) { _wsnt__Subscribe::soap_default(NULL); }
	virtual ~_wsnt__Subscribe() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__SubscribeResponse
#define SOAP_TYPE__wsnt__SubscribeResponse (746)
/* wsnt:SubscribeResponse */
class SOAP_CMAC _wsnt__SubscribeResponse
{
public:
	wsa5__EndpointReferenceType *SubscriptionReference;	/* required element of type wsa5:EndpointReferenceType */
	time_t *CurrentTime;	/* optional element of type xsd:dateTime */
	time_t *TerminationTime;	/* optional element of type xsd:dateTime */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 746; } /* = unique id SOAP_TYPE__wsnt__SubscribeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__SubscribeResponse(): SubscriptionReference(NULL), CurrentTime(NULL), TerminationTime(NULL), __any(NULL), soap(NULL) { _wsnt__SubscribeResponse::soap_default(NULL); }
	virtual ~_wsnt__SubscribeResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__GetCurrentMessage
#define SOAP_TYPE__wsnt__GetCurrentMessage (747)
/* wsnt:GetCurrentMessage */
class SOAP_CMAC _wsnt__GetCurrentMessage
{
public:
	wsnt__TopicExpressionType *Topic;	/* required element of type wsnt:TopicExpressionType */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 747; } /* = unique id SOAP_TYPE__wsnt__GetCurrentMessage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__GetCurrentMessage(): Topic(NULL), __any(NULL), soap(NULL) { _wsnt__GetCurrentMessage::soap_default(NULL); }
	virtual ~_wsnt__GetCurrentMessage() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__GetCurrentMessageResponse
#define SOAP_TYPE__wsnt__GetCurrentMessageResponse (748)
/* wsnt:GetCurrentMessageResponse */
class SOAP_CMAC _wsnt__GetCurrentMessageResponse
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 748; } /* = unique id SOAP_TYPE__wsnt__GetCurrentMessageResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__GetCurrentMessageResponse(): __any(NULL), soap(NULL) { _wsnt__GetCurrentMessageResponse::soap_default(NULL); }
	virtual ~_wsnt__GetCurrentMessageResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__GetMessages
#define SOAP_TYPE__wsnt__GetMessages (749)
/* wsnt:GetMessages */
class SOAP_CMAC _wsnt__GetMessages
{
public:
	char *MaximumNumber;	/* optional element of type xsd:nonNegativeInteger */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 749; } /* = unique id SOAP_TYPE__wsnt__GetMessages */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__GetMessages(): MaximumNumber(NULL), __any(NULL), soap(NULL) { _wsnt__GetMessages::soap_default(NULL); }
	virtual ~_wsnt__GetMessages() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__GetMessagesResponse
#define SOAP_TYPE__wsnt__GetMessagesResponse (750)
/* wsnt:GetMessagesResponse */
class SOAP_CMAC _wsnt__GetMessagesResponse
{
public:
	int __sizeNotificationMessage;	/* sequence of elements <NotificationMessage> */
	wsnt__NotificationMessageHolderType **NotificationMessage;	/* optional element of type wsnt:NotificationMessageHolderType */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 750; } /* = unique id SOAP_TYPE__wsnt__GetMessagesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__GetMessagesResponse(): NotificationMessage(NULL), __any(NULL), soap(NULL) { _wsnt__GetMessagesResponse::soap_default(NULL); }
	virtual ~_wsnt__GetMessagesResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__DestroyPullPoint
#define SOAP_TYPE__wsnt__DestroyPullPoint (751)
/* wsnt:DestroyPullPoint */
class SOAP_CMAC _wsnt__DestroyPullPoint
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 751; } /* = unique id SOAP_TYPE__wsnt__DestroyPullPoint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__DestroyPullPoint(): __any(NULL), soap(NULL) { _wsnt__DestroyPullPoint::soap_default(NULL); }
	virtual ~_wsnt__DestroyPullPoint() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__DestroyPullPointResponse
#define SOAP_TYPE__wsnt__DestroyPullPointResponse (752)
/* wsnt:DestroyPullPointResponse */
class SOAP_CMAC _wsnt__DestroyPullPointResponse
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 752; } /* = unique id SOAP_TYPE__wsnt__DestroyPullPointResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__DestroyPullPointResponse(): __any(NULL), soap(NULL) { _wsnt__DestroyPullPointResponse::soap_default(NULL); }
	virtual ~_wsnt__DestroyPullPointResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__CreatePullPoint
#define SOAP_TYPE__wsnt__CreatePullPoint (753)
/* wsnt:CreatePullPoint */
class SOAP_CMAC _wsnt__CreatePullPoint
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 753; } /* = unique id SOAP_TYPE__wsnt__CreatePullPoint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__CreatePullPoint(): __any(NULL), soap(NULL) { _wsnt__CreatePullPoint::soap_default(NULL); }
	virtual ~_wsnt__CreatePullPoint() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__CreatePullPointResponse
#define SOAP_TYPE__wsnt__CreatePullPointResponse (754)
/* wsnt:CreatePullPointResponse */
class SOAP_CMAC _wsnt__CreatePullPointResponse
{
public:
	wsa5__EndpointReferenceType *PullPoint;	/* required element of type wsa5:EndpointReferenceType */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 754; } /* = unique id SOAP_TYPE__wsnt__CreatePullPointResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__CreatePullPointResponse(): PullPoint(NULL), __any(NULL), soap(NULL) { _wsnt__CreatePullPointResponse::soap_default(NULL); }
	virtual ~_wsnt__CreatePullPointResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__Renew
#define SOAP_TYPE__wsnt__Renew (755)
/* wsnt:Renew */
class SOAP_CMAC _wsnt__Renew
{
public:
	char *TerminationTime;	/* required element of type wsnt:AbsoluteOrRelativeTimeType */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 755; } /* = unique id SOAP_TYPE__wsnt__Renew */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__Renew(): TerminationTime(NULL), __any(NULL), soap(NULL) { _wsnt__Renew::soap_default(NULL); }
	virtual ~_wsnt__Renew() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__RenewResponse
#define SOAP_TYPE__wsnt__RenewResponse (756)
/* wsnt:RenewResponse */
class SOAP_CMAC _wsnt__RenewResponse
{
public:
	time_t TerminationTime;	/* required element of type xsd:dateTime */
	time_t *CurrentTime;	/* optional element of type xsd:dateTime */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 756; } /* = unique id SOAP_TYPE__wsnt__RenewResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__RenewResponse(): CurrentTime(NULL), __any(NULL), soap(NULL) { _wsnt__RenewResponse::soap_default(NULL); }
	virtual ~_wsnt__RenewResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__Unsubscribe
#define SOAP_TYPE__wsnt__Unsubscribe (757)
/* wsnt:Unsubscribe */
class SOAP_CMAC _wsnt__Unsubscribe
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 757; } /* = unique id SOAP_TYPE__wsnt__Unsubscribe */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__Unsubscribe(): __any(NULL), soap(NULL) { _wsnt__Unsubscribe::soap_default(NULL); }
	virtual ~_wsnt__Unsubscribe() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__UnsubscribeResponse
#define SOAP_TYPE__wsnt__UnsubscribeResponse (758)
/* wsnt:UnsubscribeResponse */
class SOAP_CMAC _wsnt__UnsubscribeResponse
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 758; } /* = unique id SOAP_TYPE__wsnt__UnsubscribeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__UnsubscribeResponse(): __any(NULL), soap(NULL) { _wsnt__UnsubscribeResponse::soap_default(NULL); }
	virtual ~_wsnt__UnsubscribeResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__PauseSubscription
#define SOAP_TYPE__wsnt__PauseSubscription (759)
/* wsnt:PauseSubscription */
class SOAP_CMAC _wsnt__PauseSubscription
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 759; } /* = unique id SOAP_TYPE__wsnt__PauseSubscription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__PauseSubscription(): __any(NULL), soap(NULL) { _wsnt__PauseSubscription::soap_default(NULL); }
	virtual ~_wsnt__PauseSubscription() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__PauseSubscriptionResponse
#define SOAP_TYPE__wsnt__PauseSubscriptionResponse (760)
/* wsnt:PauseSubscriptionResponse */
class SOAP_CMAC _wsnt__PauseSubscriptionResponse
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 760; } /* = unique id SOAP_TYPE__wsnt__PauseSubscriptionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__PauseSubscriptionResponse(): __any(NULL), soap(NULL) { _wsnt__PauseSubscriptionResponse::soap_default(NULL); }
	virtual ~_wsnt__PauseSubscriptionResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__ResumeSubscription
#define SOAP_TYPE__wsnt__ResumeSubscription (761)
/* wsnt:ResumeSubscription */
class SOAP_CMAC _wsnt__ResumeSubscription
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 761; } /* = unique id SOAP_TYPE__wsnt__ResumeSubscription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__ResumeSubscription(): __any(NULL), soap(NULL) { _wsnt__ResumeSubscription::soap_default(NULL); }
	virtual ~_wsnt__ResumeSubscription() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__ResumeSubscriptionResponse
#define SOAP_TYPE__wsnt__ResumeSubscriptionResponse (762)
/* wsnt:ResumeSubscriptionResponse */
class SOAP_CMAC _wsnt__ResumeSubscriptionResponse
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 762; } /* = unique id SOAP_TYPE__wsnt__ResumeSubscriptionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__ResumeSubscriptionResponse(): __any(NULL), soap(NULL) { _wsnt__ResumeSubscriptionResponse::soap_default(NULL); }
	virtual ~_wsnt__ResumeSubscriptionResponse() { }
};
#endif

#ifndef SOAP_TYPE_wsa5__EndpointReferenceType
#define SOAP_TYPE_wsa5__EndpointReferenceType (764)
/* wsa5:EndpointReferenceType */
class SOAP_CMAC wsa5__EndpointReferenceType
{
public:
	class wsa5__AttributedURIType *Address;	/* required element of type wsa5:AttributedURIType */
	class wsa5__ReferenceParametersType *ReferenceParameters;	/* optional element of type wsa5:ReferenceParametersType */
	class wsa5__MetadataType *Metadata;	/* optional element of type wsa5:MetadataType */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 764; } /* = unique id SOAP_TYPE_wsa5__EndpointReferenceType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsa5__EndpointReferenceType(): Address(NULL), ReferenceParameters(NULL), Metadata(NULL), __any(NULL), soap(NULL) { wsa5__EndpointReferenceType::soap_default(NULL); }
	virtual ~wsa5__EndpointReferenceType() { }
};
#endif

#ifndef SOAP_TYPE_wsa5__ReferenceParametersType
#define SOAP_TYPE_wsa5__ReferenceParametersType (765)
/* wsa5:ReferenceParametersType */
class SOAP_CMAC wsa5__ReferenceParametersType
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 765; } /* = unique id SOAP_TYPE_wsa5__ReferenceParametersType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsa5__ReferenceParametersType(): __any(NULL), soap(NULL) { wsa5__ReferenceParametersType::soap_default(NULL); }
	virtual ~wsa5__ReferenceParametersType() { }
};
#endif

#ifndef SOAP_TYPE_wsa5__MetadataType
#define SOAP_TYPE_wsa5__MetadataType (766)
/* wsa5:MetadataType */
class SOAP_CMAC wsa5__MetadataType
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 766; } /* = unique id SOAP_TYPE_wsa5__MetadataType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsa5__MetadataType(): __any(NULL), soap(NULL) { wsa5__MetadataType::soap_default(NULL); }
	virtual ~wsa5__MetadataType() { }
};
#endif

#ifndef SOAP_TYPE_wsa5__AttributedAnyType
#define SOAP_TYPE_wsa5__AttributedAnyType (771)
/* wsa5:AttributedAnyType */
class SOAP_CMAC wsa5__AttributedAnyType
{
public:
	struct soap_dom_element __any;	/* external */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 771; } /* = unique id SOAP_TYPE_wsa5__AttributedAnyType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsa5__AttributedAnyType(): soap(NULL) { wsa5__AttributedAnyType::soap_default(NULL); }
	virtual ~wsa5__AttributedAnyType() { }
};
#endif

#ifndef SOAP_TYPE_wsa5__ProblemActionType
#define SOAP_TYPE_wsa5__ProblemActionType (772)
/* wsa5:ProblemActionType */
class SOAP_CMAC wsa5__ProblemActionType
{
public:
	wsa5__AttributedURIType *Action;	/* optional element of type wsa5:AttributedURIType */
	char *SoapAction;	/* optional element of type xsd:anyURI */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 772; } /* = unique id SOAP_TYPE_wsa5__ProblemActionType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsa5__ProblemActionType(): Action(NULL), SoapAction(NULL), soap(NULL) { wsa5__ProblemActionType::soap_default(NULL); }
	virtual ~wsa5__ProblemActionType() { }
};
#endif

#ifndef SOAP_TYPE__wsbf__BaseFaultType_ErrorCode
#define SOAP_TYPE__wsbf__BaseFaultType_ErrorCode (1499)
/* wsbf:BaseFaultType-ErrorCode */
class SOAP_CMAC _wsbf__BaseFaultType_ErrorCode
{
public:
	char *dialect;	/* required attribute */
public:
	virtual int soap_type() const { return 1499; } /* = unique id SOAP_TYPE__wsbf__BaseFaultType_ErrorCode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsbf__BaseFaultType_ErrorCode(): dialect(NULL) { _wsbf__BaseFaultType_ErrorCode::soap_default(NULL); }
	virtual ~_wsbf__BaseFaultType_ErrorCode() { }
};
#endif

#ifndef SOAP_TYPE__wsbf__BaseFaultType_Description
#define SOAP_TYPE__wsbf__BaseFaultType_Description (1501)
/* Primitive wsbf:BaseFaultType-Description schema type: */
class SOAP_CMAC _wsbf__BaseFaultType_Description
{
public:
	char *__item;
	char *xml__lang;	/* optional attribute */
public:
	virtual int soap_type() const { return 1501; } /* = unique id SOAP_TYPE__wsbf__BaseFaultType_Description */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsbf__BaseFaultType_Description(): __item(NULL), xml__lang(NULL) { _wsbf__BaseFaultType_Description::soap_default(NULL); }
	virtual ~_wsbf__BaseFaultType_Description() { }
};
#endif

#ifndef SOAP_TYPE__wsbf__BaseFaultType_FaultCause
#define SOAP_TYPE__wsbf__BaseFaultType_FaultCause (1503)
/* wsbf:BaseFaultType-FaultCause */
class SOAP_CMAC _wsbf__BaseFaultType_FaultCause
{
public:
	struct soap_dom_element __any;	/* external */
public:
	virtual int soap_type() const { return 1503; } /* = unique id SOAP_TYPE__wsbf__BaseFaultType_FaultCause */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsbf__BaseFaultType_FaultCause() { _wsbf__BaseFaultType_FaultCause::soap_default(NULL); }
	virtual ~_wsbf__BaseFaultType_FaultCause() { }
};
#endif

#ifndef SOAP_TYPE_wsbf__BaseFaultType
#define SOAP_TYPE_wsbf__BaseFaultType (773)
/* wsbf:BaseFaultType */
class SOAP_CMAC wsbf__BaseFaultType
{
public:
	time_t Timestamp;	/* required element of type xsd:dateTime */
	wsa5__EndpointReferenceType *Originator;	/* optional element of type wsa5:EndpointReferenceType */
	_wsbf__BaseFaultType_ErrorCode *ErrorCode;	/* optional element of type wsbf:BaseFaultType-ErrorCode */
	int __sizeDescription;	/* sequence of elements <Description> */
	_wsbf__BaseFaultType_Description *Description;	/* optional element of type wsbf:BaseFaultType-Description */
	_wsbf__BaseFaultType_FaultCause *FaultCause;	/* optional element of type wsbf:BaseFaultType-FaultCause */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 773; } /* = unique id SOAP_TYPE_wsbf__BaseFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsbf__BaseFaultType(): Originator(NULL), ErrorCode(NULL), Description(NULL), FaultCause(NULL), __any(NULL), soap(NULL) { wsbf__BaseFaultType::soap_default(NULL); }
	virtual ~wsbf__BaseFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wstop__Documentation
#define SOAP_TYPE_wstop__Documentation (774)
/* wstop:Documentation */
class SOAP_CMAC wstop__Documentation
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_element __mixed;	/* external */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 774; } /* = unique id SOAP_TYPE_wstop__Documentation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__Documentation(): __any(NULL), soap(NULL) { wstop__Documentation::soap_default(NULL); }
	virtual ~wstop__Documentation() { }
};
#endif

#ifndef SOAP_TYPE_wstop__ExtensibleDocumented
#define SOAP_TYPE_wstop__ExtensibleDocumented (775)
/* wstop:ExtensibleDocumented */
class SOAP_CMAC wstop__ExtensibleDocumented
{
public:
	wstop__Documentation *documentation;	/* optional element of type wstop:Documentation */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 775; } /* = unique id SOAP_TYPE_wstop__ExtensibleDocumented */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__ExtensibleDocumented(): documentation(NULL), soap(NULL) { wstop__ExtensibleDocumented::soap_default(NULL); }
	virtual ~wstop__ExtensibleDocumented() { }
};
#endif

#ifndef SOAP_TYPE_wstop__QueryExpressionType
#define SOAP_TYPE_wstop__QueryExpressionType (776)
/* wstop:QueryExpressionType */
class SOAP_CMAC wstop__QueryExpressionType
{
public:
	struct soap_dom_element __any;	/* external */
	char *Dialect;	/* required attribute */
	struct soap_dom_element __mixed;	/* external */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 776; } /* = unique id SOAP_TYPE_wstop__QueryExpressionType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__QueryExpressionType(): Dialect(NULL), soap(NULL) { wstop__QueryExpressionType::soap_default(NULL); }
	virtual ~wstop__QueryExpressionType() { }
};
#endif

#ifndef SOAP_TYPE_tptz__Capabilities
#define SOAP_TYPE_tptz__Capabilities (780)
/* tptz:Capabilities */
class SOAP_CMAC tptz__Capabilities
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	bool *EFlip;	/* optional attribute */
	bool *Reverse;	/* optional attribute */
	bool *GetCompatibleConfigurations;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 780; } /* = unique id SOAP_TYPE_tptz__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tptz__Capabilities(): __any(NULL), EFlip(NULL), Reverse(NULL), GetCompatibleConfigurations(NULL), soap(NULL) { tptz__Capabilities::soap_default(NULL); }
	virtual ~tptz__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetServiceCapabilities
#define SOAP_TYPE__tptz__GetServiceCapabilities (781)
/* tptz:GetServiceCapabilities */
class SOAP_CMAC _tptz__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 781; } /* = unique id SOAP_TYPE__tptz__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetServiceCapabilities(): soap(NULL) { _tptz__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_tptz__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetServiceCapabilitiesResponse
#define SOAP_TYPE__tptz__GetServiceCapabilitiesResponse (782)
/* tptz:GetServiceCapabilitiesResponse */
class SOAP_CMAC _tptz__GetServiceCapabilitiesResponse
{
public:
	tptz__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tptz:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 782; } /* = unique id SOAP_TYPE__tptz__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetServiceCapabilitiesResponse(): Capabilities(NULL), soap(NULL) { _tptz__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_tptz__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetNodes
#define SOAP_TYPE__tptz__GetNodes (783)
/* tptz:GetNodes */
class SOAP_CMAC _tptz__GetNodes
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 783; } /* = unique id SOAP_TYPE__tptz__GetNodes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetNodes(): soap(NULL) { _tptz__GetNodes::soap_default(NULL); }
	virtual ~_tptz__GetNodes() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetNodesResponse
#define SOAP_TYPE__tptz__GetNodesResponse (784)
/* tptz:GetNodesResponse */
class SOAP_CMAC _tptz__GetNodesResponse
{
public:
	int __sizePTZNode;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <PTZNode> */
	class tt__PTZNode **PTZNode;	/* optional element of type tt:PTZNode */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 784; } /* = unique id SOAP_TYPE__tptz__GetNodesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetNodesResponse(): PTZNode(NULL), soap(NULL) { _tptz__GetNodesResponse::soap_default(NULL); }
	virtual ~_tptz__GetNodesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetNode
#define SOAP_TYPE__tptz__GetNode (785)
/* tptz:GetNode */
class SOAP_CMAC _tptz__GetNode
{
public:
	char *NodeToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 785; } /* = unique id SOAP_TYPE__tptz__GetNode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetNode(): NodeToken(NULL), soap(NULL) { _tptz__GetNode::soap_default(NULL); }
	virtual ~_tptz__GetNode() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetNodeResponse
#define SOAP_TYPE__tptz__GetNodeResponse (786)
/* tptz:GetNodeResponse */
class SOAP_CMAC _tptz__GetNodeResponse
{
public:
	tt__PTZNode *PTZNode;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:PTZNode */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 786; } /* = unique id SOAP_TYPE__tptz__GetNodeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetNodeResponse(): PTZNode(NULL), soap(NULL) { _tptz__GetNodeResponse::soap_default(NULL); }
	virtual ~_tptz__GetNodeResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetConfigurations
#define SOAP_TYPE__tptz__GetConfigurations (787)
/* tptz:GetConfigurations */
class SOAP_CMAC _tptz__GetConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 787; } /* = unique id SOAP_TYPE__tptz__GetConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetConfigurations(): soap(NULL) { _tptz__GetConfigurations::soap_default(NULL); }
	virtual ~_tptz__GetConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetConfigurationsResponse
#define SOAP_TYPE__tptz__GetConfigurationsResponse (788)
/* tptz:GetConfigurationsResponse */
class SOAP_CMAC _tptz__GetConfigurationsResponse
{
public:
	int __sizePTZConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <PTZConfiguration> */
	tt__PTZConfiguration **PTZConfiguration;	/* optional element of type tt:PTZConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 788; } /* = unique id SOAP_TYPE__tptz__GetConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetConfigurationsResponse(): PTZConfiguration(NULL), soap(NULL) { _tptz__GetConfigurationsResponse::soap_default(NULL); }
	virtual ~_tptz__GetConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetConfiguration
#define SOAP_TYPE__tptz__GetConfiguration (789)
/* tptz:GetConfiguration */
class SOAP_CMAC _tptz__GetConfiguration
{
public:
	char *PTZConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 789; } /* = unique id SOAP_TYPE__tptz__GetConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetConfiguration(): PTZConfigurationToken(NULL), soap(NULL) { _tptz__GetConfiguration::soap_default(NULL); }
	virtual ~_tptz__GetConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetConfigurationResponse
#define SOAP_TYPE__tptz__GetConfigurationResponse (790)
/* tptz:GetConfigurationResponse */
class SOAP_CMAC _tptz__GetConfigurationResponse
{
public:
	tt__PTZConfiguration *PTZConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:PTZConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 790; } /* = unique id SOAP_TYPE__tptz__GetConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetConfigurationResponse(): PTZConfiguration(NULL), soap(NULL) { _tptz__GetConfigurationResponse::soap_default(NULL); }
	virtual ~_tptz__GetConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__SetConfiguration
#define SOAP_TYPE__tptz__SetConfiguration (791)
/* tptz:SetConfiguration */
class SOAP_CMAC _tptz__SetConfiguration
{
public:
	tt__PTZConfiguration *PTZConfiguration;	/* required element of type tt:PTZConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 791; } /* = unique id SOAP_TYPE__tptz__SetConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__SetConfiguration(): PTZConfiguration(NULL), soap(NULL) { _tptz__SetConfiguration::soap_default(NULL); }
	virtual ~_tptz__SetConfiguration() { }
};
#endif

#ifndef SOAP_TYPE___tptz__SetConfigurationResponse_sequence
#define SOAP_TYPE___tptz__SetConfigurationResponse_sequence (1510)
/* Operation wrapper: */
class SOAP_CMAC __tptz__SetConfigurationResponse_sequence
{
public:
	virtual int soap_type() const { return 1510; } /* = unique id SOAP_TYPE___tptz__SetConfigurationResponse_sequence */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __tptz__SetConfigurationResponse_sequence() { __tptz__SetConfigurationResponse_sequence::soap_default(NULL); }
	virtual ~__tptz__SetConfigurationResponse_sequence() { }
};
#endif

#ifndef SOAP_TYPE__tptz__SetConfigurationResponse
#define SOAP_TYPE__tptz__SetConfigurationResponse (792)
/* tptz:SetConfigurationResponse */
class SOAP_CMAC _tptz__SetConfigurationResponse
{
public:
	int __size_SetConfigurationResponse_sequence;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <-SetConfigurationResponse-sequence> */
	__tptz__SetConfigurationResponse_sequence *__SetConfigurationResponse_sequence;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 792; } /* = unique id SOAP_TYPE__tptz__SetConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__SetConfigurationResponse(): __SetConfigurationResponse_sequence(NULL), soap(NULL) { _tptz__SetConfigurationResponse::soap_default(NULL); }
	virtual ~_tptz__SetConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetConfigurationOptions
#define SOAP_TYPE__tptz__GetConfigurationOptions (793)
/* tptz:GetConfigurationOptions */
class SOAP_CMAC _tptz__GetConfigurationOptions
{
public:
	char *ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 793; } /* = unique id SOAP_TYPE__tptz__GetConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetConfigurationOptions(): ConfigurationToken(NULL), soap(NULL) { _tptz__GetConfigurationOptions::soap_default(NULL); }
	virtual ~_tptz__GetConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetConfigurationOptionsResponse
#define SOAP_TYPE__tptz__GetConfigurationOptionsResponse (794)
/* tptz:GetConfigurationOptionsResponse */
class SOAP_CMAC _tptz__GetConfigurationOptionsResponse
{
public:
	tt__PTZConfigurationOptions *PTZConfigurationOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:PTZConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 794; } /* = unique id SOAP_TYPE__tptz__GetConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetConfigurationOptionsResponse(): PTZConfigurationOptions(NULL), soap(NULL) { _tptz__GetConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_tptz__GetConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__SendAuxiliaryCommand
#define SOAP_TYPE__tptz__SendAuxiliaryCommand (795)
/* tptz:SendAuxiliaryCommand */
class SOAP_CMAC _tptz__SendAuxiliaryCommand
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	char *AuxiliaryData;	/* required element of type tt:AuxiliaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 795; } /* = unique id SOAP_TYPE__tptz__SendAuxiliaryCommand */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__SendAuxiliaryCommand(): ProfileToken(NULL), AuxiliaryData(NULL), soap(NULL) { _tptz__SendAuxiliaryCommand::soap_default(NULL); }
	virtual ~_tptz__SendAuxiliaryCommand() { }
};
#endif

#ifndef SOAP_TYPE__tptz__SendAuxiliaryCommandResponse
#define SOAP_TYPE__tptz__SendAuxiliaryCommandResponse (796)
/* tptz:SendAuxiliaryCommandResponse */
class SOAP_CMAC _tptz__SendAuxiliaryCommandResponse
{
public:
	char *AuxiliaryResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AuxiliaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 796; } /* = unique id SOAP_TYPE__tptz__SendAuxiliaryCommandResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__SendAuxiliaryCommandResponse(): AuxiliaryResponse(NULL), soap(NULL) { _tptz__SendAuxiliaryCommandResponse::soap_default(NULL); }
	virtual ~_tptz__SendAuxiliaryCommandResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetPresets
#define SOAP_TYPE__tptz__GetPresets (797)
/* tptz:GetPresets */
class SOAP_CMAC _tptz__GetPresets
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 797; } /* = unique id SOAP_TYPE__tptz__GetPresets */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetPresets(): ProfileToken(NULL), soap(NULL) { _tptz__GetPresets::soap_default(NULL); }
	virtual ~_tptz__GetPresets() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetPresetsResponse
#define SOAP_TYPE__tptz__GetPresetsResponse (798)
/* tptz:GetPresetsResponse */
class SOAP_CMAC _tptz__GetPresetsResponse
{
public:
	int __sizePreset;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <Preset> */
	tt__PTZPreset **Preset;	/* optional element of type tt:PTZPreset */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 798; } /* = unique id SOAP_TYPE__tptz__GetPresetsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetPresetsResponse(): Preset(NULL), soap(NULL) { _tptz__GetPresetsResponse::soap_default(NULL); }
	virtual ~_tptz__GetPresetsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__SetPreset
#define SOAP_TYPE__tptz__SetPreset (799)
/* tptz:SetPreset */
class SOAP_CMAC _tptz__SetPreset
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	char *PresetName;	/* optional element of type xsd:string */
	char *PresetToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 799; } /* = unique id SOAP_TYPE__tptz__SetPreset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__SetPreset(): ProfileToken(NULL), PresetName(NULL), PresetToken(NULL), soap(NULL) { _tptz__SetPreset::soap_default(NULL); }
	virtual ~_tptz__SetPreset() { }
};
#endif

#ifndef SOAP_TYPE__tptz__SetPresetResponse
#define SOAP_TYPE__tptz__SetPresetResponse (800)
/* tptz:SetPresetResponse */
class SOAP_CMAC _tptz__SetPresetResponse
{
public:
	char *PresetToken;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 800; } /* = unique id SOAP_TYPE__tptz__SetPresetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__SetPresetResponse(): PresetToken(NULL), soap(NULL) { _tptz__SetPresetResponse::soap_default(NULL); }
	virtual ~_tptz__SetPresetResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__RemovePreset
#define SOAP_TYPE__tptz__RemovePreset (801)
/* tptz:RemovePreset */
class SOAP_CMAC _tptz__RemovePreset
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	char *PresetToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 801; } /* = unique id SOAP_TYPE__tptz__RemovePreset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__RemovePreset(): ProfileToken(NULL), PresetToken(NULL), soap(NULL) { _tptz__RemovePreset::soap_default(NULL); }
	virtual ~_tptz__RemovePreset() { }
};
#endif

#ifndef SOAP_TYPE__tptz__RemovePresetResponse
#define SOAP_TYPE__tptz__RemovePresetResponse (802)
/* tptz:RemovePresetResponse */
class SOAP_CMAC _tptz__RemovePresetResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 802; } /* = unique id SOAP_TYPE__tptz__RemovePresetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__RemovePresetResponse(): soap(NULL) { _tptz__RemovePresetResponse::soap_default(NULL); }
	virtual ~_tptz__RemovePresetResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GotoPreset
#define SOAP_TYPE__tptz__GotoPreset (803)
/* tptz:GotoPreset */
class SOAP_CMAC _tptz__GotoPreset
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	char *PresetToken;	/* required element of type tt:ReferenceToken */
	tt__PTZSpeed *Speed;	/* optional element of type tt:PTZSpeed */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 803; } /* = unique id SOAP_TYPE__tptz__GotoPreset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GotoPreset(): ProfileToken(NULL), PresetToken(NULL), Speed(NULL), soap(NULL) { _tptz__GotoPreset::soap_default(NULL); }
	virtual ~_tptz__GotoPreset() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GotoPresetResponse
#define SOAP_TYPE__tptz__GotoPresetResponse (804)
/* tptz:GotoPresetResponse */
class SOAP_CMAC _tptz__GotoPresetResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 804; } /* = unique id SOAP_TYPE__tptz__GotoPresetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GotoPresetResponse(): soap(NULL) { _tptz__GotoPresetResponse::soap_default(NULL); }
	virtual ~_tptz__GotoPresetResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetStatus
#define SOAP_TYPE__tptz__GetStatus (805)
/* tptz:GetStatus */
class SOAP_CMAC _tptz__GetStatus
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 805; } /* = unique id SOAP_TYPE__tptz__GetStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetStatus(): ProfileToken(NULL), soap(NULL) { _tptz__GetStatus::soap_default(NULL); }
	virtual ~_tptz__GetStatus() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetStatusResponse
#define SOAP_TYPE__tptz__GetStatusResponse (806)
/* tptz:GetStatusResponse */
class SOAP_CMAC _tptz__GetStatusResponse
{
public:
	tt__PTZStatus *PTZStatus;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:PTZStatus */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 806; } /* = unique id SOAP_TYPE__tptz__GetStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetStatusResponse(): PTZStatus(NULL), soap(NULL) { _tptz__GetStatusResponse::soap_default(NULL); }
	virtual ~_tptz__GetStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GotoHomePosition
#define SOAP_TYPE__tptz__GotoHomePosition (807)
/* tptz:GotoHomePosition */
class SOAP_CMAC _tptz__GotoHomePosition
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	tt__PTZSpeed *Speed;	/* optional element of type tt:PTZSpeed */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 807; } /* = unique id SOAP_TYPE__tptz__GotoHomePosition */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GotoHomePosition(): ProfileToken(NULL), Speed(NULL), soap(NULL) { _tptz__GotoHomePosition::soap_default(NULL); }
	virtual ~_tptz__GotoHomePosition() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GotoHomePositionResponse
#define SOAP_TYPE__tptz__GotoHomePositionResponse (808)
/* tptz:GotoHomePositionResponse */
class SOAP_CMAC _tptz__GotoHomePositionResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 808; } /* = unique id SOAP_TYPE__tptz__GotoHomePositionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GotoHomePositionResponse(): soap(NULL) { _tptz__GotoHomePositionResponse::soap_default(NULL); }
	virtual ~_tptz__GotoHomePositionResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__SetHomePosition
#define SOAP_TYPE__tptz__SetHomePosition (809)
/* tptz:SetHomePosition */
class SOAP_CMAC _tptz__SetHomePosition
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 809; } /* = unique id SOAP_TYPE__tptz__SetHomePosition */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__SetHomePosition(): ProfileToken(NULL), soap(NULL) { _tptz__SetHomePosition::soap_default(NULL); }
	virtual ~_tptz__SetHomePosition() { }
};
#endif

#ifndef SOAP_TYPE__tptz__SetHomePositionResponse
#define SOAP_TYPE__tptz__SetHomePositionResponse (810)
/* tptz:SetHomePositionResponse */
class SOAP_CMAC _tptz__SetHomePositionResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 810; } /* = unique id SOAP_TYPE__tptz__SetHomePositionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__SetHomePositionResponse(): soap(NULL) { _tptz__SetHomePositionResponse::soap_default(NULL); }
	virtual ~_tptz__SetHomePositionResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__ContinuousMove
#define SOAP_TYPE__tptz__ContinuousMove (811)
/* tptz:ContinuousMove */
class SOAP_CMAC _tptz__ContinuousMove
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	tt__PTZSpeed *Velocity;	/* required element of type tt:PTZSpeed */
	LONG64 *Timeout;	/* optional element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 811; } /* = unique id SOAP_TYPE__tptz__ContinuousMove */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__ContinuousMove(): ProfileToken(NULL), Velocity(NULL), Timeout(NULL), soap(NULL) { _tptz__ContinuousMove::soap_default(NULL); }
	virtual ~_tptz__ContinuousMove() { }
};
#endif

#ifndef SOAP_TYPE__tptz__ContinuousMoveResponse
#define SOAP_TYPE__tptz__ContinuousMoveResponse (812)
/* tptz:ContinuousMoveResponse */
class SOAP_CMAC _tptz__ContinuousMoveResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 812; } /* = unique id SOAP_TYPE__tptz__ContinuousMoveResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__ContinuousMoveResponse(): soap(NULL) { _tptz__ContinuousMoveResponse::soap_default(NULL); }
	virtual ~_tptz__ContinuousMoveResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__RelativeMove
#define SOAP_TYPE__tptz__RelativeMove (813)
/* tptz:RelativeMove */
class SOAP_CMAC _tptz__RelativeMove
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	tt__PTZVector *Translation;	/* required element of type tt:PTZVector */
	tt__PTZSpeed *Speed;	/* optional element of type tt:PTZSpeed */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 813; } /* = unique id SOAP_TYPE__tptz__RelativeMove */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__RelativeMove(): ProfileToken(NULL), Translation(NULL), Speed(NULL), soap(NULL) { _tptz__RelativeMove::soap_default(NULL); }
	virtual ~_tptz__RelativeMove() { }
};
#endif

#ifndef SOAP_TYPE__tptz__RelativeMoveResponse
#define SOAP_TYPE__tptz__RelativeMoveResponse (814)
/* tptz:RelativeMoveResponse */
class SOAP_CMAC _tptz__RelativeMoveResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 814; } /* = unique id SOAP_TYPE__tptz__RelativeMoveResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__RelativeMoveResponse(): soap(NULL) { _tptz__RelativeMoveResponse::soap_default(NULL); }
	virtual ~_tptz__RelativeMoveResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__AbsoluteMove
#define SOAP_TYPE__tptz__AbsoluteMove (815)
/* tptz:AbsoluteMove */
class SOAP_CMAC _tptz__AbsoluteMove
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	tt__PTZVector *Position;	/* required element of type tt:PTZVector */
	tt__PTZSpeed *Speed;	/* optional element of type tt:PTZSpeed */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 815; } /* = unique id SOAP_TYPE__tptz__AbsoluteMove */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__AbsoluteMove(): ProfileToken(NULL), Position(NULL), Speed(NULL), soap(NULL) { _tptz__AbsoluteMove::soap_default(NULL); }
	virtual ~_tptz__AbsoluteMove() { }
};
#endif

#ifndef SOAP_TYPE__tptz__AbsoluteMoveResponse
#define SOAP_TYPE__tptz__AbsoluteMoveResponse (816)
/* tptz:AbsoluteMoveResponse */
class SOAP_CMAC _tptz__AbsoluteMoveResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 816; } /* = unique id SOAP_TYPE__tptz__AbsoluteMoveResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__AbsoluteMoveResponse(): soap(NULL) { _tptz__AbsoluteMoveResponse::soap_default(NULL); }
	virtual ~_tptz__AbsoluteMoveResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__Stop
#define SOAP_TYPE__tptz__Stop (817)
/* tptz:Stop */
class SOAP_CMAC _tptz__Stop
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	bool *PanTilt;	/* optional element of type xsd:boolean */
	bool *Zoom;	/* optional element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 817; } /* = unique id SOAP_TYPE__tptz__Stop */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__Stop(): ProfileToken(NULL), PanTilt(NULL), Zoom(NULL), soap(NULL) { _tptz__Stop::soap_default(NULL); }
	virtual ~_tptz__Stop() { }
};
#endif

#ifndef SOAP_TYPE__tptz__StopResponse
#define SOAP_TYPE__tptz__StopResponse (818)
/* tptz:StopResponse */
class SOAP_CMAC _tptz__StopResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 818; } /* = unique id SOAP_TYPE__tptz__StopResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__StopResponse(): soap(NULL) { _tptz__StopResponse::soap_default(NULL); }
	virtual ~_tptz__StopResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetPresetTours
#define SOAP_TYPE__tptz__GetPresetTours (819)
/* tptz:GetPresetTours */
class SOAP_CMAC _tptz__GetPresetTours
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 819; } /* = unique id SOAP_TYPE__tptz__GetPresetTours */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetPresetTours(): ProfileToken(NULL), soap(NULL) { _tptz__GetPresetTours::soap_default(NULL); }
	virtual ~_tptz__GetPresetTours() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetPresetToursResponse
#define SOAP_TYPE__tptz__GetPresetToursResponse (820)
/* tptz:GetPresetToursResponse */
class SOAP_CMAC _tptz__GetPresetToursResponse
{
public:
	int __sizePresetTour;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <PresetTour> */
	tt__PresetTour **PresetTour;	/* optional element of type tt:PresetTour */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 820; } /* = unique id SOAP_TYPE__tptz__GetPresetToursResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetPresetToursResponse(): PresetTour(NULL), soap(NULL) { _tptz__GetPresetToursResponse::soap_default(NULL); }
	virtual ~_tptz__GetPresetToursResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetPresetTour
#define SOAP_TYPE__tptz__GetPresetTour (821)
/* tptz:GetPresetTour */
class SOAP_CMAC _tptz__GetPresetTour
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	char *PresetTourToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 821; } /* = unique id SOAP_TYPE__tptz__GetPresetTour */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetPresetTour(): ProfileToken(NULL), PresetTourToken(NULL), soap(NULL) { _tptz__GetPresetTour::soap_default(NULL); }
	virtual ~_tptz__GetPresetTour() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetPresetTourResponse
#define SOAP_TYPE__tptz__GetPresetTourResponse (822)
/* tptz:GetPresetTourResponse */
class SOAP_CMAC _tptz__GetPresetTourResponse
{
public:
	tt__PresetTour *PresetTour;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:PresetTour */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 822; } /* = unique id SOAP_TYPE__tptz__GetPresetTourResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetPresetTourResponse(): PresetTour(NULL), soap(NULL) { _tptz__GetPresetTourResponse::soap_default(NULL); }
	virtual ~_tptz__GetPresetTourResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetPresetTourOptions
#define SOAP_TYPE__tptz__GetPresetTourOptions (823)
/* tptz:GetPresetTourOptions */
class SOAP_CMAC _tptz__GetPresetTourOptions
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	char *PresetTourToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 823; } /* = unique id SOAP_TYPE__tptz__GetPresetTourOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetPresetTourOptions(): ProfileToken(NULL), PresetTourToken(NULL), soap(NULL) { _tptz__GetPresetTourOptions::soap_default(NULL); }
	virtual ~_tptz__GetPresetTourOptions() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetPresetTourOptionsResponse
#define SOAP_TYPE__tptz__GetPresetTourOptionsResponse (824)
/* tptz:GetPresetTourOptionsResponse */
class SOAP_CMAC _tptz__GetPresetTourOptionsResponse
{
public:
	tt__PTZPresetTourOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:PTZPresetTourOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 824; } /* = unique id SOAP_TYPE__tptz__GetPresetTourOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetPresetTourOptionsResponse(): Options(NULL), soap(NULL) { _tptz__GetPresetTourOptionsResponse::soap_default(NULL); }
	virtual ~_tptz__GetPresetTourOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__CreatePresetTour
#define SOAP_TYPE__tptz__CreatePresetTour (825)
/* tptz:CreatePresetTour */
class SOAP_CMAC _tptz__CreatePresetTour
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 825; } /* = unique id SOAP_TYPE__tptz__CreatePresetTour */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__CreatePresetTour(): ProfileToken(NULL), soap(NULL) { _tptz__CreatePresetTour::soap_default(NULL); }
	virtual ~_tptz__CreatePresetTour() { }
};
#endif

#ifndef SOAP_TYPE__tptz__CreatePresetTourResponse
#define SOAP_TYPE__tptz__CreatePresetTourResponse (826)
/* tptz:CreatePresetTourResponse */
class SOAP_CMAC _tptz__CreatePresetTourResponse
{
public:
	char *PresetTourToken;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 826; } /* = unique id SOAP_TYPE__tptz__CreatePresetTourResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__CreatePresetTourResponse(): PresetTourToken(NULL), soap(NULL) { _tptz__CreatePresetTourResponse::soap_default(NULL); }
	virtual ~_tptz__CreatePresetTourResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__ModifyPresetTour
#define SOAP_TYPE__tptz__ModifyPresetTour (827)
/* tptz:ModifyPresetTour */
class SOAP_CMAC _tptz__ModifyPresetTour
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	tt__PresetTour *PresetTour;	/* required element of type tt:PresetTour */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 827; } /* = unique id SOAP_TYPE__tptz__ModifyPresetTour */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__ModifyPresetTour(): ProfileToken(NULL), PresetTour(NULL), soap(NULL) { _tptz__ModifyPresetTour::soap_default(NULL); }
	virtual ~_tptz__ModifyPresetTour() { }
};
#endif

#ifndef SOAP_TYPE__tptz__ModifyPresetTourResponse
#define SOAP_TYPE__tptz__ModifyPresetTourResponse (828)
/* tptz:ModifyPresetTourResponse */
class SOAP_CMAC _tptz__ModifyPresetTourResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 828; } /* = unique id SOAP_TYPE__tptz__ModifyPresetTourResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__ModifyPresetTourResponse(): soap(NULL) { _tptz__ModifyPresetTourResponse::soap_default(NULL); }
	virtual ~_tptz__ModifyPresetTourResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__OperatePresetTour
#define SOAP_TYPE__tptz__OperatePresetTour (829)
/* tptz:OperatePresetTour */
class SOAP_CMAC _tptz__OperatePresetTour
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	char *PresetTourToken;	/* required element of type tt:ReferenceToken */
	enum tt__PTZPresetTourOperation Operation;	/* required element of type tt:PTZPresetTourOperation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 829; } /* = unique id SOAP_TYPE__tptz__OperatePresetTour */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__OperatePresetTour(): ProfileToken(NULL), PresetTourToken(NULL), soap(NULL) { _tptz__OperatePresetTour::soap_default(NULL); }
	virtual ~_tptz__OperatePresetTour() { }
};
#endif

#ifndef SOAP_TYPE__tptz__OperatePresetTourResponse
#define SOAP_TYPE__tptz__OperatePresetTourResponse (830)
/* tptz:OperatePresetTourResponse */
class SOAP_CMAC _tptz__OperatePresetTourResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 830; } /* = unique id SOAP_TYPE__tptz__OperatePresetTourResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__OperatePresetTourResponse(): soap(NULL) { _tptz__OperatePresetTourResponse::soap_default(NULL); }
	virtual ~_tptz__OperatePresetTourResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__RemovePresetTour
#define SOAP_TYPE__tptz__RemovePresetTour (831)
/* tptz:RemovePresetTour */
class SOAP_CMAC _tptz__RemovePresetTour
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	char *PresetTourToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 831; } /* = unique id SOAP_TYPE__tptz__RemovePresetTour */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__RemovePresetTour(): ProfileToken(NULL), PresetTourToken(NULL), soap(NULL) { _tptz__RemovePresetTour::soap_default(NULL); }
	virtual ~_tptz__RemovePresetTour() { }
};
#endif

#ifndef SOAP_TYPE__tptz__RemovePresetTourResponse
#define SOAP_TYPE__tptz__RemovePresetTourResponse (832)
/* tptz:RemovePresetTourResponse */
class SOAP_CMAC _tptz__RemovePresetTourResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 832; } /* = unique id SOAP_TYPE__tptz__RemovePresetTourResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__RemovePresetTourResponse(): soap(NULL) { _tptz__RemovePresetTourResponse::soap_default(NULL); }
	virtual ~_tptz__RemovePresetTourResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetCompatibleConfigurations
#define SOAP_TYPE__tptz__GetCompatibleConfigurations (833)
/* tptz:GetCompatibleConfigurations */
class SOAP_CMAC _tptz__GetCompatibleConfigurations
{
public:
	char *ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 833; } /* = unique id SOAP_TYPE__tptz__GetCompatibleConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetCompatibleConfigurations(): ProfileToken(NULL), soap(NULL) { _tptz__GetCompatibleConfigurations::soap_default(NULL); }
	virtual ~_tptz__GetCompatibleConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetCompatibleConfigurationsResponse
#define SOAP_TYPE__tptz__GetCompatibleConfigurationsResponse (834)
/* tptz:GetCompatibleConfigurationsResponse */
class SOAP_CMAC _tptz__GetCompatibleConfigurationsResponse
{
public:
	int __sizePTZConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <PTZConfiguration> */
	tt__PTZConfiguration **PTZConfiguration;	/* optional element of type tt:PTZConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 834; } /* = unique id SOAP_TYPE__tptz__GetCompatibleConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetCompatibleConfigurationsResponse(): PTZConfiguration(NULL), soap(NULL) { _tptz__GetCompatibleConfigurationsResponse::soap_default(NULL); }
	virtual ~_tptz__GetCompatibleConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__BinaryFile
#define SOAP_TYPE_ns1__BinaryFile (835)
/* ns1:BinaryFile */
class SOAP_CMAC ns1__BinaryFile
{
public:
	struct _xop__Include xop__Include;	/* required element of type xop:Include */
	char *xmime5__contentType;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 835; } /* = unique id SOAP_TYPE_ns1__BinaryFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__BinaryFile(): xmime5__contentType(NULL), soap(NULL) { ns1__BinaryFile::soap_default(NULL); }
	virtual ~ns1__BinaryFile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetConfigurationDBRequest
#define SOAP_TYPE_ns1__SetConfigurationDBRequest (836)
/* ns1:SetConfigurationDBRequest */
class SOAP_CMAC ns1__SetConfigurationDBRequest
{
public:
	ns1__BinaryFile *configurationDB;	/* required element of type ns1:BinaryFile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 836; } /* = unique id SOAP_TYPE_ns1__SetConfigurationDBRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetConfigurationDBRequest(): configurationDB(NULL), soap(NULL) { ns1__SetConfigurationDBRequest::soap_default(NULL); }
	virtual ~ns1__SetConfigurationDBRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetConfigurationDBResponse
#define SOAP_TYPE_ns1__SetConfigurationDBResponse (837)
/* ns1:SetConfigurationDBResponse */
class SOAP_CMAC ns1__SetConfigurationDBResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 837; } /* = unique id SOAP_TYPE_ns1__SetConfigurationDBResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetConfigurationDBResponse(): soap(NULL) { ns1__SetConfigurationDBResponse::soap_default(NULL); }
	virtual ~ns1__SetConfigurationDBResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetConfigurationDBRequest
#define SOAP_TYPE_ns1__GetConfigurationDBRequest (838)
/* ns1:GetConfigurationDBRequest */
class SOAP_CMAC ns1__GetConfigurationDBRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 838; } /* = unique id SOAP_TYPE_ns1__GetConfigurationDBRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetConfigurationDBRequest(): soap(NULL) { ns1__GetConfigurationDBRequest::soap_default(NULL); }
	virtual ~ns1__GetConfigurationDBRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetConfigurationDBResponse
#define SOAP_TYPE_ns1__GetConfigurationDBResponse (839)
/* ns1:GetConfigurationDBResponse */
class SOAP_CMAC ns1__GetConfigurationDBResponse
{
public:
	ns1__BinaryFile *configurationDB;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:BinaryFile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 839; } /* = unique id SOAP_TYPE_ns1__GetConfigurationDBResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetConfigurationDBResponse(): configurationDB(NULL), soap(NULL) { ns1__GetConfigurationDBResponse::soap_default(NULL); }
	virtual ~ns1__GetConfigurationDBResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UploadPTZLibraryRequest
#define SOAP_TYPE_ns1__UploadPTZLibraryRequest (840)
/* ns1:UploadPTZLibraryRequest */
class SOAP_CMAC ns1__UploadPTZLibraryRequest
{
public:
	ns1__BinaryFile *ptzLibrary;	/* required element of type ns1:BinaryFile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 840; } /* = unique id SOAP_TYPE_ns1__UploadPTZLibraryRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UploadPTZLibraryRequest(): ptzLibrary(NULL), soap(NULL) { ns1__UploadPTZLibraryRequest::soap_default(NULL); }
	virtual ~ns1__UploadPTZLibraryRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UploadPTZLibraryResponse
#define SOAP_TYPE_ns1__UploadPTZLibraryResponse (841)
/* ns1:UploadPTZLibraryResponse */
class SOAP_CMAC ns1__UploadPTZLibraryResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 841; } /* = unique id SOAP_TYPE_ns1__UploadPTZLibraryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UploadPTZLibraryResponse(): soap(NULL) { ns1__UploadPTZLibraryResponse::soap_default(NULL); }
	virtual ~ns1__UploadPTZLibraryResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MediaSource
#define SOAP_TYPE_ns1__MediaSource (842)
/* ns1:MediaSource */
class SOAP_CMAC ns1__MediaSource
{
public:
	char *token;	/* required element of type xsd:string */
	char *uuid;	/* required element of type xsd:string */
	int *layer;	/* optional element of type xsd:int */
	int *streamType;	/* optional element of type xsd:int */
	int *streamVendor;	/* optional element of type xsd:int */
	int *streamVendorDevice;	/* optional element of type xsd:int */
	int *streamVendorDeviceProtocol;	/* optional element of type xsd:int */
	int *streamVendorDeviceVersion;	/* optional element of type xsd:int */
	char *streamVendorName;	/* optional element of type xsd:string */
	char *streamVendorDeviceName;	/* optional element of type xsd:string */
	char *streamVendorDeviceProtocolName;	/* optional element of type xsd:string */
	char *streamVendorDeviceVersionName;	/* optional element of type xsd:string */
	char *streamMediaUrl;	/* optional element of type xsd:string */
	char *streamTunnelMediaUrl;	/* optional element of type xsd:string */
	char *streamAdditionalMediaUrl;	/* optional element of type xsd:string */
	char *streamAccessId;	/* optional element of type xsd:string */
	char *streamAccessPwd;	/* optional element of type xsd:string */
	int *streamTransportType;	/* optional element of type xsd:int */
	bool *streamParseSDP;	/* optional element of type xsd:boolean */
	LONG64 *streamWaitingTime;	/* optional element of type xsd:duration */
	int *streamRecvOption;	/* optional element of type xsd:int */
	int *streamFocusOn;	/* optional element of type xsd:int */
	bool *transcoding;	/* optional element of type xsd:boolean */
	int *ptzVendor;	/* optional element of type xsd:int */
	int *ptzVendorDevice;	/* optional element of type xsd:int */
	int *ptzVendorDeviceProtocol;	/* optional element of type xsd:int */
	int *ptzVendorDeviceVersion;	/* optional element of type xsd:int */
	char *ptzVendorName;	/* optional element of type xsd:string */
	char *ptzVendorDeviceName;	/* optional element of type xsd:string */
	char *ptzVendorDeviceProtocolName;	/* optional element of type xsd:string */
	char *ptzVendorDeviceVersionName;	/* optional element of type xsd:string */
	bool *ptzFlip;	/* optional element of type xsd:boolean */
	char *ptzUrl;	/* optional element of type xsd:string */
	char *ptzTunnelUrl;	/* optional element of type xsd:string */
	char *ptzAccessId;	/* optional element of type xsd:string */
	char *ptzAccessPwd;	/* optional element of type xsd:string */
	int *videoCodec;	/* optional element of type xsd:int */
	int *mpeg4Profile;	/* optional element of type xsd:int */
	int *h264Profile;	/* optional element of type xsd:int */
	float *videoFramerate;	/* optional element of type xsd:float */
	int *videoHeight;	/* optional element of type xsd:int */
	int *videoWidth;	/* optional element of type xsd:int */
	float *videoQuality;	/* optional element of type xsd:float */
	int *videoBitrate;	/* optional element of type xsd:int */
	int *videoGopSize;	/* optional element of type xsd:int */
	int *audioCodec;	/* optional element of type xsd:int */
	int *audioChannels;	/* optional element of type xsd:int */
	float *audioSampleRate;	/* optional element of type xsd:float */
	int *audioBitrate;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 842; } /* = unique id SOAP_TYPE_ns1__MediaSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MediaSource(): token(NULL), uuid(NULL), layer(NULL), streamType(NULL), streamVendor(NULL), streamVendorDevice(NULL), streamVendorDeviceProtocol(NULL), streamVendorDeviceVersion(NULL), streamVendorName(NULL), streamVendorDeviceName(NULL), streamVendorDeviceProtocolName(NULL), streamVendorDeviceVersionName(NULL), streamMediaUrl(NULL), streamTunnelMediaUrl(NULL), streamAdditionalMediaUrl(NULL), streamAccessId(NULL), streamAccessPwd(NULL), streamTransportType(NULL), streamParseSDP(NULL), streamWaitingTime(NULL), streamRecvOption(NULL), streamFocusOn(NULL), transcoding(NULL), ptzVendor(NULL), ptzVendorDevice(NULL), ptzVendorDeviceProtocol(NULL), ptzVendorDeviceVersion(NULL), ptzVendorName(NULL), ptzVendorDeviceName(NULL), ptzVendorDeviceProtocolName(NULL), ptzVendorDeviceVersionName(NULL), ptzFlip(NULL), ptzUrl(NULL), ptzTunnelUrl(NULL), ptzAccessId(NULL), ptzAccessPwd(NULL), videoCodec(NULL), mpeg4Profile(NULL), h264Profile(NULL), videoFramerate(NULL), videoHeight(NULL), videoWidth(NULL), videoQuality(NULL), videoBitrate(NULL), videoGopSize(NULL), audioCodec(NULL), audioChannels(NULL), audioSampleRate(NULL), audioBitrate(NULL), soap(NULL) { ns1__MediaSource::soap_default(NULL); }
	virtual ~ns1__MediaSource() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MediaProfile
#define SOAP_TYPE_ns1__MediaProfile (843)
/* ns1:MediaProfile */
class SOAP_CMAC ns1__MediaProfile
{
public:
	char *token;	/* required element of type xsd:string */
	char *name;	/* required element of type xsd:string */
	char *videoSource;	/* optional element of type xsd:string */
	bool *videoBypass;	/* optional element of type xsd:boolean */
	int *videoCodec;	/* optional element of type xsd:int */
	int *videoProfile;	/* optional element of type xsd:int */
	int *videoWidth;	/* optional element of type xsd:int */
	int *videoHeight;	/* optional element of type xsd:int */
	float *videoQuality;	/* optional element of type xsd:float */
	int *videoFramerate;	/* optional element of type xsd:int */
	int *videoBitrate;	/* optional element of type xsd:int */
	int *videoEncodingInterval;	/* optional element of type xsd:int */
	int *videoGopSize;	/* optional element of type xsd:int */
	char *videoMulticastAddress;	/* optional element of type xsd:string */
	int *videoMulticastPortNumber;	/* optional element of type xsd:int */
	int *videoMulticastTTL;	/* optional element of type xsd:int */
	bool *videoMulticastAutoStart;	/* optional element of type xsd:boolean */
	LONG64 *videoSessionTimeout;	/* optional element of type xsd:duration */
	int *videoStreamType;	/* optional element of type xsd:int */
	char *videoStreamUrl;	/* optional element of type xsd:string */
	char *audioSource;	/* optional element of type xsd:string */
	bool *audioBypass;	/* optional element of type xsd:boolean */
	int *audioCodec;	/* optional element of type xsd:int */
	int *audioBitrate;	/* optional element of type xsd:int */
	int *audioSampleRate;	/* optional element of type xsd:int */
	char *audioMulticastAddress;	/* optional element of type xsd:string */
	int *audioMulticastPortNumber;	/* optional element of type xsd:int */
	int *audioMulticastTTL;	/* optional element of type xsd:int */
	bool *audioMulticastAutoStart;	/* optional element of type xsd:boolean */
	LONG64 *audioSessionTimeout;	/* optional element of type xsd:duration */
	int *audioStreamType;	/* optional element of type xsd:int */
	char *audioStreamUrl;	/* optional element of type xsd:string */
	char *ptzNode;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 843; } /* = unique id SOAP_TYPE_ns1__MediaProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MediaProfile(): token(NULL), name(NULL), videoSource(NULL), videoBypass(NULL), videoCodec(NULL), videoProfile(NULL), videoWidth(NULL), videoHeight(NULL), videoQuality(NULL), videoFramerate(NULL), videoBitrate(NULL), videoEncodingInterval(NULL), videoGopSize(NULL), videoMulticastAddress(NULL), videoMulticastPortNumber(NULL), videoMulticastTTL(NULL), videoMulticastAutoStart(NULL), videoSessionTimeout(NULL), videoStreamType(NULL), videoStreamUrl(NULL), audioSource(NULL), audioBypass(NULL), audioCodec(NULL), audioBitrate(NULL), audioSampleRate(NULL), audioMulticastAddress(NULL), audioMulticastPortNumber(NULL), audioMulticastTTL(NULL), audioMulticastAutoStart(NULL), audioSessionTimeout(NULL), audioStreamType(NULL), audioStreamUrl(NULL), ptzNode(NULL), soap(NULL) { ns1__MediaProfile::soap_default(NULL); }
	virtual ~ns1__MediaProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__StreamVendorDeviceVersion
#define SOAP_TYPE_ns1__StreamVendorDeviceVersion (844)
/* ns1:StreamVendorDeviceVersion */
class SOAP_CMAC ns1__StreamVendorDeviceVersion
{
public:
	int id;	/* required element of type xsd:int */
	char *name;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 844; } /* = unique id SOAP_TYPE_ns1__StreamVendorDeviceVersion */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__StreamVendorDeviceVersion(): name(NULL), soap(NULL) { ns1__StreamVendorDeviceVersion::soap_default(NULL); }
	virtual ~ns1__StreamVendorDeviceVersion() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PTZVendor
#define SOAP_TYPE_ns1__PTZVendor (845)
/* ns1:PTZVendor */
class SOAP_CMAC ns1__PTZVendor
{
public:
	int id;	/* required element of type xsd:int */
	char *name;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 845; } /* = unique id SOAP_TYPE_ns1__PTZVendor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PTZVendor(): name(NULL), soap(NULL) { ns1__PTZVendor::soap_default(NULL); }
	virtual ~ns1__PTZVendor() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PTZVendorDevice
#define SOAP_TYPE_ns1__PTZVendorDevice (846)
/* ns1:PTZVendorDevice */
class SOAP_CMAC ns1__PTZVendorDevice
{
public:
	int id;	/* required element of type xsd:int */
	char *name;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 846; } /* = unique id SOAP_TYPE_ns1__PTZVendorDevice */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PTZVendorDevice(): name(NULL), soap(NULL) { ns1__PTZVendorDevice::soap_default(NULL); }
	virtual ~ns1__PTZVendorDevice() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PTZVendorDeviceProtocol
#define SOAP_TYPE_ns1__PTZVendorDeviceProtocol (847)
/* ns1:PTZVendorDeviceProtocol */
class SOAP_CMAC ns1__PTZVendorDeviceProtocol
{
public:
	int id;	/* required element of type xsd:int */
	char *name;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 847; } /* = unique id SOAP_TYPE_ns1__PTZVendorDeviceProtocol */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PTZVendorDeviceProtocol(): name(NULL), soap(NULL) { ns1__PTZVendorDeviceProtocol::soap_default(NULL); }
	virtual ~ns1__PTZVendorDeviceProtocol() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PTZVendorDeviceVersion
#define SOAP_TYPE_ns1__PTZVendorDeviceVersion (848)
/* ns1:PTZVendorDeviceVersion */
class SOAP_CMAC ns1__PTZVendorDeviceVersion
{
public:
	int id;	/* required element of type xsd:int */
	char *name;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 848; } /* = unique id SOAP_TYPE_ns1__PTZVendorDeviceVersion */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PTZVendorDeviceVersion(): name(NULL), soap(NULL) { ns1__PTZVendorDeviceVersion::soap_default(NULL); }
	virtual ~ns1__PTZVendorDeviceVersion() { }
};
#endif

#ifndef SOAP_TYPE_ns1__StreamVendor
#define SOAP_TYPE_ns1__StreamVendor (849)
/* ns1:StreamVendor */
class SOAP_CMAC ns1__StreamVendor
{
public:
	int id;	/* required element of type xsd:int */
	char *name;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 849; } /* = unique id SOAP_TYPE_ns1__StreamVendor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__StreamVendor(): name(NULL), soap(NULL) { ns1__StreamVendor::soap_default(NULL); }
	virtual ~ns1__StreamVendor() { }
};
#endif

#ifndef SOAP_TYPE_ns1__StreamVendorDevice
#define SOAP_TYPE_ns1__StreamVendorDevice (850)
/* ns1:StreamVendorDevice */
class SOAP_CMAC ns1__StreamVendorDevice
{
public:
	int id;	/* required element of type xsd:int */
	char *name;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 850; } /* = unique id SOAP_TYPE_ns1__StreamVendorDevice */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__StreamVendorDevice(): name(NULL), soap(NULL) { ns1__StreamVendorDevice::soap_default(NULL); }
	virtual ~ns1__StreamVendorDevice() { }
};
#endif

#ifndef SOAP_TYPE_ns1__StreamVendorDeviceProtocol
#define SOAP_TYPE_ns1__StreamVendorDeviceProtocol (851)
/* ns1:StreamVendorDeviceProtocol */
class SOAP_CMAC ns1__StreamVendorDeviceProtocol
{
public:
	int id;	/* required element of type xsd:int */
	char *name;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 851; } /* = unique id SOAP_TYPE_ns1__StreamVendorDeviceProtocol */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__StreamVendorDeviceProtocol(): name(NULL), soap(NULL) { ns1__StreamVendorDeviceProtocol::soap_default(NULL); }
	virtual ~ns1__StreamVendorDeviceProtocol() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateMediaSourceRequest
#define SOAP_TYPE_ns1__CreateMediaSourceRequest (852)
/* ns1:CreateMediaSourceRequest */
class SOAP_CMAC ns1__CreateMediaSourceRequest
{
public:
	ns1__MediaSource *MediaSource;	/* required element of type ns1:MediaSource */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 852; } /* = unique id SOAP_TYPE_ns1__CreateMediaSourceRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateMediaSourceRequest(): MediaSource(NULL), soap(NULL) { ns1__CreateMediaSourceRequest::soap_default(NULL); }
	virtual ~ns1__CreateMediaSourceRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateMediaSourceResponse
#define SOAP_TYPE_ns1__CreateMediaSourceResponse (853)
/* ns1:CreateMediaSourceResponse */
class SOAP_CMAC ns1__CreateMediaSourceResponse
{
public:
	ns1__MediaSource *MediaSource;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:MediaSource */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 853; } /* = unique id SOAP_TYPE_ns1__CreateMediaSourceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateMediaSourceResponse(): MediaSource(NULL), soap(NULL) { ns1__CreateMediaSourceResponse::soap_default(NULL); }
	virtual ~ns1__CreateMediaSourceResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteMediaSourceRequest
#define SOAP_TYPE_ns1__DeleteMediaSourceRequest (854)
/* ns1:DeleteMediaSourceRequest */
class SOAP_CMAC ns1__DeleteMediaSourceRequest
{
public:
	char *token;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 854; } /* = unique id SOAP_TYPE_ns1__DeleteMediaSourceRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteMediaSourceRequest(): token(NULL), soap(NULL) { ns1__DeleteMediaSourceRequest::soap_default(NULL); }
	virtual ~ns1__DeleteMediaSourceRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteMediaSourceResponse
#define SOAP_TYPE_ns1__DeleteMediaSourceResponse (855)
/* ns1:DeleteMediaSourceResponse */
class SOAP_CMAC ns1__DeleteMediaSourceResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 855; } /* = unique id SOAP_TYPE_ns1__DeleteMediaSourceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteMediaSourceResponse(): soap(NULL) { ns1__DeleteMediaSourceResponse::soap_default(NULL); }
	virtual ~ns1__DeleteMediaSourceResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetMediaSourceRequest
#define SOAP_TYPE_ns1__GetMediaSourceRequest (856)
/* ns1:GetMediaSourceRequest */
class SOAP_CMAC ns1__GetMediaSourceRequest
{
public:
	char *token;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 856; } /* = unique id SOAP_TYPE_ns1__GetMediaSourceRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetMediaSourceRequest(): token(NULL), soap(NULL) { ns1__GetMediaSourceRequest::soap_default(NULL); }
	virtual ~ns1__GetMediaSourceRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetMediaSourceResponse
#define SOAP_TYPE_ns1__GetMediaSourceResponse (857)
/* ns1:GetMediaSourceResponse */
class SOAP_CMAC ns1__GetMediaSourceResponse
{
public:
	ns1__MediaSource *MediaSource;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:MediaSource */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 857; } /* = unique id SOAP_TYPE_ns1__GetMediaSourceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetMediaSourceResponse(): MediaSource(NULL), soap(NULL) { ns1__GetMediaSourceResponse::soap_default(NULL); }
	virtual ~ns1__GetMediaSourceResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetMediaSourcesRequest
#define SOAP_TYPE_ns1__GetMediaSourcesRequest (858)
/* ns1:GetMediaSourcesRequest */
class SOAP_CMAC ns1__GetMediaSourcesRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 858; } /* = unique id SOAP_TYPE_ns1__GetMediaSourcesRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetMediaSourcesRequest(): soap(NULL) { ns1__GetMediaSourcesRequest::soap_default(NULL); }
	virtual ~ns1__GetMediaSourcesRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetMediaSourcesResponse
#define SOAP_TYPE_ns1__GetMediaSourcesResponse (859)
/* ns1:GetMediaSourcesResponse */
class SOAP_CMAC ns1__GetMediaSourcesResponse
{
public:
	int __sizeMediaSources;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <MediaSources> */
	ns1__MediaSource **MediaSources;	/* optional element of type ns1:MediaSource */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 859; } /* = unique id SOAP_TYPE_ns1__GetMediaSourcesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetMediaSourcesResponse(): MediaSources(NULL), soap(NULL) { ns1__GetMediaSourcesResponse::soap_default(NULL); }
	virtual ~ns1__GetMediaSourcesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetMediaSourceRequest
#define SOAP_TYPE_ns1__SetMediaSourceRequest (860)
/* ns1:SetMediaSourceRequest */
class SOAP_CMAC ns1__SetMediaSourceRequest
{
public:
	ns1__MediaSource *MediaSource;	/* required element of type ns1:MediaSource */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 860; } /* = unique id SOAP_TYPE_ns1__SetMediaSourceRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetMediaSourceRequest(): MediaSource(NULL), soap(NULL) { ns1__SetMediaSourceRequest::soap_default(NULL); }
	virtual ~ns1__SetMediaSourceRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetMediaSourceResponse
#define SOAP_TYPE_ns1__SetMediaSourceResponse (861)
/* ns1:SetMediaSourceResponse */
class SOAP_CMAC ns1__SetMediaSourceResponse
{
public:
	ns1__MediaSource *MediaSource;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:MediaSource */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 861; } /* = unique id SOAP_TYPE_ns1__SetMediaSourceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetMediaSourceResponse(): MediaSource(NULL), soap(NULL) { ns1__SetMediaSourceResponse::soap_default(NULL); }
	virtual ~ns1__SetMediaSourceResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateMediaProfileRequest
#define SOAP_TYPE_ns1__CreateMediaProfileRequest (862)
/* ns1:CreateMediaProfileRequest */
class SOAP_CMAC ns1__CreateMediaProfileRequest
{
public:
	ns1__MediaProfile *MediaProfile;	/* required element of type ns1:MediaProfile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 862; } /* = unique id SOAP_TYPE_ns1__CreateMediaProfileRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateMediaProfileRequest(): MediaProfile(NULL), soap(NULL) { ns1__CreateMediaProfileRequest::soap_default(NULL); }
	virtual ~ns1__CreateMediaProfileRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateMediaProfileResponse
#define SOAP_TYPE_ns1__CreateMediaProfileResponse (863)
/* ns1:CreateMediaProfileResponse */
class SOAP_CMAC ns1__CreateMediaProfileResponse
{
public:
	ns1__MediaProfile *MediaProfile;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:MediaProfile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 863; } /* = unique id SOAP_TYPE_ns1__CreateMediaProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateMediaProfileResponse(): MediaProfile(NULL), soap(NULL) { ns1__CreateMediaProfileResponse::soap_default(NULL); }
	virtual ~ns1__CreateMediaProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteMediaProfileRequest
#define SOAP_TYPE_ns1__DeleteMediaProfileRequest (864)
/* ns1:DeleteMediaProfileRequest */
class SOAP_CMAC ns1__DeleteMediaProfileRequest
{
public:
	char *token;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 864; } /* = unique id SOAP_TYPE_ns1__DeleteMediaProfileRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteMediaProfileRequest(): token(NULL), soap(NULL) { ns1__DeleteMediaProfileRequest::soap_default(NULL); }
	virtual ~ns1__DeleteMediaProfileRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteMediaProfileResponse
#define SOAP_TYPE_ns1__DeleteMediaProfileResponse (865)
/* ns1:DeleteMediaProfileResponse */
class SOAP_CMAC ns1__DeleteMediaProfileResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 865; } /* = unique id SOAP_TYPE_ns1__DeleteMediaProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteMediaProfileResponse(): soap(NULL) { ns1__DeleteMediaProfileResponse::soap_default(NULL); }
	virtual ~ns1__DeleteMediaProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetMediaProfileRequest
#define SOAP_TYPE_ns1__GetMediaProfileRequest (866)
/* ns1:GetMediaProfileRequest */
class SOAP_CMAC ns1__GetMediaProfileRequest
{
public:
	char *token;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 866; } /* = unique id SOAP_TYPE_ns1__GetMediaProfileRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetMediaProfileRequest(): token(NULL), soap(NULL) { ns1__GetMediaProfileRequest::soap_default(NULL); }
	virtual ~ns1__GetMediaProfileRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetMediaProfileResponse
#define SOAP_TYPE_ns1__GetMediaProfileResponse (867)
/* ns1:GetMediaProfileResponse */
class SOAP_CMAC ns1__GetMediaProfileResponse
{
public:
	ns1__MediaProfile *MediaProfile;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:MediaProfile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 867; } /* = unique id SOAP_TYPE_ns1__GetMediaProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetMediaProfileResponse(): MediaProfile(NULL), soap(NULL) { ns1__GetMediaProfileResponse::soap_default(NULL); }
	virtual ~ns1__GetMediaProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetMediaProfilesRequest
#define SOAP_TYPE_ns1__GetMediaProfilesRequest (868)
/* ns1:GetMediaProfilesRequest */
class SOAP_CMAC ns1__GetMediaProfilesRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 868; } /* = unique id SOAP_TYPE_ns1__GetMediaProfilesRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetMediaProfilesRequest(): soap(NULL) { ns1__GetMediaProfilesRequest::soap_default(NULL); }
	virtual ~ns1__GetMediaProfilesRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetMediaProfilesResponse
#define SOAP_TYPE_ns1__GetMediaProfilesResponse (869)
/* ns1:GetMediaProfilesResponse */
class SOAP_CMAC ns1__GetMediaProfilesResponse
{
public:
	int __sizeMediaProfiles;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <MediaProfiles> */
	ns1__MediaProfile **MediaProfiles;	/* optional element of type ns1:MediaProfile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 869; } /* = unique id SOAP_TYPE_ns1__GetMediaProfilesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetMediaProfilesResponse(): MediaProfiles(NULL), soap(NULL) { ns1__GetMediaProfilesResponse::soap_default(NULL); }
	virtual ~ns1__GetMediaProfilesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetMediaProfileRequest
#define SOAP_TYPE_ns1__SetMediaProfileRequest (870)
/* ns1:SetMediaProfileRequest */
class SOAP_CMAC ns1__SetMediaProfileRequest
{
public:
	ns1__MediaProfile *MediaProfile;	/* required element of type ns1:MediaProfile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 870; } /* = unique id SOAP_TYPE_ns1__SetMediaProfileRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetMediaProfileRequest(): MediaProfile(NULL), soap(NULL) { ns1__SetMediaProfileRequest::soap_default(NULL); }
	virtual ~ns1__SetMediaProfileRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetMediaProfileResponse
#define SOAP_TYPE_ns1__SetMediaProfileResponse (871)
/* ns1:SetMediaProfileResponse */
class SOAP_CMAC ns1__SetMediaProfileResponse
{
public:
	ns1__MediaProfile *MediaProfile;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:MediaProfile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 871; } /* = unique id SOAP_TYPE_ns1__SetMediaProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetMediaProfileResponse(): MediaProfile(NULL), soap(NULL) { ns1__SetMediaProfileResponse::soap_default(NULL); }
	virtual ~ns1__SetMediaProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetStreamVendorsRequest
#define SOAP_TYPE_ns1__GetStreamVendorsRequest (872)
/* ns1:GetStreamVendorsRequest */
class SOAP_CMAC ns1__GetStreamVendorsRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 872; } /* = unique id SOAP_TYPE_ns1__GetStreamVendorsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetStreamVendorsRequest(): soap(NULL) { ns1__GetStreamVendorsRequest::soap_default(NULL); }
	virtual ~ns1__GetStreamVendorsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetStreamVendorsResponse
#define SOAP_TYPE_ns1__GetStreamVendorsResponse (873)
/* ns1:GetStreamVendorsResponse */
class SOAP_CMAC ns1__GetStreamVendorsResponse
{
public:
	int __sizeStreamVendors;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <StreamVendors> */
	ns1__StreamVendor **StreamVendors;	/* optional element of type ns1:StreamVendor */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 873; } /* = unique id SOAP_TYPE_ns1__GetStreamVendorsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetStreamVendorsResponse(): StreamVendors(NULL), soap(NULL) { ns1__GetStreamVendorsResponse::soap_default(NULL); }
	virtual ~ns1__GetStreamVendorsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetStreamVendorDevicesRequest
#define SOAP_TYPE_ns1__GetStreamVendorDevicesRequest (874)
/* ns1:GetStreamVendorDevicesRequest */
class SOAP_CMAC ns1__GetStreamVendorDevicesRequest
{
public:
	int vendorId;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 874; } /* = unique id SOAP_TYPE_ns1__GetStreamVendorDevicesRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetStreamVendorDevicesRequest(): soap(NULL) { ns1__GetStreamVendorDevicesRequest::soap_default(NULL); }
	virtual ~ns1__GetStreamVendorDevicesRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetStreamVendorDevicesResponse
#define SOAP_TYPE_ns1__GetStreamVendorDevicesResponse (875)
/* ns1:GetStreamVendorDevicesResponse */
class SOAP_CMAC ns1__GetStreamVendorDevicesResponse
{
public:
	int __sizeStreamVendorDevices;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <StreamVendorDevices> */
	ns1__StreamVendorDevice **StreamVendorDevices;	/* optional element of type ns1:StreamVendorDevice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 875; } /* = unique id SOAP_TYPE_ns1__GetStreamVendorDevicesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetStreamVendorDevicesResponse(): StreamVendorDevices(NULL), soap(NULL) { ns1__GetStreamVendorDevicesResponse::soap_default(NULL); }
	virtual ~ns1__GetStreamVendorDevicesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetStreamVendorDeviceProtocolsRequest
#define SOAP_TYPE_ns1__GetStreamVendorDeviceProtocolsRequest (876)
/* ns1:GetStreamVendorDeviceProtocolsRequest */
class SOAP_CMAC ns1__GetStreamVendorDeviceProtocolsRequest
{
public:
	int vendorId;	/* required element of type xsd:int */
	int vendorDeviceId;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 876; } /* = unique id SOAP_TYPE_ns1__GetStreamVendorDeviceProtocolsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetStreamVendorDeviceProtocolsRequest(): soap(NULL) { ns1__GetStreamVendorDeviceProtocolsRequest::soap_default(NULL); }
	virtual ~ns1__GetStreamVendorDeviceProtocolsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetStreamVendorDeviceProtocolsResponse
#define SOAP_TYPE_ns1__GetStreamVendorDeviceProtocolsResponse (877)
/* ns1:GetStreamVendorDeviceProtocolsResponse */
class SOAP_CMAC ns1__GetStreamVendorDeviceProtocolsResponse
{
public:
	int __sizeStreamVendorDeviceProtocols;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <StreamVendorDeviceProtocols> */
	ns1__StreamVendorDeviceProtocol **StreamVendorDeviceProtocols;	/* optional element of type ns1:StreamVendorDeviceProtocol */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 877; } /* = unique id SOAP_TYPE_ns1__GetStreamVendorDeviceProtocolsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetStreamVendorDeviceProtocolsResponse(): StreamVendorDeviceProtocols(NULL), soap(NULL) { ns1__GetStreamVendorDeviceProtocolsResponse::soap_default(NULL); }
	virtual ~ns1__GetStreamVendorDeviceProtocolsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetStreamVendorDeviceVersionsRequest
#define SOAP_TYPE_ns1__GetStreamVendorDeviceVersionsRequest (878)
/* ns1:GetStreamVendorDeviceVersionsRequest */
class SOAP_CMAC ns1__GetStreamVendorDeviceVersionsRequest
{
public:
	int vendorId;	/* required element of type xsd:int */
	int vendorDeviceId;	/* required element of type xsd:int */
	int vendorDeviceProtocolId;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 878; } /* = unique id SOAP_TYPE_ns1__GetStreamVendorDeviceVersionsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetStreamVendorDeviceVersionsRequest(): soap(NULL) { ns1__GetStreamVendorDeviceVersionsRequest::soap_default(NULL); }
	virtual ~ns1__GetStreamVendorDeviceVersionsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetStreamVendorDeviceVersionsResponse
#define SOAP_TYPE_ns1__GetStreamVendorDeviceVersionsResponse (879)
/* ns1:GetStreamVendorDeviceVersionsResponse */
class SOAP_CMAC ns1__GetStreamVendorDeviceVersionsResponse
{
public:
	int __sizeStreamVendorDeviceVersions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <StreamVendorDeviceVersions> */
	ns1__StreamVendorDeviceVersion **StreamVendorDeviceVersions;	/* optional element of type ns1:StreamVendorDeviceVersion */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 879; } /* = unique id SOAP_TYPE_ns1__GetStreamVendorDeviceVersionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetStreamVendorDeviceVersionsResponse(): StreamVendorDeviceVersions(NULL), soap(NULL) { ns1__GetStreamVendorDeviceVersionsResponse::soap_default(NULL); }
	virtual ~ns1__GetStreamVendorDeviceVersionsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetPTZVendorsRequest
#define SOAP_TYPE_ns1__GetPTZVendorsRequest (880)
/* ns1:GetPTZVendorsRequest */
class SOAP_CMAC ns1__GetPTZVendorsRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 880; } /* = unique id SOAP_TYPE_ns1__GetPTZVendorsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetPTZVendorsRequest(): soap(NULL) { ns1__GetPTZVendorsRequest::soap_default(NULL); }
	virtual ~ns1__GetPTZVendorsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetPTZVendorsResponse
#define SOAP_TYPE_ns1__GetPTZVendorsResponse (881)
/* ns1:GetPTZVendorsResponse */
class SOAP_CMAC ns1__GetPTZVendorsResponse
{
public:
	int __sizePTZVendors;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <PTZVendors> */
	ns1__PTZVendor **PTZVendors;	/* optional element of type ns1:PTZVendor */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 881; } /* = unique id SOAP_TYPE_ns1__GetPTZVendorsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetPTZVendorsResponse(): PTZVendors(NULL), soap(NULL) { ns1__GetPTZVendorsResponse::soap_default(NULL); }
	virtual ~ns1__GetPTZVendorsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetPTZVendorDevicesRequest
#define SOAP_TYPE_ns1__GetPTZVendorDevicesRequest (882)
/* ns1:GetPTZVendorDevicesRequest */
class SOAP_CMAC ns1__GetPTZVendorDevicesRequest
{
public:
	int vendorId;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 882; } /* = unique id SOAP_TYPE_ns1__GetPTZVendorDevicesRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetPTZVendorDevicesRequest(): soap(NULL) { ns1__GetPTZVendorDevicesRequest::soap_default(NULL); }
	virtual ~ns1__GetPTZVendorDevicesRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetPTZVendorDevicesResponse
#define SOAP_TYPE_ns1__GetPTZVendorDevicesResponse (883)
/* ns1:GetPTZVendorDevicesResponse */
class SOAP_CMAC ns1__GetPTZVendorDevicesResponse
{
public:
	int __sizePTZVendorDevices;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <PTZVendorDevices> */
	ns1__PTZVendorDevice **PTZVendorDevices;	/* optional element of type ns1:PTZVendorDevice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 883; } /* = unique id SOAP_TYPE_ns1__GetPTZVendorDevicesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetPTZVendorDevicesResponse(): PTZVendorDevices(NULL), soap(NULL) { ns1__GetPTZVendorDevicesResponse::soap_default(NULL); }
	virtual ~ns1__GetPTZVendorDevicesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetPTZVendorDeviceProtocolsRequest
#define SOAP_TYPE_ns1__GetPTZVendorDeviceProtocolsRequest (884)
/* ns1:GetPTZVendorDeviceProtocolsRequest */
class SOAP_CMAC ns1__GetPTZVendorDeviceProtocolsRequest
{
public:
	int vendorId;	/* required element of type xsd:int */
	int vendorDeviceId;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 884; } /* = unique id SOAP_TYPE_ns1__GetPTZVendorDeviceProtocolsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetPTZVendorDeviceProtocolsRequest(): soap(NULL) { ns1__GetPTZVendorDeviceProtocolsRequest::soap_default(NULL); }
	virtual ~ns1__GetPTZVendorDeviceProtocolsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetPTZVendorDeviceProtocolsResponse
#define SOAP_TYPE_ns1__GetPTZVendorDeviceProtocolsResponse (885)
/* ns1:GetPTZVendorDeviceProtocolsResponse */
class SOAP_CMAC ns1__GetPTZVendorDeviceProtocolsResponse
{
public:
	int __sizePTZVendorDeviceProtocols;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <PTZVendorDeviceProtocols> */
	ns1__PTZVendorDeviceProtocol **PTZVendorDeviceProtocols;	/* optional element of type ns1:PTZVendorDeviceProtocol */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 885; } /* = unique id SOAP_TYPE_ns1__GetPTZVendorDeviceProtocolsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetPTZVendorDeviceProtocolsResponse(): PTZVendorDeviceProtocols(NULL), soap(NULL) { ns1__GetPTZVendorDeviceProtocolsResponse::soap_default(NULL); }
	virtual ~ns1__GetPTZVendorDeviceProtocolsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetPTZVendorDeviceVersionsRequest
#define SOAP_TYPE_ns1__GetPTZVendorDeviceVersionsRequest (886)
/* ns1:GetPTZVendorDeviceVersionsRequest */
class SOAP_CMAC ns1__GetPTZVendorDeviceVersionsRequest
{
public:
	int vendorId;	/* required element of type xsd:int */
	int vendorDeviceId;	/* required element of type xsd:int */
	int vendorDeviceProtocolId;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 886; } /* = unique id SOAP_TYPE_ns1__GetPTZVendorDeviceVersionsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetPTZVendorDeviceVersionsRequest(): soap(NULL) { ns1__GetPTZVendorDeviceVersionsRequest::soap_default(NULL); }
	virtual ~ns1__GetPTZVendorDeviceVersionsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetPTZVendorDeviceVersionsResponse
#define SOAP_TYPE_ns1__GetPTZVendorDeviceVersionsResponse (887)
/* ns1:GetPTZVendorDeviceVersionsResponse */
class SOAP_CMAC ns1__GetPTZVendorDeviceVersionsResponse
{
public:
	int __sizePTZVendorDeviceVersions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <PTZVendorDeviceVersions> */
	ns1__PTZVendorDeviceVersion **PTZVendorDeviceVersions;	/* optional element of type ns1:PTZVendorDeviceVersion */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 887; } /* = unique id SOAP_TYPE_ns1__GetPTZVendorDeviceVersionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetPTZVendorDeviceVersionsResponse(): PTZVendorDeviceVersions(NULL), soap(NULL) { ns1__GetPTZVendorDeviceVersionsResponse::soap_default(NULL); }
	virtual ~ns1__GetPTZVendorDeviceVersionsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetPTZPropertiesRequest
#define SOAP_TYPE_ns1__GetPTZPropertiesRequest (888)
/* ns1:GetPTZPropertiesRequest */
class SOAP_CMAC ns1__GetPTZPropertiesRequest
{
public:
	char *token;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 888; } /* = unique id SOAP_TYPE_ns1__GetPTZPropertiesRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetPTZPropertiesRequest(): token(NULL), soap(NULL) { ns1__GetPTZPropertiesRequest::soap_default(NULL); }
	virtual ~ns1__GetPTZPropertiesRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetPTZPropertiesResponse
#define SOAP_TYPE_ns1__GetPTZPropertiesResponse (889)
/* ns1:GetPTZPropertiesResponse */
class SOAP_CMAC ns1__GetPTZPropertiesResponse
{
public:
	bool osdMenu;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	bool homePosition;	/* required element of type xsd:boolean */
	bool preset;	/* required element of type xsd:boolean */
	bool presetTour;	/* required element of type xsd:boolean */
	bool continuousMove;	/* required element of type xsd:boolean */
	bool relativeMove;	/* required element of type xsd:boolean */
	bool absoluteMove;	/* required element of type xsd:boolean */
	bool numbericPresetName;	/* required element of type xsd:boolean */
	bool numbericPresetTourName;	/* required element of type xsd:boolean */
	bool changablePresetName;	/* required element of type xsd:boolean */
	bool changablePresetTourName;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 889; } /* = unique id SOAP_TYPE_ns1__GetPTZPropertiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetPTZPropertiesResponse(): soap(NULL) { ns1__GetPTZPropertiesResponse::soap_default(NULL); }
	virtual ~ns1__GetPTZPropertiesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VideoSourceConfiguration
#define SOAP_TYPE_ns1__VideoSourceConfiguration (890)
/* ns1:VideoSourceConfiguration */
class SOAP_CMAC ns1__VideoSourceConfiguration
{
public:
	char *token;	/* required element of type xsd:string */
	char *name;	/* required element of type xsd:string */
	int useCount;	/* required element of type xsd:int */
	char *sourceToken;	/* required element of type xsd:string */
	int boundsX;	/* required element of type xsd:int */
	int boundsY;	/* required element of type xsd:int */
	int boundsWidth;	/* required element of type xsd:int */
	int boundsHeight;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 890; } /* = unique id SOAP_TYPE_ns1__VideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VideoSourceConfiguration(): token(NULL), name(NULL), sourceToken(NULL), soap(NULL) { ns1__VideoSourceConfiguration::soap_default(NULL); }
	virtual ~ns1__VideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AudioSourceConfiguration
#define SOAP_TYPE_ns1__AudioSourceConfiguration (891)
/* ns1:AudioSourceConfiguration */
class SOAP_CMAC ns1__AudioSourceConfiguration
{
public:
	char *token;	/* required element of type xsd:string */
	char *name;	/* required element of type xsd:string */
	int useCount;	/* required element of type xsd:int */
	char *sourceToken;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 891; } /* = unique id SOAP_TYPE_ns1__AudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AudioSourceConfiguration(): token(NULL), name(NULL), sourceToken(NULL), soap(NULL) { ns1__AudioSourceConfiguration::soap_default(NULL); }
	virtual ~ns1__AudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VideoEncoderConfiguration
#define SOAP_TYPE_ns1__VideoEncoderConfiguration (892)
/* ns1:VideoEncoderConfiguration */
class SOAP_CMAC ns1__VideoEncoderConfiguration
{
public:
	char *token;	/* required element of type xsd:string */
	char *name;	/* required element of type xsd:string */
	int useCount;	/* required element of type xsd:int */
	int encoding;	/* required element of type xsd:int */
	int height;	/* required element of type xsd:int */
	int width;	/* required element of type xsd:int */
	float quality;	/* required element of type xsd:float */
	int framerate;	/* required element of type xsd:int */
	int encodingInterval;	/* required element of type xsd:int */
	int bitrate;	/* required element of type xsd:int */
	int gopSize;	/* required element of type xsd:int */
	int profile;	/* required element of type xsd:int */
	int ipType;	/* required element of type xsd:int */
	char *address;	/* required element of type xsd:string */
	int port;	/* required element of type xsd:int */
	int ttl;	/* required element of type xsd:int */
	bool autoStart;	/* required element of type xsd:boolean */
	LONG64 sessionTimeout;	/* external */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 892; } /* = unique id SOAP_TYPE_ns1__VideoEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VideoEncoderConfiguration(): token(NULL), name(NULL), address(NULL), soap(NULL) { ns1__VideoEncoderConfiguration::soap_default(NULL); }
	virtual ~ns1__VideoEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AudioEncoderConfiguration
#define SOAP_TYPE_ns1__AudioEncoderConfiguration (893)
/* ns1:AudioEncoderConfiguration */
class SOAP_CMAC ns1__AudioEncoderConfiguration
{
public:
	char *token;	/* required element of type xsd:string */
	char *name;	/* required element of type xsd:string */
	int useCount;	/* required element of type xsd:int */
	int encoding;	/* required element of type xsd:int */
	int bitrate;	/* required element of type xsd:int */
	int sampleRate;	/* required element of type xsd:int */
	int ipType;	/* required element of type xsd:int */
	char *address;	/* required element of type xsd:string */
	int port;	/* required element of type xsd:int */
	int ttl;	/* required element of type xsd:int */
	bool autoStart;	/* required element of type xsd:boolean */
	LONG64 sessionTimeout;	/* external */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 893; } /* = unique id SOAP_TYPE_ns1__AudioEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AudioEncoderConfiguration(): token(NULL), name(NULL), address(NULL), soap(NULL) { ns1__AudioEncoderConfiguration::soap_default(NULL); }
	virtual ~ns1__AudioEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PTZConfiguration
#define SOAP_TYPE_ns1__PTZConfiguration (894)
/* ns1:PTZConfiguration */
class SOAP_CMAC ns1__PTZConfiguration
{
public:
	char *token;	/* required element of type xsd:string */
	char *name;	/* required element of type xsd:string */
	int useCount;	/* required element of type xsd:int */
	char *nodeToken;	/* required element of type xsd:string */
	char *DefaultAbsolutePanTiltPositionSpace;	/* optional element of type xsd:string */
	char *DefaultAbsoluteZoomPositionSpace;	/* optional element of type xsd:string */
	char *DefaultRelativePanTiltTranslationSpace;	/* optional element of type xsd:string */
	char *DefaultRelativeZoomTranslationSpace;	/* optional element of type xsd:string */
	char *DefaultContinuousPanTiltVelocitySpace;	/* optional element of type xsd:string */
	char *DefaultContinuousZoomVelocitySpace;	/* optional element of type xsd:string */
	char *DefaultPanTiltSpeedSpace;	/* optional element of type xsd:string */
	float *DefaultPanSpeed;	/* optional element of type xsd:float */
	float *DefaultTiltSpeed;	/* optional element of type xsd:float */
	char *DefaultZoomSpeedSpace;	/* optional element of type xsd:string */
	float *DefaultZoomSpeed;	/* optional element of type xsd:float */
	LONG64 *DefaultPTZTimeout;	/* optional element of type xsd:duration */
	char *PanTiltLimitsSpace;	/* optional element of type xsd:string */
	float *MinPanLimits;	/* optional element of type xsd:float */
	float *MaxPanLimits;	/* optional element of type xsd:float */
	float *MinTiltLimits;	/* optional element of type xsd:float */
	float *MaxTiltLimits;	/* optional element of type xsd:float */
	char *ZoomLimitsSpace;	/* optional element of type xsd:string */
	float *MinZoomLimits;	/* optional element of type xsd:float */
	float *MaxZoomLimits;	/* optional element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 894; } /* = unique id SOAP_TYPE_ns1__PTZConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PTZConfiguration(): token(NULL), name(NULL), nodeToken(NULL), DefaultAbsolutePanTiltPositionSpace(NULL), DefaultAbsoluteZoomPositionSpace(NULL), DefaultRelativePanTiltTranslationSpace(NULL), DefaultRelativeZoomTranslationSpace(NULL), DefaultContinuousPanTiltVelocitySpace(NULL), DefaultContinuousZoomVelocitySpace(NULL), DefaultPanTiltSpeedSpace(NULL), DefaultPanSpeed(NULL), DefaultTiltSpeed(NULL), DefaultZoomSpeedSpace(NULL), DefaultZoomSpeed(NULL), DefaultPTZTimeout(NULL), PanTiltLimitsSpace(NULL), MinPanLimits(NULL), MaxPanLimits(NULL), MinTiltLimits(NULL), MaxTiltLimits(NULL), ZoomLimitsSpace(NULL), MinZoomLimits(NULL), MaxZoomLimits(NULL), soap(NULL) { ns1__PTZConfiguration::soap_default(NULL); }
	virtual ~ns1__PTZConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateVideoSourceConfigurationRequest
#define SOAP_TYPE_ns1__CreateVideoSourceConfigurationRequest (895)
/* ns1:CreateVideoSourceConfigurationRequest */
class SOAP_CMAC ns1__CreateVideoSourceConfigurationRequest
{
public:
	ns1__VideoSourceConfiguration *VideoSourceConfiguration;	/* required element of type ns1:VideoSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 895; } /* = unique id SOAP_TYPE_ns1__CreateVideoSourceConfigurationRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateVideoSourceConfigurationRequest(): VideoSourceConfiguration(NULL), soap(NULL) { ns1__CreateVideoSourceConfigurationRequest::soap_default(NULL); }
	virtual ~ns1__CreateVideoSourceConfigurationRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateVideoSourceConfigurationResponse
#define SOAP_TYPE_ns1__CreateVideoSourceConfigurationResponse (896)
/* ns1:CreateVideoSourceConfigurationResponse */
class SOAP_CMAC ns1__CreateVideoSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 896; } /* = unique id SOAP_TYPE_ns1__CreateVideoSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateVideoSourceConfigurationResponse(): soap(NULL) { ns1__CreateVideoSourceConfigurationResponse::soap_default(NULL); }
	virtual ~ns1__CreateVideoSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteVideoSourceConfigurationRequest
#define SOAP_TYPE_ns1__DeleteVideoSourceConfigurationRequest (897)
/* ns1:DeleteVideoSourceConfigurationRequest */
class SOAP_CMAC ns1__DeleteVideoSourceConfigurationRequest
{
public:
	char *token;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 897; } /* = unique id SOAP_TYPE_ns1__DeleteVideoSourceConfigurationRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteVideoSourceConfigurationRequest(): token(NULL), soap(NULL) { ns1__DeleteVideoSourceConfigurationRequest::soap_default(NULL); }
	virtual ~ns1__DeleteVideoSourceConfigurationRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteVideoSourceConfigurationResponse
#define SOAP_TYPE_ns1__DeleteVideoSourceConfigurationResponse (898)
/* ns1:DeleteVideoSourceConfigurationResponse */
class SOAP_CMAC ns1__DeleteVideoSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 898; } /* = unique id SOAP_TYPE_ns1__DeleteVideoSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteVideoSourceConfigurationResponse(): soap(NULL) { ns1__DeleteVideoSourceConfigurationResponse::soap_default(NULL); }
	virtual ~ns1__DeleteVideoSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateVideoEncoderConfigurationRequest
#define SOAP_TYPE_ns1__CreateVideoEncoderConfigurationRequest (899)
/* ns1:CreateVideoEncoderConfigurationRequest */
class SOAP_CMAC ns1__CreateVideoEncoderConfigurationRequest
{
public:
	ns1__VideoEncoderConfiguration *VideoEncoderConfiguration;	/* required element of type ns1:VideoEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 899; } /* = unique id SOAP_TYPE_ns1__CreateVideoEncoderConfigurationRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateVideoEncoderConfigurationRequest(): VideoEncoderConfiguration(NULL), soap(NULL) { ns1__CreateVideoEncoderConfigurationRequest::soap_default(NULL); }
	virtual ~ns1__CreateVideoEncoderConfigurationRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateVideoEncoderConfigurationResponse
#define SOAP_TYPE_ns1__CreateVideoEncoderConfigurationResponse (900)
/* ns1:CreateVideoEncoderConfigurationResponse */
class SOAP_CMAC ns1__CreateVideoEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 900; } /* = unique id SOAP_TYPE_ns1__CreateVideoEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateVideoEncoderConfigurationResponse(): soap(NULL) { ns1__CreateVideoEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~ns1__CreateVideoEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteVideoEncoderConfigurationRequest
#define SOAP_TYPE_ns1__DeleteVideoEncoderConfigurationRequest (901)
/* ns1:DeleteVideoEncoderConfigurationRequest */
class SOAP_CMAC ns1__DeleteVideoEncoderConfigurationRequest
{
public:
	char *token;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 901; } /* = unique id SOAP_TYPE_ns1__DeleteVideoEncoderConfigurationRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteVideoEncoderConfigurationRequest(): token(NULL), soap(NULL) { ns1__DeleteVideoEncoderConfigurationRequest::soap_default(NULL); }
	virtual ~ns1__DeleteVideoEncoderConfigurationRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteVideoEncoderConfigurationResponse
#define SOAP_TYPE_ns1__DeleteVideoEncoderConfigurationResponse (902)
/* ns1:DeleteVideoEncoderConfigurationResponse */
class SOAP_CMAC ns1__DeleteVideoEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 902; } /* = unique id SOAP_TYPE_ns1__DeleteVideoEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteVideoEncoderConfigurationResponse(): soap(NULL) { ns1__DeleteVideoEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~ns1__DeleteVideoEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateAudioSourceConfigurationRequest
#define SOAP_TYPE_ns1__CreateAudioSourceConfigurationRequest (903)
/* ns1:CreateAudioSourceConfigurationRequest */
class SOAP_CMAC ns1__CreateAudioSourceConfigurationRequest
{
public:
	ns1__AudioSourceConfiguration *AudioSourceConfiguration;	/* required element of type ns1:AudioSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 903; } /* = unique id SOAP_TYPE_ns1__CreateAudioSourceConfigurationRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateAudioSourceConfigurationRequest(): AudioSourceConfiguration(NULL), soap(NULL) { ns1__CreateAudioSourceConfigurationRequest::soap_default(NULL); }
	virtual ~ns1__CreateAudioSourceConfigurationRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateAudioSourceConfigurationResponse
#define SOAP_TYPE_ns1__CreateAudioSourceConfigurationResponse (904)
/* ns1:CreateAudioSourceConfigurationResponse */
class SOAP_CMAC ns1__CreateAudioSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 904; } /* = unique id SOAP_TYPE_ns1__CreateAudioSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateAudioSourceConfigurationResponse(): soap(NULL) { ns1__CreateAudioSourceConfigurationResponse::soap_default(NULL); }
	virtual ~ns1__CreateAudioSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteAudioSourceConfigurationRequest
#define SOAP_TYPE_ns1__DeleteAudioSourceConfigurationRequest (905)
/* ns1:DeleteAudioSourceConfigurationRequest */
class SOAP_CMAC ns1__DeleteAudioSourceConfigurationRequest
{
public:
	char *token;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 905; } /* = unique id SOAP_TYPE_ns1__DeleteAudioSourceConfigurationRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteAudioSourceConfigurationRequest(): token(NULL), soap(NULL) { ns1__DeleteAudioSourceConfigurationRequest::soap_default(NULL); }
	virtual ~ns1__DeleteAudioSourceConfigurationRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteAudioSourceConfigurationResponse
#define SOAP_TYPE_ns1__DeleteAudioSourceConfigurationResponse (906)
/* ns1:DeleteAudioSourceConfigurationResponse */
class SOAP_CMAC ns1__DeleteAudioSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 906; } /* = unique id SOAP_TYPE_ns1__DeleteAudioSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteAudioSourceConfigurationResponse(): soap(NULL) { ns1__DeleteAudioSourceConfigurationResponse::soap_default(NULL); }
	virtual ~ns1__DeleteAudioSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateAudioEncoderConfigurationRequest
#define SOAP_TYPE_ns1__CreateAudioEncoderConfigurationRequest (907)
/* ns1:CreateAudioEncoderConfigurationRequest */
class SOAP_CMAC ns1__CreateAudioEncoderConfigurationRequest
{
public:
	ns1__AudioEncoderConfiguration *AudioEncoderConfiguration;	/* required element of type ns1:AudioEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 907; } /* = unique id SOAP_TYPE_ns1__CreateAudioEncoderConfigurationRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateAudioEncoderConfigurationRequest(): AudioEncoderConfiguration(NULL), soap(NULL) { ns1__CreateAudioEncoderConfigurationRequest::soap_default(NULL); }
	virtual ~ns1__CreateAudioEncoderConfigurationRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateAudioEncoderConfigurationResponse
#define SOAP_TYPE_ns1__CreateAudioEncoderConfigurationResponse (908)
/* ns1:CreateAudioEncoderConfigurationResponse */
class SOAP_CMAC ns1__CreateAudioEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 908; } /* = unique id SOAP_TYPE_ns1__CreateAudioEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateAudioEncoderConfigurationResponse(): soap(NULL) { ns1__CreateAudioEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~ns1__CreateAudioEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteAudioEncoderConfigurationRequest
#define SOAP_TYPE_ns1__DeleteAudioEncoderConfigurationRequest (909)
/* ns1:DeleteAudioEncoderConfigurationRequest */
class SOAP_CMAC ns1__DeleteAudioEncoderConfigurationRequest
{
public:
	char *token;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 909; } /* = unique id SOAP_TYPE_ns1__DeleteAudioEncoderConfigurationRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteAudioEncoderConfigurationRequest(): token(NULL), soap(NULL) { ns1__DeleteAudioEncoderConfigurationRequest::soap_default(NULL); }
	virtual ~ns1__DeleteAudioEncoderConfigurationRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteAudioEncoderConfigurationResponse
#define SOAP_TYPE_ns1__DeleteAudioEncoderConfigurationResponse (910)
/* ns1:DeleteAudioEncoderConfigurationResponse */
class SOAP_CMAC ns1__DeleteAudioEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 910; } /* = unique id SOAP_TYPE_ns1__DeleteAudioEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteAudioEncoderConfigurationResponse(): soap(NULL) { ns1__DeleteAudioEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~ns1__DeleteAudioEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreatePTZConfigurationRequest
#define SOAP_TYPE_ns1__CreatePTZConfigurationRequest (911)
/* ns1:CreatePTZConfigurationRequest */
class SOAP_CMAC ns1__CreatePTZConfigurationRequest
{
public:
	ns1__PTZConfiguration *PTZConfiguration;	/* required element of type ns1:PTZConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 911; } /* = unique id SOAP_TYPE_ns1__CreatePTZConfigurationRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreatePTZConfigurationRequest(): PTZConfiguration(NULL), soap(NULL) { ns1__CreatePTZConfigurationRequest::soap_default(NULL); }
	virtual ~ns1__CreatePTZConfigurationRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreatePTZConfigurationResponse
#define SOAP_TYPE_ns1__CreatePTZConfigurationResponse (912)
/* ns1:CreatePTZConfigurationResponse */
class SOAP_CMAC ns1__CreatePTZConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 912; } /* = unique id SOAP_TYPE_ns1__CreatePTZConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreatePTZConfigurationResponse(): soap(NULL) { ns1__CreatePTZConfigurationResponse::soap_default(NULL); }
	virtual ~ns1__CreatePTZConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeletePTZConfigurationRequest
#define SOAP_TYPE_ns1__DeletePTZConfigurationRequest (913)
/* ns1:DeletePTZConfigurationRequest */
class SOAP_CMAC ns1__DeletePTZConfigurationRequest
{
public:
	char *token;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 913; } /* = unique id SOAP_TYPE_ns1__DeletePTZConfigurationRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeletePTZConfigurationRequest(): token(NULL), soap(NULL) { ns1__DeletePTZConfigurationRequest::soap_default(NULL); }
	virtual ~ns1__DeletePTZConfigurationRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeletePTZConfigurationResponse
#define SOAP_TYPE_ns1__DeletePTZConfigurationResponse (914)
/* ns1:DeletePTZConfigurationResponse */
class SOAP_CMAC ns1__DeletePTZConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 914; } /* = unique id SOAP_TYPE_ns1__DeletePTZConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeletePTZConfigurationResponse(): soap(NULL) { ns1__DeletePTZConfigurationResponse::soap_default(NULL); }
	virtual ~ns1__DeletePTZConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSource
#define SOAP_TYPE_tt__VideoSource (263)
/* tt:VideoSource */
class SOAP_CMAC tt__VideoSource : public tt__DeviceEntity
{
public:
	float Framerate;	/* required element of type xsd:float */
	tt__VideoResolution *Resolution;	/* required element of type tt:VideoResolution */
	tt__ImagingSettings *Imaging;	/* optional element of type tt:ImagingSettings */
	tt__VideoSourceExtension *Extension;	/* optional element of type tt:VideoSourceExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 263; } /* = unique id SOAP_TYPE_tt__VideoSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSource(): Resolution(NULL), Imaging(NULL), Extension(NULL) { tt__VideoSource::soap_default(NULL); }
	virtual ~tt__VideoSource() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioSource
#define SOAP_TYPE_tt__AudioSource (266)
/* tt:AudioSource */
class SOAP_CMAC tt__AudioSource : public tt__DeviceEntity
{
public:
	int Channels;	/* required element of type xsd:int */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 266; } /* = unique id SOAP_TYPE_tt__AudioSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioSource(): __any(NULL) { tt__AudioSource::soap_default(NULL); }
	virtual ~tt__AudioSource() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfiguration
#define SOAP_TYPE_tt__VideoSourceConfiguration (271)
/* tt:VideoSourceConfiguration */
class SOAP_CMAC tt__VideoSourceConfiguration : public tt__ConfigurationEntity
{
public:
	char *SourceToken;	/* required element of type tt:ReferenceToken */
	tt__IntRectangle *Bounds;	/* required element of type tt:IntRectangle */
	tt__VideoSourceConfigurationExtension *Extension;	/* optional element of type tt:VideoSourceConfigurationExtension */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 271; } /* = unique id SOAP_TYPE_tt__VideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSourceConfiguration(): SourceToken(NULL), Bounds(NULL), Extension(NULL), __any(NULL) { tt__VideoSourceConfiguration::soap_default(NULL); }
	virtual ~tt__VideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoEncoderConfiguration
#define SOAP_TYPE_tt__VideoEncoderConfiguration (281)
/* tt:VideoEncoderConfiguration */
class SOAP_CMAC tt__VideoEncoderConfiguration : public tt__ConfigurationEntity
{
public:
	enum tt__VideoEncoding Encoding;	/* required element of type tt:VideoEncoding */
	tt__VideoResolution *Resolution;	/* required element of type tt:VideoResolution */
	float Quality;	/* required element of type xsd:float */
	tt__VideoRateControl *RateControl;	/* optional element of type tt:VideoRateControl */
	tt__Mpeg4Configuration *MPEG4;	/* optional element of type tt:Mpeg4Configuration */
	tt__H264Configuration *H264;	/* optional element of type tt:H264Configuration */
	tt__MulticastConfiguration *Multicast;	/* required element of type tt:MulticastConfiguration */
	LONG64 SessionTimeout;	/* external */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 281; } /* = unique id SOAP_TYPE_tt__VideoEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoEncoderConfiguration(): Resolution(NULL), RateControl(NULL), MPEG4(NULL), H264(NULL), Multicast(NULL), __any(NULL) { tt__VideoEncoderConfiguration::soap_default(NULL); }
	virtual ~tt__VideoEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__JpegOptions2
#define SOAP_TYPE_tt__JpegOptions2 (290)
/* tt:JpegOptions2 */
class SOAP_CMAC tt__JpegOptions2 : public tt__JpegOptions
{
public:
	tt__IntRange *BitrateRange;	/* required element of type tt:IntRange */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 290; } /* = unique id SOAP_TYPE_tt__JpegOptions2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__JpegOptions2(): BitrateRange(NULL), __any(NULL) { tt__JpegOptions2::soap_default(NULL); }
	virtual ~tt__JpegOptions2() { }
};
#endif

#ifndef SOAP_TYPE_tt__Mpeg4Options2
#define SOAP_TYPE_tt__Mpeg4Options2 (292)
/* tt:Mpeg4Options2 */
class SOAP_CMAC tt__Mpeg4Options2 : public tt__Mpeg4Options
{
public:
	tt__IntRange *BitrateRange;	/* required element of type tt:IntRange */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 292; } /* = unique id SOAP_TYPE_tt__Mpeg4Options2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Mpeg4Options2(): BitrateRange(NULL), __any(NULL) { tt__Mpeg4Options2::soap_default(NULL); }
	virtual ~tt__Mpeg4Options2() { }
};
#endif

#ifndef SOAP_TYPE_tt__H264Options2
#define SOAP_TYPE_tt__H264Options2 (294)
/* tt:H264Options2 */
class SOAP_CMAC tt__H264Options2 : public tt__H264Options
{
public:
	tt__IntRange *BitrateRange;	/* required element of type tt:IntRange */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 294; } /* = unique id SOAP_TYPE_tt__H264Options2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__H264Options2(): BitrateRange(NULL), __any(NULL) { tt__H264Options2::soap_default(NULL); }
	virtual ~tt__H264Options2() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioSourceConfiguration
#define SOAP_TYPE_tt__AudioSourceConfiguration (295)
/* tt:AudioSourceConfiguration */
class SOAP_CMAC tt__AudioSourceConfiguration : public tt__ConfigurationEntity
{
public:
	char *SourceToken;	/* required element of type tt:ReferenceToken */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 295; } /* = unique id SOAP_TYPE_tt__AudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioSourceConfiguration(): SourceToken(NULL), __any(NULL) { tt__AudioSourceConfiguration::soap_default(NULL); }
	virtual ~tt__AudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioEncoderConfiguration
#define SOAP_TYPE_tt__AudioEncoderConfiguration (298)
/* tt:AudioEncoderConfiguration */
class SOAP_CMAC tt__AudioEncoderConfiguration : public tt__ConfigurationEntity
{
public:
	enum tt__AudioEncoding Encoding;	/* required element of type tt:AudioEncoding */
	int Bitrate;	/* required element of type xsd:int */
	int SampleRate;	/* required element of type xsd:int */
	tt__MulticastConfiguration *Multicast;	/* required element of type tt:MulticastConfiguration */
	LONG64 SessionTimeout;	/* external */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 298; } /* = unique id SOAP_TYPE_tt__AudioEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioEncoderConfiguration(): Multicast(NULL), __any(NULL) { tt__AudioEncoderConfiguration::soap_default(NULL); }
	virtual ~tt__AudioEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoAnalyticsConfiguration
#define SOAP_TYPE_tt__VideoAnalyticsConfiguration (301)
/* tt:VideoAnalyticsConfiguration */
class SOAP_CMAC tt__VideoAnalyticsConfiguration : public tt__ConfigurationEntity
{
public:
	tt__AnalyticsEngineConfiguration *AnalyticsEngineConfiguration;	/* required element of type tt:AnalyticsEngineConfiguration */
	tt__RuleEngineConfiguration *RuleEngineConfiguration;	/* required element of type tt:RuleEngineConfiguration */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 301; } /* = unique id SOAP_TYPE_tt__VideoAnalyticsConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoAnalyticsConfiguration(): AnalyticsEngineConfiguration(NULL), RuleEngineConfiguration(NULL), __any(NULL) { tt__VideoAnalyticsConfiguration::soap_default(NULL); }
	virtual ~tt__VideoAnalyticsConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataConfiguration
#define SOAP_TYPE_tt__MetadataConfiguration (302)
/* tt:MetadataConfiguration */
class SOAP_CMAC tt__MetadataConfiguration : public tt__ConfigurationEntity
{
public:
	tt__PTZFilter *PTZStatus;	/* optional element of type tt:PTZFilter */
	tt__EventSubscription *Events;	/* optional element of type tt:EventSubscription */
	bool *Analytics;	/* optional element of type xsd:boolean */
	tt__MulticastConfiguration *Multicast;	/* required element of type tt:MulticastConfiguration */
	LONG64 SessionTimeout;	/* external */
	tt__AnalyticsEngineConfiguration *AnalyticsEngineConfiguration;	/* optional element of type tt:AnalyticsEngineConfiguration */
	tt__MetadataConfigurationExtension *Extension;	/* optional element of type tt:MetadataConfigurationExtension */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 302; } /* = unique id SOAP_TYPE_tt__MetadataConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataConfiguration(): PTZStatus(NULL), Events(NULL), Analytics(NULL), Multicast(NULL), AnalyticsEngineConfiguration(NULL), Extension(NULL), __any(NULL) { tt__MetadataConfiguration::soap_default(NULL); }
	virtual ~tt__MetadataConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoOutput
#define SOAP_TYPE_tt__VideoOutput (309)
/* tt:VideoOutput */
class SOAP_CMAC tt__VideoOutput : public tt__DeviceEntity
{
public:
	tt__Layout *Layout;	/* required element of type tt:Layout */
	tt__VideoResolution *Resolution;	/* optional element of type tt:VideoResolution */
	float *RefreshRate;	/* optional element of type xsd:float */
	float *AspectRatio;	/* optional element of type xsd:float */
	tt__VideoOutputExtension *Extension;	/* optional element of type tt:VideoOutputExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 309; } /* = unique id SOAP_TYPE_tt__VideoOutput */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoOutput(): Layout(NULL), Resolution(NULL), RefreshRate(NULL), AspectRatio(NULL), Extension(NULL) { tt__VideoOutput::soap_default(NULL); }
	virtual ~tt__VideoOutput() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoOutputConfiguration
#define SOAP_TYPE_tt__VideoOutputConfiguration (311)
/* tt:VideoOutputConfiguration */
class SOAP_CMAC tt__VideoOutputConfiguration : public tt__ConfigurationEntity
{
public:
	char *OutputToken;	/* required element of type tt:ReferenceToken */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 311; } /* = unique id SOAP_TYPE_tt__VideoOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoOutputConfiguration(): OutputToken(NULL), __any(NULL) { tt__VideoOutputConfiguration::soap_default(NULL); }
	virtual ~tt__VideoOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioOutput
#define SOAP_TYPE_tt__AudioOutput (318)
/* tt:AudioOutput */
class SOAP_CMAC tt__AudioOutput : public tt__DeviceEntity
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 318; } /* = unique id SOAP_TYPE_tt__AudioOutput */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioOutput(): __any(NULL) { tt__AudioOutput::soap_default(NULL); }
	virtual ~tt__AudioOutput() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioOutputConfiguration
#define SOAP_TYPE_tt__AudioOutputConfiguration (319)
/* tt:AudioOutputConfiguration */
class SOAP_CMAC tt__AudioOutputConfiguration : public tt__ConfigurationEntity
{
public:
	char *OutputToken;	/* required element of type tt:ReferenceToken */
	char *SendPrimacy;	/* optional element of type xsd:anyURI */
	int OutputLevel;	/* required element of type xsd:int */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 319; } /* = unique id SOAP_TYPE_tt__AudioOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioOutputConfiguration(): OutputToken(NULL), SendPrimacy(NULL), __any(NULL) { tt__AudioOutputConfiguration::soap_default(NULL); }
	virtual ~tt__AudioOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioDecoderConfiguration
#define SOAP_TYPE_tt__AudioDecoderConfiguration (321)
/* tt:AudioDecoderConfiguration */
class SOAP_CMAC tt__AudioDecoderConfiguration : public tt__ConfigurationEntity
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 321; } /* = unique id SOAP_TYPE_tt__AudioDecoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioDecoderConfiguration(): __any(NULL) { tt__AudioDecoderConfiguration::soap_default(NULL); }
	virtual ~tt__AudioDecoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterface
#define SOAP_TYPE_tt__NetworkInterface (332)
/* tt:NetworkInterface */
class SOAP_CMAC tt__NetworkInterface : public tt__DeviceEntity
{
public:
	bool Enabled;	/* required element of type xsd:boolean */
	tt__NetworkInterfaceInfo *Info;	/* optional element of type tt:NetworkInterfaceInfo */
	tt__NetworkInterfaceLink *Link;	/* optional element of type tt:NetworkInterfaceLink */
	tt__IPv4NetworkInterface *IPv4;	/* optional element of type tt:IPv4NetworkInterface */
	tt__IPv6NetworkInterface *IPv6;	/* optional element of type tt:IPv6NetworkInterface */
	tt__NetworkInterfaceExtension *Extension;	/* optional element of type tt:NetworkInterfaceExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 332; } /* = unique id SOAP_TYPE_tt__NetworkInterface */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterface(): Info(NULL), Link(NULL), IPv4(NULL), IPv6(NULL), Extension(NULL) { tt__NetworkInterface::soap_default(NULL); }
	virtual ~tt__NetworkInterface() { }
};
#endif

#ifndef SOAP_TYPE_tt__CertificateUsage
#define SOAP_TYPE_tt__CertificateUsage (436)
/* Primitive tt:CertificateUsage schema type: */
class SOAP_CMAC tt__CertificateUsage
{
public:
	char *__item;
	bool Critical;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 436; } /* = unique id SOAP_TYPE_tt__CertificateUsage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CertificateUsage(): __item(NULL), soap(NULL) { tt__CertificateUsage::soap_default(NULL); }
	virtual ~tt__CertificateUsage() { }
};
#endif

#ifndef SOAP_TYPE_tt__RelayOutput
#define SOAP_TYPE_tt__RelayOutput (445)
/* tt:RelayOutput */
class SOAP_CMAC tt__RelayOutput : public tt__DeviceEntity
{
public:
	tt__RelayOutputSettings *Properties;	/* required element of type tt:RelayOutputSettings */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 445; } /* = unique id SOAP_TYPE_tt__RelayOutput */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RelayOutput(): Properties(NULL), __any(NULL) { tt__RelayOutput::soap_default(NULL); }
	virtual ~tt__RelayOutput() { }
};
#endif

#ifndef SOAP_TYPE_tt__DigitalInput
#define SOAP_TYPE_tt__DigitalInput (446)
/* tt:DigitalInput */
class SOAP_CMAC tt__DigitalInput : public tt__DeviceEntity
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 446; } /* = unique id SOAP_TYPE_tt__DigitalInput */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DigitalInput(): __any(NULL) { tt__DigitalInput::soap_default(NULL); }
	virtual ~tt__DigitalInput() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZNode
#define SOAP_TYPE_tt__PTZNode (447)
/* tt:PTZNode */
class SOAP_CMAC tt__PTZNode : public tt__DeviceEntity
{
public:
	char *Name;	/* optional element of type tt:Name */
	tt__PTZSpaces *SupportedPTZSpaces;	/* required element of type tt:PTZSpaces */
	int MaximumNumberOfPresets;	/* required element of type xsd:int */
	bool HomeSupported;	/* required element of type xsd:boolean */
	int __sizeAuxiliaryCommands;	/* sequence of elements <AuxiliaryCommands> */
	char **AuxiliaryCommands;	/* optional element of type tt:AuxiliaryData */
	tt__PTZNodeExtension *Extension;	/* optional element of type tt:PTZNodeExtension */
	bool *FixedHomePosition;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 447; } /* = unique id SOAP_TYPE_tt__PTZNode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZNode(): Name(NULL), SupportedPTZSpaces(NULL), AuxiliaryCommands(NULL), Extension(NULL), FixedHomePosition(NULL) { tt__PTZNode::soap_default(NULL); }
	virtual ~tt__PTZNode() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZConfiguration
#define SOAP_TYPE_tt__PTZConfiguration (452)
/* tt:PTZConfiguration */
class SOAP_CMAC tt__PTZConfiguration : public tt__ConfigurationEntity
{
public:
	char *NodeToken;	/* required element of type tt:ReferenceToken */
	char *DefaultAbsolutePantTiltPositionSpace;	/* optional element of type xsd:anyURI */
	char *DefaultAbsoluteZoomPositionSpace;	/* optional element of type xsd:anyURI */
	char *DefaultRelativePanTiltTranslationSpace;	/* optional element of type xsd:anyURI */
	char *DefaultRelativeZoomTranslationSpace;	/* optional element of type xsd:anyURI */
	char *DefaultContinuousPanTiltVelocitySpace;	/* optional element of type xsd:anyURI */
	char *DefaultContinuousZoomVelocitySpace;	/* optional element of type xsd:anyURI */
	tt__PTZSpeed *DefaultPTZSpeed;	/* optional element of type tt:PTZSpeed */
	LONG64 *DefaultPTZTimeout;	/* optional element of type xsd:duration */
	tt__PanTiltLimits *PanTiltLimits;	/* optional element of type tt:PanTiltLimits */
	tt__ZoomLimits *ZoomLimits;	/* optional element of type tt:ZoomLimits */
	tt__PTZConfigurationExtension *Extension;	/* optional element of type tt:PTZConfigurationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 452; } /* = unique id SOAP_TYPE_tt__PTZConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZConfiguration(): NodeToken(NULL), DefaultAbsolutePantTiltPositionSpace(NULL), DefaultAbsoluteZoomPositionSpace(NULL), DefaultRelativePanTiltTranslationSpace(NULL), DefaultRelativeZoomTranslationSpace(NULL), DefaultContinuousPanTiltVelocitySpace(NULL), DefaultContinuousZoomVelocitySpace(NULL), DefaultPTZSpeed(NULL), DefaultPTZTimeout(NULL), PanTiltLimits(NULL), ZoomLimits(NULL), Extension(NULL) { tt__PTZConfiguration::soap_default(NULL); }
	virtual ~tt__PTZConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__Object
#define SOAP_TYPE_tt__Object (578)
/* tt:Object */
class SOAP_CMAC tt__Object : public tt__ObjectId
{
public:
	tt__Appearance *Appearance;	/* optional element of type tt:Appearance */
	tt__Behaviour *Behaviour;	/* optional element of type tt:Behaviour */
	tt__ObjectExtension *Extension;	/* optional element of type tt:ObjectExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 578; } /* = unique id SOAP_TYPE_tt__Object */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Object(): Appearance(NULL), Behaviour(NULL), Extension(NULL) { tt__Object::soap_default(NULL); }
	virtual ~tt__Object() { }
};
#endif

#ifndef SOAP_TYPE_tt__EventFilter
#define SOAP_TYPE_tt__EventFilter (637)
/* tt:EventFilter */
class SOAP_CMAC tt__EventFilter : public wsnt__FilterType
{
public:
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 637; } /* = unique id SOAP_TYPE_tt__EventFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EventFilter() { tt__EventFilter::soap_default(NULL); }
	virtual ~tt__EventFilter() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngine
#define SOAP_TYPE_tt__AnalyticsEngine (673)
/* tt:AnalyticsEngine */
class SOAP_CMAC tt__AnalyticsEngine : public tt__ConfigurationEntity
{
public:
	tt__AnalyticsDeviceEngineConfiguration *AnalyticsEngineConfiguration;	/* required element of type tt:AnalyticsDeviceEngineConfiguration */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 673; } /* = unique id SOAP_TYPE_tt__AnalyticsEngine */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsEngine(): AnalyticsEngineConfiguration(NULL), __any(NULL) { tt__AnalyticsEngine::soap_default(NULL); }
	virtual ~tt__AnalyticsEngine() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngineInput
#define SOAP_TYPE_tt__AnalyticsEngineInput (679)
/* tt:AnalyticsEngineInput */
class SOAP_CMAC tt__AnalyticsEngineInput : public tt__ConfigurationEntity
{
public:
	tt__SourceIdentification *SourceIdentification;	/* required element of type tt:SourceIdentification */
	tt__VideoEncoderConfiguration *VideoInput;	/* required element of type tt:VideoEncoderConfiguration */
	tt__MetadataInput *MetadataInput;	/* required element of type tt:MetadataInput */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 679; } /* = unique id SOAP_TYPE_tt__AnalyticsEngineInput */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsEngineInput(): SourceIdentification(NULL), VideoInput(NULL), MetadataInput(NULL), __any(NULL) { tt__AnalyticsEngineInput::soap_default(NULL); }
	virtual ~tt__AnalyticsEngineInput() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngineControl
#define SOAP_TYPE_tt__AnalyticsEngineControl (684)
/* tt:AnalyticsEngineControl */
class SOAP_CMAC tt__AnalyticsEngineControl : public tt__ConfigurationEntity
{
public:
	char *EngineToken;	/* required element of type tt:ReferenceToken */
	char *EngineConfigToken;	/* required element of type tt:ReferenceToken */
	int __sizeInputToken;	/* sequence of elements <InputToken> */
	char **InputToken;	/* required element of type tt:ReferenceToken */
	int __sizeReceiverToken;	/* sequence of elements <ReceiverToken> */
	char **ReceiverToken;	/* required element of type tt:ReferenceToken */
	tt__MulticastConfiguration *Multicast;	/* optional element of type tt:MulticastConfiguration */
	tt__Config *Subscription;	/* required element of type tt:Config */
	enum tt__ModeOfOperation Mode;	/* required element of type tt:ModeOfOperation */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 684; } /* = unique id SOAP_TYPE_tt__AnalyticsEngineControl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsEngineControl(): EngineToken(NULL), EngineConfigToken(NULL), InputToken(NULL), ReceiverToken(NULL), Multicast(NULL), Subscription(NULL), __any(NULL) { tt__AnalyticsEngineControl::soap_default(NULL); }
	virtual ~tt__AnalyticsEngineControl() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDConfiguration
#define SOAP_TYPE_tt__OSDConfiguration (708)
/* tt:OSDConfiguration */
class SOAP_CMAC tt__OSDConfiguration : public tt__DeviceEntity
{
public:
	class tt__OSDReference *VideoSourceConfigurationToken;	/* required element of type tt:OSDReference */
	enum tt__OSDType Type;	/* required element of type tt:OSDType */
	tt__OSDPosConfiguration *Position;	/* required element of type tt:OSDPosConfiguration */
	tt__OSDTextConfiguration *TextString;	/* optional element of type tt:OSDTextConfiguration */
	tt__OSDImgConfiguration *Image;	/* optional element of type tt:OSDImgConfiguration */
	tt__OSDConfigurationExtension *Extension;	/* optional element of type tt:OSDConfigurationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 708; } /* = unique id SOAP_TYPE_tt__OSDConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDConfiguration(): VideoSourceConfigurationToken(NULL), Position(NULL), TextString(NULL), Image(NULL), Extension(NULL) { tt__OSDConfiguration::soap_default(NULL); }
	virtual ~tt__OSDConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_xmime5__base64Binary
#define SOAP_TYPE_xmime5__base64Binary (714)
/* Primitive xmime5:base64Binary schema type: */
class SOAP_CMAC xmime5__base64Binary
{
public:
	xsd__base64Binary __item;
	char *contentType;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 714; } /* = unique id SOAP_TYPE_xmime5__base64Binary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xmime5__base64Binary(): contentType(NULL), soap(NULL) { xmime5__base64Binary::soap_default(NULL); }
	virtual ~xmime5__base64Binary() { }
};
#endif

#ifndef SOAP_TYPE_xmime5__hexBinary
#define SOAP_TYPE_xmime5__hexBinary (715)
/* Primitive xmime5:hexBinary schema type: */
class SOAP_CMAC xmime5__hexBinary
{
public:
	xsd__hexBinary __item;
	char *contentType;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 715; } /* = unique id SOAP_TYPE_xmime5__hexBinary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xmime5__hexBinary(): contentType(NULL), soap(NULL) { xmime5__hexBinary::soap_default(NULL); }
	virtual ~xmime5__hexBinary() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType
#define SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType (721)
/* wsnt:SubscribeCreationFailedFaultType */
class SOAP_CMAC wsnt__SubscribeCreationFailedFaultType : public wsbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 721; } /* = unique id SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__SubscribeCreationFailedFaultType() { wsnt__SubscribeCreationFailedFaultType::soap_default(NULL); }
	virtual ~wsnt__SubscribeCreationFailedFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__InvalidFilterFaultType
#define SOAP_TYPE_wsnt__InvalidFilterFaultType (722)
/* wsnt:InvalidFilterFaultType */
class SOAP_CMAC wsnt__InvalidFilterFaultType : public wsbf__BaseFaultType
{
public:
	int __sizeUnknownFilter;	/* sequence of elements <UnknownFilter> */
	char **UnknownFilter;	/* required element of type xsd:QName */
public:
	virtual int soap_type() const { return 722; } /* = unique id SOAP_TYPE_wsnt__InvalidFilterFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__InvalidFilterFaultType(): UnknownFilter(NULL) { wsnt__InvalidFilterFaultType::soap_default(NULL); }
	virtual ~wsnt__InvalidFilterFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType
#define SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType (723)
/* wsnt:TopicExpressionDialectUnknownFaultType */
class SOAP_CMAC wsnt__TopicExpressionDialectUnknownFaultType : public wsbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 723; } /* = unique id SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__TopicExpressionDialectUnknownFaultType() { wsnt__TopicExpressionDialectUnknownFaultType::soap_default(NULL); }
	virtual ~wsnt__TopicExpressionDialectUnknownFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType (724)
/* wsnt:InvalidTopicExpressionFaultType */
class SOAP_CMAC wsnt__InvalidTopicExpressionFaultType : public wsbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 724; } /* = unique id SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__InvalidTopicExpressionFaultType() { wsnt__InvalidTopicExpressionFaultType::soap_default(NULL); }
	virtual ~wsnt__InvalidTopicExpressionFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__TopicNotSupportedFaultType
#define SOAP_TYPE_wsnt__TopicNotSupportedFaultType (725)
/* wsnt:TopicNotSupportedFaultType */
class SOAP_CMAC wsnt__TopicNotSupportedFaultType : public wsbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 725; } /* = unique id SOAP_TYPE_wsnt__TopicNotSupportedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__TopicNotSupportedFaultType() { wsnt__TopicNotSupportedFaultType::soap_default(NULL); }
	virtual ~wsnt__TopicNotSupportedFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType
#define SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType (726)
/* wsnt:MultipleTopicsSpecifiedFaultType */
class SOAP_CMAC wsnt__MultipleTopicsSpecifiedFaultType : public wsbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 726; } /* = unique id SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__MultipleTopicsSpecifiedFaultType() { wsnt__MultipleTopicsSpecifiedFaultType::soap_default(NULL); }
	virtual ~wsnt__MultipleTopicsSpecifiedFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType (727)
/* wsnt:InvalidProducerPropertiesExpressionFaultType */
class SOAP_CMAC wsnt__InvalidProducerPropertiesExpressionFaultType : public wsbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 727; } /* = unique id SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__InvalidProducerPropertiesExpressionFaultType() { wsnt__InvalidProducerPropertiesExpressionFaultType::soap_default(NULL); }
	virtual ~wsnt__InvalidProducerPropertiesExpressionFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType (728)
/* wsnt:InvalidMessageContentExpressionFaultType */
class SOAP_CMAC wsnt__InvalidMessageContentExpressionFaultType : public wsbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 728; } /* = unique id SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__InvalidMessageContentExpressionFaultType() { wsnt__InvalidMessageContentExpressionFaultType::soap_default(NULL); }
	virtual ~wsnt__InvalidMessageContentExpressionFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType
#define SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType (729)
/* wsnt:UnrecognizedPolicyRequestFaultType */
class SOAP_CMAC wsnt__UnrecognizedPolicyRequestFaultType : public wsbf__BaseFaultType
{
public:
	int __sizeUnrecognizedPolicy;	/* sequence of elements <UnrecognizedPolicy> */
	char **UnrecognizedPolicy;	/* optional element of type xsd:QName */
public:
	virtual int soap_type() const { return 729; } /* = unique id SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__UnrecognizedPolicyRequestFaultType(): UnrecognizedPolicy(NULL) { wsnt__UnrecognizedPolicyRequestFaultType::soap_default(NULL); }
	virtual ~wsnt__UnrecognizedPolicyRequestFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType
#define SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType (730)
/* wsnt:UnsupportedPolicyRequestFaultType */
class SOAP_CMAC wsnt__UnsupportedPolicyRequestFaultType : public wsbf__BaseFaultType
{
public:
	int __sizeUnsupportedPolicy;	/* sequence of elements <UnsupportedPolicy> */
	char **UnsupportedPolicy;	/* optional element of type xsd:QName */
public:
	virtual int soap_type() const { return 730; } /* = unique id SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__UnsupportedPolicyRequestFaultType(): UnsupportedPolicy(NULL) { wsnt__UnsupportedPolicyRequestFaultType::soap_default(NULL); }
	virtual ~wsnt__UnsupportedPolicyRequestFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType
#define SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType (731)
/* wsnt:NotifyMessageNotSupportedFaultType */
class SOAP_CMAC wsnt__NotifyMessageNotSupportedFaultType : public wsbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 731; } /* = unique id SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__NotifyMessageNotSupportedFaultType() { wsnt__NotifyMessageNotSupportedFaultType::soap_default(NULL); }
	virtual ~wsnt__NotifyMessageNotSupportedFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType
#define SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType (732)
/* wsnt:UnacceptableInitialTerminationTimeFaultType */
class SOAP_CMAC wsnt__UnacceptableInitialTerminationTimeFaultType : public wsbf__BaseFaultType
{
public:
	time_t MinimumTime;	/* required element of type xsd:dateTime */
	time_t *MaximumTime;	/* optional element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 732; } /* = unique id SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__UnacceptableInitialTerminationTimeFaultType(): MaximumTime(NULL) { wsnt__UnacceptableInitialTerminationTimeFaultType::soap_default(NULL); }
	virtual ~wsnt__UnacceptableInitialTerminationTimeFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType
#define SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType (733)
/* wsnt:NoCurrentMessageOnTopicFaultType */
class SOAP_CMAC wsnt__NoCurrentMessageOnTopicFaultType : public wsbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 733; } /* = unique id SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__NoCurrentMessageOnTopicFaultType() { wsnt__NoCurrentMessageOnTopicFaultType::soap_default(NULL); }
	virtual ~wsnt__NoCurrentMessageOnTopicFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__UnableToGetMessagesFaultType
#define SOAP_TYPE_wsnt__UnableToGetMessagesFaultType (734)
/* wsnt:UnableToGetMessagesFaultType */
class SOAP_CMAC wsnt__UnableToGetMessagesFaultType : public wsbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 734; } /* = unique id SOAP_TYPE_wsnt__UnableToGetMessagesFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__UnableToGetMessagesFaultType() { wsnt__UnableToGetMessagesFaultType::soap_default(NULL); }
	virtual ~wsnt__UnableToGetMessagesFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType
#define SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType (735)
/* wsnt:UnableToDestroyPullPointFaultType */
class SOAP_CMAC wsnt__UnableToDestroyPullPointFaultType : public wsbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 735; } /* = unique id SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__UnableToDestroyPullPointFaultType() { wsnt__UnableToDestroyPullPointFaultType::soap_default(NULL); }
	virtual ~wsnt__UnableToDestroyPullPointFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType
#define SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType (736)
/* wsnt:UnableToCreatePullPointFaultType */
class SOAP_CMAC wsnt__UnableToCreatePullPointFaultType : public wsbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 736; } /* = unique id SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__UnableToCreatePullPointFaultType() { wsnt__UnableToCreatePullPointFaultType::soap_default(NULL); }
	virtual ~wsnt__UnableToCreatePullPointFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType
#define SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType (737)
/* wsnt:UnacceptableTerminationTimeFaultType */
class SOAP_CMAC wsnt__UnacceptableTerminationTimeFaultType : public wsbf__BaseFaultType
{
public:
	time_t MinimumTime;	/* required element of type xsd:dateTime */
	time_t *MaximumTime;	/* optional element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 737; } /* = unique id SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__UnacceptableTerminationTimeFaultType(): MaximumTime(NULL) { wsnt__UnacceptableTerminationTimeFaultType::soap_default(NULL); }
	virtual ~wsnt__UnacceptableTerminationTimeFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType
#define SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType (738)
/* wsnt:UnableToDestroySubscriptionFaultType */
class SOAP_CMAC wsnt__UnableToDestroySubscriptionFaultType : public wsbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 738; } /* = unique id SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__UnableToDestroySubscriptionFaultType() { wsnt__UnableToDestroySubscriptionFaultType::soap_default(NULL); }
	virtual ~wsnt__UnableToDestroySubscriptionFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__PauseFailedFaultType
#define SOAP_TYPE_wsnt__PauseFailedFaultType (739)
/* wsnt:PauseFailedFaultType */
class SOAP_CMAC wsnt__PauseFailedFaultType : public wsbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 739; } /* = unique id SOAP_TYPE_wsnt__PauseFailedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__PauseFailedFaultType() { wsnt__PauseFailedFaultType::soap_default(NULL); }
	virtual ~wsnt__PauseFailedFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__ResumeFailedFaultType
#define SOAP_TYPE_wsnt__ResumeFailedFaultType (740)
/* wsnt:ResumeFailedFaultType */
class SOAP_CMAC wsnt__ResumeFailedFaultType : public wsbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 740; } /* = unique id SOAP_TYPE_wsnt__ResumeFailedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__ResumeFailedFaultType() { wsnt__ResumeFailedFaultType::soap_default(NULL); }
	virtual ~wsnt__ResumeFailedFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsa5__RelatesToType
#define SOAP_TYPE_wsa5__RelatesToType (767)
/* Primitive wsa5:RelatesToType schema type: */
class SOAP_CMAC wsa5__RelatesToType
{
public:
	char *__item;
	char *RelationshipType;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 767; } /* = unique id SOAP_TYPE_wsa5__RelatesToType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsa5__RelatesToType(): __item(NULL), RelationshipType(NULL), soap(NULL) { wsa5__RelatesToType::soap_default(NULL); }
	virtual ~wsa5__RelatesToType() { }
};
#endif

#ifndef SOAP_TYPE_wsa5__AttributedURIType
#define SOAP_TYPE_wsa5__AttributedURIType (768)
/* Primitive wsa5:AttributedURIType schema type: */
class SOAP_CMAC wsa5__AttributedURIType
{
public:
	char *__item;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 768; } /* = unique id SOAP_TYPE_wsa5__AttributedURIType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsa5__AttributedURIType(): __item(NULL), soap(NULL) { wsa5__AttributedURIType::soap_default(NULL); }
	virtual ~wsa5__AttributedURIType() { }
};
#endif

#ifndef SOAP_TYPE_wsa5__AttributedUnsignedLongType
#define SOAP_TYPE_wsa5__AttributedUnsignedLongType (769)
/* Primitive wsa5:AttributedUnsignedLongType schema type: */
class SOAP_CMAC wsa5__AttributedUnsignedLongType
{
public:
	ULONG64 __item;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 769; } /* = unique id SOAP_TYPE_wsa5__AttributedUnsignedLongType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsa5__AttributedUnsignedLongType(): soap(NULL) { wsa5__AttributedUnsignedLongType::soap_default(NULL); }
	virtual ~wsa5__AttributedUnsignedLongType() { }
};
#endif

#ifndef SOAP_TYPE_wsa5__AttributedQNameType
#define SOAP_TYPE_wsa5__AttributedQNameType (770)
/* Primitive wsa5:AttributedQNameType schema type: */
class SOAP_CMAC wsa5__AttributedQNameType
{
public:
	char *__item;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 770; } /* = unique id SOAP_TYPE_wsa5__AttributedQNameType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsa5__AttributedQNameType(): __item(NULL), soap(NULL) { wsa5__AttributedQNameType::soap_default(NULL); }
	virtual ~wsa5__AttributedQNameType() { }
};
#endif

#ifndef SOAP_TYPE__wstop__TopicNamespaceType_Topic
#define SOAP_TYPE__wstop__TopicNamespaceType_Topic (1582)
/* wstop:TopicNamespaceType-Topic */
class SOAP_CMAC _wstop__TopicNamespaceType_Topic
{
public:
	wstop__QueryExpressionType *MessagePattern;	/* optional element of type wstop:QueryExpressionType */
	int __sizeTopic;	/* sequence of elements <Topic> */
	class wstop__TopicType **Topic;	/* optional element of type wstop:TopicType */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	char *name;	/* required attribute */
	char **messageTypes;	/* optional attribute */
	bool final;	/* optional attribute */
	wstop__Documentation *documentation;	/* optional element of type wstop:Documentation */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	char **parent;	/* optional attribute */
public:
	virtual int soap_type() const { return 1582; } /* = unique id SOAP_TYPE__wstop__TopicNamespaceType_Topic */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wstop__TopicNamespaceType_Topic(): MessagePattern(NULL), Topic(NULL), __any(NULL), name(NULL), messageTypes(NULL), documentation(NULL), parent(NULL) { _wstop__TopicNamespaceType_Topic::soap_default(NULL); }
	virtual ~_wstop__TopicNamespaceType_Topic() { }
};
#endif

#ifndef SOAP_TYPE_wstop__TopicNamespaceType
#define SOAP_TYPE_wstop__TopicNamespaceType (777)
/* wstop:TopicNamespaceType */
class SOAP_CMAC wstop__TopicNamespaceType : public wstop__ExtensibleDocumented
{
public:
	int __sizeTopic;	/* sequence of elements <Topic> */
	_wstop__TopicNamespaceType_Topic *Topic;	/* optional element of type wstop:TopicNamespaceType-Topic */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	char *name;	/* optional attribute */
	char *targetNamespace;	/* required attribute */
	bool final;	/* optional attribute */
public:
	virtual int soap_type() const { return 777; } /* = unique id SOAP_TYPE_wstop__TopicNamespaceType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__TopicNamespaceType(): Topic(NULL), __any(NULL), name(NULL), targetNamespace(NULL) { wstop__TopicNamespaceType::soap_default(NULL); }
	virtual ~wstop__TopicNamespaceType() { }
};
#endif

#ifndef SOAP_TYPE_wstop__TopicType
#define SOAP_TYPE_wstop__TopicType (778)
/* wstop:TopicType */
class SOAP_CMAC wstop__TopicType : public wstop__ExtensibleDocumented
{
public:
	wstop__QueryExpressionType *MessagePattern;	/* optional element of type wstop:QueryExpressionType */
	int __sizeTopic;	/* sequence of elements <Topic> */
	wstop__TopicType **Topic;	/* optional element of type wstop:TopicType */
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
	char *name;	/* required attribute */
	char **messageTypes;	/* optional attribute */
	bool final;	/* optional attribute */
public:
	virtual int soap_type() const { return 778; } /* = unique id SOAP_TYPE_wstop__TopicType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__TopicType(): MessagePattern(NULL), Topic(NULL), __any(NULL), name(NULL), messageTypes(NULL) { wstop__TopicType::soap_default(NULL); }
	virtual ~wstop__TopicType() { }
};
#endif

#ifndef SOAP_TYPE_wstop__TopicSetType
#define SOAP_TYPE_wstop__TopicSetType (779)
/* wstop:TopicSetType */
class SOAP_CMAC wstop__TopicSetType : public wstop__ExtensibleDocumented
{
public:
	int __size;	/* sequence of elements <-any> */
	struct soap_dom_element *__any;
public:
	virtual int soap_type() const { return 779; } /* = unique id SOAP_TYPE_wstop__TopicSetType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__TopicSetType(): __any(NULL) { wstop__TopicSetType::soap_default(NULL); }
	virtual ~wstop__TopicSetType() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDReference
#define SOAP_TYPE_tt__OSDReference (692)
/* Primitive tt:OSDReference schema type: */
class SOAP_CMAC tt__OSDReference
{
public:
	char *__item;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 692; } /* = unique id SOAP_TYPE_tt__OSDReference */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDReference(): __item(NULL), soap(NULL) { tt__OSDReference::soap_default(NULL); }
	virtual ~tt__OSDReference() { }
};
#endif

#ifndef SOAP_TYPE___ns1__SetConfigurationDB
#define SOAP_TYPE___ns1__SetConfigurationDB (1591)
/* Operation wrapper: */
struct __ns1__SetConfigurationDB
{
public:
	ns1__SetConfigurationDBRequest *ns1__SetConfigurationDBRequest_;	/* optional element of type ns1:SetConfigurationDBRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__GetConfigurationDB
#define SOAP_TYPE___ns1__GetConfigurationDB (1595)
/* Operation wrapper: */
struct __ns1__GetConfigurationDB
{
public:
	ns1__GetConfigurationDBRequest *ns1__GetConfigurationDBRequest_;	/* optional element of type ns1:GetConfigurationDBRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__UploadPTZLibrary
#define SOAP_TYPE___ns1__UploadPTZLibrary (1599)
/* Operation wrapper: */
struct __ns1__UploadPTZLibrary
{
public:
	ns1__UploadPTZLibraryRequest *ns1__UploadPTZLibraryRequest_;	/* optional element of type ns1:UploadPTZLibraryRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__GetStreamVendors
#define SOAP_TYPE___ns1__GetStreamVendors (1603)
/* Operation wrapper: */
struct __ns1__GetStreamVendors
{
public:
	ns1__GetStreamVendorsRequest *ns1__GetStreamVendorsRequest_;	/* optional element of type ns1:GetStreamVendorsRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__GetStreamVendorDevices
#define SOAP_TYPE___ns1__GetStreamVendorDevices (1607)
/* Operation wrapper: */
struct __ns1__GetStreamVendorDevices
{
public:
	ns1__GetStreamVendorDevicesRequest *ns1__GetStreamVendorDevicesRequest_;	/* optional element of type ns1:GetStreamVendorDevicesRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__GetStreamVendorDeviceProtocols
#define SOAP_TYPE___ns1__GetStreamVendorDeviceProtocols (1611)
/* Operation wrapper: */
struct __ns1__GetStreamVendorDeviceProtocols
{
public:
	ns1__GetStreamVendorDeviceProtocolsRequest *ns1__GetStreamVendorDeviceProtocolsRequest_;	/* optional element of type ns1:GetStreamVendorDeviceProtocolsRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__GetStreamVendorDeviceVersions
#define SOAP_TYPE___ns1__GetStreamVendorDeviceVersions (1615)
/* Operation wrapper: */
struct __ns1__GetStreamVendorDeviceVersions
{
public:
	ns1__GetStreamVendorDeviceVersionsRequest *ns1__GetStreamVendorDeviceVersionsRequest_;	/* optional element of type ns1:GetStreamVendorDeviceVersionsRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__GetPTZVendors
#define SOAP_TYPE___ns1__GetPTZVendors (1619)
/* Operation wrapper: */
struct __ns1__GetPTZVendors
{
public:
	ns1__GetPTZVendorsRequest *ns1__GetPTZVendorsRequest_;	/* optional element of type ns1:GetPTZVendorsRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__GetPTZVendorDevices
#define SOAP_TYPE___ns1__GetPTZVendorDevices (1623)
/* Operation wrapper: */
struct __ns1__GetPTZVendorDevices
{
public:
	ns1__GetPTZVendorDevicesRequest *ns1__GetPTZVendorDevicesRequest_;	/* optional element of type ns1:GetPTZVendorDevicesRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__GetPTZVendorDeviceProtocols
#define SOAP_TYPE___ns1__GetPTZVendorDeviceProtocols (1627)
/* Operation wrapper: */
struct __ns1__GetPTZVendorDeviceProtocols
{
public:
	ns1__GetPTZVendorDeviceProtocolsRequest *ns1__GetPTZVendorDeviceProtocolsRequest_;	/* optional element of type ns1:GetPTZVendorDeviceProtocolsRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__GetPTZVendorDeviceVersions
#define SOAP_TYPE___ns1__GetPTZVendorDeviceVersions (1631)
/* Operation wrapper: */
struct __ns1__GetPTZVendorDeviceVersions
{
public:
	ns1__GetPTZVendorDeviceVersionsRequest *ns1__GetPTZVendorDeviceVersionsRequest_;	/* optional element of type ns1:GetPTZVendorDeviceVersionsRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__GetPTZProperties
#define SOAP_TYPE___ns1__GetPTZProperties (1635)
/* Operation wrapper: */
struct __ns1__GetPTZProperties
{
public:
	ns1__GetPTZPropertiesRequest *ns1__GetPTZPropertiesRequest_;	/* optional element of type ns1:GetPTZPropertiesRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__GetMediaSources
#define SOAP_TYPE___ns1__GetMediaSources (1639)
/* Operation wrapper: */
struct __ns1__GetMediaSources
{
public:
	ns1__GetMediaSourcesRequest *ns1__GetMediaSourcesRequest_;	/* optional element of type ns1:GetMediaSourcesRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__GetMediaSource
#define SOAP_TYPE___ns1__GetMediaSource (1643)
/* Operation wrapper: */
struct __ns1__GetMediaSource
{
public:
	ns1__GetMediaSourceRequest *ns1__GetMediaSourceRequest_;	/* optional element of type ns1:GetMediaSourceRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__SetMediaSource
#define SOAP_TYPE___ns1__SetMediaSource (1647)
/* Operation wrapper: */
struct __ns1__SetMediaSource
{
public:
	ns1__SetMediaSourceRequest *ns1__SetMediaSourceRequest_;	/* optional element of type ns1:SetMediaSourceRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateMediaSource
#define SOAP_TYPE___ns1__CreateMediaSource (1651)
/* Operation wrapper: */
struct __ns1__CreateMediaSource
{
public:
	ns1__CreateMediaSourceRequest *ns1__CreateMediaSourceRequest_;	/* optional element of type ns1:CreateMediaSourceRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteMediaSource
#define SOAP_TYPE___ns1__DeleteMediaSource (1655)
/* Operation wrapper: */
struct __ns1__DeleteMediaSource
{
public:
	ns1__DeleteMediaSourceRequest *ns1__DeleteMediaSourceRequest_;	/* optional element of type ns1:DeleteMediaSourceRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__GetMediaProfiles
#define SOAP_TYPE___ns1__GetMediaProfiles (1659)
/* Operation wrapper: */
struct __ns1__GetMediaProfiles
{
public:
	ns1__GetMediaProfilesRequest *ns1__GetMediaProfilesRequest_;	/* optional element of type ns1:GetMediaProfilesRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__GetMediaProfile
#define SOAP_TYPE___ns1__GetMediaProfile (1663)
/* Operation wrapper: */
struct __ns1__GetMediaProfile
{
public:
	ns1__GetMediaProfileRequest *ns1__GetMediaProfileRequest_;	/* optional element of type ns1:GetMediaProfileRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__SetMediaProfile
#define SOAP_TYPE___ns1__SetMediaProfile (1667)
/* Operation wrapper: */
struct __ns1__SetMediaProfile
{
public:
	ns1__SetMediaProfileRequest *ns1__SetMediaProfileRequest_;	/* optional element of type ns1:SetMediaProfileRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateMediaProfile
#define SOAP_TYPE___ns1__CreateMediaProfile (1671)
/* Operation wrapper: */
struct __ns1__CreateMediaProfile
{
public:
	ns1__CreateMediaProfileRequest *ns1__CreateMediaProfileRequest_;	/* optional element of type ns1:CreateMediaProfileRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteMediaProfile
#define SOAP_TYPE___ns1__DeleteMediaProfile (1675)
/* Operation wrapper: */
struct __ns1__DeleteMediaProfile
{
public:
	ns1__DeleteMediaProfileRequest *ns1__DeleteMediaProfileRequest_;	/* optional element of type ns1:DeleteMediaProfileRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateVideoSourceConfiguration
#define SOAP_TYPE___ns1__CreateVideoSourceConfiguration (1679)
/* Operation wrapper: */
struct __ns1__CreateVideoSourceConfiguration
{
public:
	ns1__CreateVideoSourceConfigurationRequest *ns1__CreateVideoSourceConfigurationRequest_;	/* optional element of type ns1:CreateVideoSourceConfigurationRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteVideoSourceConfiguration
#define SOAP_TYPE___ns1__DeleteVideoSourceConfiguration (1683)
/* Operation wrapper: */
struct __ns1__DeleteVideoSourceConfiguration
{
public:
	ns1__DeleteVideoSourceConfigurationRequest *ns1__DeleteVideoSourceConfigurationRequest_;	/* optional element of type ns1:DeleteVideoSourceConfigurationRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateVideoEncoderConfiguration
#define SOAP_TYPE___ns1__CreateVideoEncoderConfiguration (1687)
/* Operation wrapper: */
struct __ns1__CreateVideoEncoderConfiguration
{
public:
	ns1__CreateVideoEncoderConfigurationRequest *ns1__CreateVideoEncoderConfigurationRequest_;	/* optional element of type ns1:CreateVideoEncoderConfigurationRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteVideoEncoderConfiguration
#define SOAP_TYPE___ns1__DeleteVideoEncoderConfiguration (1691)
/* Operation wrapper: */
struct __ns1__DeleteVideoEncoderConfiguration
{
public:
	ns1__DeleteVideoEncoderConfigurationRequest *ns1__DeleteVideoEncoderConfigurationRequest_;	/* optional element of type ns1:DeleteVideoEncoderConfigurationRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateAudioSourceConfiguration
#define SOAP_TYPE___ns1__CreateAudioSourceConfiguration (1695)
/* Operation wrapper: */
struct __ns1__CreateAudioSourceConfiguration
{
public:
	ns1__CreateAudioSourceConfigurationRequest *ns1__CreateAudioSourceConfigurationRequest_;	/* optional element of type ns1:CreateAudioSourceConfigurationRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteAudioSourceConfiguration
#define SOAP_TYPE___ns1__DeleteAudioSourceConfiguration (1699)
/* Operation wrapper: */
struct __ns1__DeleteAudioSourceConfiguration
{
public:
	ns1__DeleteAudioSourceConfigurationRequest *ns1__DeleteAudioSourceConfigurationRequest_;	/* optional element of type ns1:DeleteAudioSourceConfigurationRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateAudioEncoderConfiguration
#define SOAP_TYPE___ns1__CreateAudioEncoderConfiguration (1703)
/* Operation wrapper: */
struct __ns1__CreateAudioEncoderConfiguration
{
public:
	ns1__CreateAudioEncoderConfigurationRequest *ns1__CreateAudioEncoderConfigurationRequest_;	/* optional element of type ns1:CreateAudioEncoderConfigurationRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteAudioEncoderConfiguration
#define SOAP_TYPE___ns1__DeleteAudioEncoderConfiguration (1707)
/* Operation wrapper: */
struct __ns1__DeleteAudioEncoderConfiguration
{
public:
	ns1__DeleteAudioEncoderConfigurationRequest *ns1__DeleteAudioEncoderConfigurationRequest_;	/* optional element of type ns1:DeleteAudioEncoderConfigurationRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__CreatePTZConfiguration
#define SOAP_TYPE___ns1__CreatePTZConfiguration (1711)
/* Operation wrapper: */
struct __ns1__CreatePTZConfiguration
{
public:
	ns1__CreatePTZConfigurationRequest *ns1__CreatePTZConfigurationRequest_;	/* optional element of type ns1:CreatePTZConfigurationRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__DeletePTZConfiguration
#define SOAP_TYPE___ns1__DeletePTZConfiguration (1715)
/* Operation wrapper: */
struct __ns1__DeletePTZConfiguration
{
public:
	ns1__DeletePTZConfigurationRequest *ns1__DeletePTZConfigurationRequest_;	/* optional element of type ns1:DeletePTZConfigurationRequest */
};
#endif

#ifndef SOAP_TYPE___tptz__GetServiceCapabilities
#define SOAP_TYPE___tptz__GetServiceCapabilities (1719)
/* Operation wrapper: */
struct __tptz__GetServiceCapabilities
{
public:
	_tptz__GetServiceCapabilities *tptz__GetServiceCapabilities;	/* optional element of type tptz:GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___tptz__GetConfigurations
#define SOAP_TYPE___tptz__GetConfigurations (1723)
/* Operation wrapper: */
struct __tptz__GetConfigurations
{
public:
	_tptz__GetConfigurations *tptz__GetConfigurations;	/* optional element of type tptz:GetConfigurations */
};
#endif

#ifndef SOAP_TYPE___tptz__GetPresets
#define SOAP_TYPE___tptz__GetPresets (1727)
/* Operation wrapper: */
struct __tptz__GetPresets
{
public:
	_tptz__GetPresets *tptz__GetPresets;	/* optional element of type tptz:GetPresets */
};
#endif

#ifndef SOAP_TYPE___tptz__SetPreset
#define SOAP_TYPE___tptz__SetPreset (1731)
/* Operation wrapper: */
struct __tptz__SetPreset
{
public:
	_tptz__SetPreset *tptz__SetPreset;	/* optional element of type tptz:SetPreset */
};
#endif

#ifndef SOAP_TYPE___tptz__RemovePreset
#define SOAP_TYPE___tptz__RemovePreset (1735)
/* Operation wrapper: */
struct __tptz__RemovePreset
{
public:
	_tptz__RemovePreset *tptz__RemovePreset;	/* optional element of type tptz:RemovePreset */
};
#endif

#ifndef SOAP_TYPE___tptz__GotoPreset
#define SOAP_TYPE___tptz__GotoPreset (1739)
/* Operation wrapper: */
struct __tptz__GotoPreset
{
public:
	_tptz__GotoPreset *tptz__GotoPreset;	/* optional element of type tptz:GotoPreset */
};
#endif

#ifndef SOAP_TYPE___tptz__GetStatus
#define SOAP_TYPE___tptz__GetStatus (1743)
/* Operation wrapper: */
struct __tptz__GetStatus
{
public:
	_tptz__GetStatus *tptz__GetStatus;	/* optional element of type tptz:GetStatus */
};
#endif

#ifndef SOAP_TYPE___tptz__GetConfiguration
#define SOAP_TYPE___tptz__GetConfiguration (1747)
/* Operation wrapper: */
struct __tptz__GetConfiguration
{
public:
	_tptz__GetConfiguration *tptz__GetConfiguration;	/* optional element of type tptz:GetConfiguration */
};
#endif

#ifndef SOAP_TYPE___tptz__GetNodes
#define SOAP_TYPE___tptz__GetNodes (1751)
/* Operation wrapper: */
struct __tptz__GetNodes
{
public:
	_tptz__GetNodes *tptz__GetNodes;	/* optional element of type tptz:GetNodes */
};
#endif

#ifndef SOAP_TYPE___tptz__GetNode
#define SOAP_TYPE___tptz__GetNode (1755)
/* Operation wrapper: */
struct __tptz__GetNode
{
public:
	_tptz__GetNode *tptz__GetNode;	/* optional element of type tptz:GetNode */
};
#endif

#ifndef SOAP_TYPE___tptz__SetConfiguration
#define SOAP_TYPE___tptz__SetConfiguration (1759)
/* Operation wrapper: */
struct __tptz__SetConfiguration
{
public:
	_tptz__SetConfiguration *tptz__SetConfiguration;	/* optional element of type tptz:SetConfiguration */
};
#endif

#ifndef SOAP_TYPE___tptz__GetConfigurationOptions
#define SOAP_TYPE___tptz__GetConfigurationOptions (1763)
/* Operation wrapper: */
struct __tptz__GetConfigurationOptions
{
public:
	_tptz__GetConfigurationOptions *tptz__GetConfigurationOptions;	/* optional element of type tptz:GetConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___tptz__GotoHomePosition
#define SOAP_TYPE___tptz__GotoHomePosition (1767)
/* Operation wrapper: */
struct __tptz__GotoHomePosition
{
public:
	_tptz__GotoHomePosition *tptz__GotoHomePosition;	/* optional element of type tptz:GotoHomePosition */
};
#endif

#ifndef SOAP_TYPE___tptz__SetHomePosition
#define SOAP_TYPE___tptz__SetHomePosition (1771)
/* Operation wrapper: */
struct __tptz__SetHomePosition
{
public:
	_tptz__SetHomePosition *tptz__SetHomePosition;	/* optional element of type tptz:SetHomePosition */
};
#endif

#ifndef SOAP_TYPE___tptz__ContinuousMove
#define SOAP_TYPE___tptz__ContinuousMove (1775)
/* Operation wrapper: */
struct __tptz__ContinuousMove
{
public:
	_tptz__ContinuousMove *tptz__ContinuousMove;	/* optional element of type tptz:ContinuousMove */
};
#endif

#ifndef SOAP_TYPE___tptz__RelativeMove
#define SOAP_TYPE___tptz__RelativeMove (1779)
/* Operation wrapper: */
struct __tptz__RelativeMove
{
public:
	_tptz__RelativeMove *tptz__RelativeMove;	/* optional element of type tptz:RelativeMove */
};
#endif

#ifndef SOAP_TYPE___tptz__SendAuxiliaryCommand
#define SOAP_TYPE___tptz__SendAuxiliaryCommand (1783)
/* Operation wrapper: */
struct __tptz__SendAuxiliaryCommand
{
public:
	_tptz__SendAuxiliaryCommand *tptz__SendAuxiliaryCommand;	/* optional element of type tptz:SendAuxiliaryCommand */
};
#endif

#ifndef SOAP_TYPE___tptz__AbsoluteMove
#define SOAP_TYPE___tptz__AbsoluteMove (1787)
/* Operation wrapper: */
struct __tptz__AbsoluteMove
{
public:
	_tptz__AbsoluteMove *tptz__AbsoluteMove;	/* optional element of type tptz:AbsoluteMove */
};
#endif

#ifndef SOAP_TYPE___tptz__Stop
#define SOAP_TYPE___tptz__Stop (1791)
/* Operation wrapper: */
struct __tptz__Stop
{
public:
	_tptz__Stop *tptz__Stop;	/* optional element of type tptz:Stop */
};
#endif

#ifndef SOAP_TYPE___tptz__GetPresetTours
#define SOAP_TYPE___tptz__GetPresetTours (1795)
/* Operation wrapper: */
struct __tptz__GetPresetTours
{
public:
	_tptz__GetPresetTours *tptz__GetPresetTours;	/* optional element of type tptz:GetPresetTours */
};
#endif

#ifndef SOAP_TYPE___tptz__GetPresetTour
#define SOAP_TYPE___tptz__GetPresetTour (1799)
/* Operation wrapper: */
struct __tptz__GetPresetTour
{
public:
	_tptz__GetPresetTour *tptz__GetPresetTour;	/* optional element of type tptz:GetPresetTour */
};
#endif

#ifndef SOAP_TYPE___tptz__GetPresetTourOptions
#define SOAP_TYPE___tptz__GetPresetTourOptions (1803)
/* Operation wrapper: */
struct __tptz__GetPresetTourOptions
{
public:
	_tptz__GetPresetTourOptions *tptz__GetPresetTourOptions;	/* optional element of type tptz:GetPresetTourOptions */
};
#endif

#ifndef SOAP_TYPE___tptz__CreatePresetTour
#define SOAP_TYPE___tptz__CreatePresetTour (1807)
/* Operation wrapper: */
struct __tptz__CreatePresetTour
{
public:
	_tptz__CreatePresetTour *tptz__CreatePresetTour;	/* optional element of type tptz:CreatePresetTour */
};
#endif

#ifndef SOAP_TYPE___tptz__ModifyPresetTour
#define SOAP_TYPE___tptz__ModifyPresetTour (1811)
/* Operation wrapper: */
struct __tptz__ModifyPresetTour
{
public:
	_tptz__ModifyPresetTour *tptz__ModifyPresetTour;	/* optional element of type tptz:ModifyPresetTour */
};
#endif

#ifndef SOAP_TYPE___tptz__OperatePresetTour
#define SOAP_TYPE___tptz__OperatePresetTour (1815)
/* Operation wrapper: */
struct __tptz__OperatePresetTour
{
public:
	_tptz__OperatePresetTour *tptz__OperatePresetTour;	/* optional element of type tptz:OperatePresetTour */
};
#endif

#ifndef SOAP_TYPE___tptz__RemovePresetTour
#define SOAP_TYPE___tptz__RemovePresetTour (1819)
/* Operation wrapper: */
struct __tptz__RemovePresetTour
{
public:
	_tptz__RemovePresetTour *tptz__RemovePresetTour;	/* optional element of type tptz:RemovePresetTour */
};
#endif

#ifndef SOAP_TYPE___tptz__GetCompatibleConfigurations
#define SOAP_TYPE___tptz__GetCompatibleConfigurations (1823)
/* Operation wrapper: */
struct __tptz__GetCompatibleConfigurations
{
public:
	_tptz__GetCompatibleConfigurations *tptz__GetCompatibleConfigurations;	/* optional element of type tptz:GetCompatibleConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetServiceCapabilities
#define SOAP_TYPE___trt__GetServiceCapabilities (1827)
/* Operation wrapper: */
struct __trt__GetServiceCapabilities
{
public:
	_trt__GetServiceCapabilities *trt__GetServiceCapabilities;	/* optional element of type trt:GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoSources
#define SOAP_TYPE___trt__GetVideoSources (1831)
/* Operation wrapper: */
struct __trt__GetVideoSources
{
public:
	_trt__GetVideoSources *trt__GetVideoSources;	/* optional element of type trt:GetVideoSources */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioSources
#define SOAP_TYPE___trt__GetAudioSources (1835)
/* Operation wrapper: */
struct __trt__GetAudioSources
{
public:
	_trt__GetAudioSources *trt__GetAudioSources;	/* optional element of type trt:GetAudioSources */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioOutputs
#define SOAP_TYPE___trt__GetAudioOutputs (1839)
/* Operation wrapper: */
struct __trt__GetAudioOutputs
{
public:
	_trt__GetAudioOutputs *trt__GetAudioOutputs;	/* optional element of type trt:GetAudioOutputs */
};
#endif

#ifndef SOAP_TYPE___trt__CreateProfile
#define SOAP_TYPE___trt__CreateProfile (1843)
/* Operation wrapper: */
struct __trt__CreateProfile
{
public:
	_trt__CreateProfile *trt__CreateProfile;	/* optional element of type trt:CreateProfile */
};
#endif

#ifndef SOAP_TYPE___trt__GetProfile
#define SOAP_TYPE___trt__GetProfile (1847)
/* Operation wrapper: */
struct __trt__GetProfile
{
public:
	_trt__GetProfile *trt__GetProfile;	/* optional element of type trt:GetProfile */
};
#endif

#ifndef SOAP_TYPE___trt__GetProfiles
#define SOAP_TYPE___trt__GetProfiles (1851)
/* Operation wrapper: */
struct __trt__GetProfiles
{
public:
	_trt__GetProfiles *trt__GetProfiles;	/* optional element of type trt:GetProfiles */
};
#endif

#ifndef SOAP_TYPE___trt__AddVideoEncoderConfiguration
#define SOAP_TYPE___trt__AddVideoEncoderConfiguration (1855)
/* Operation wrapper: */
struct __trt__AddVideoEncoderConfiguration
{
public:
	_trt__AddVideoEncoderConfiguration *trt__AddVideoEncoderConfiguration;	/* optional element of type trt:AddVideoEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__AddVideoSourceConfiguration
#define SOAP_TYPE___trt__AddVideoSourceConfiguration (1859)
/* Operation wrapper: */
struct __trt__AddVideoSourceConfiguration
{
public:
	_trt__AddVideoSourceConfiguration *trt__AddVideoSourceConfiguration;	/* optional element of type trt:AddVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__AddAudioEncoderConfiguration
#define SOAP_TYPE___trt__AddAudioEncoderConfiguration (1863)
/* Operation wrapper: */
struct __trt__AddAudioEncoderConfiguration
{
public:
	_trt__AddAudioEncoderConfiguration *trt__AddAudioEncoderConfiguration;	/* optional element of type trt:AddAudioEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__AddAudioSourceConfiguration
#define SOAP_TYPE___trt__AddAudioSourceConfiguration (1867)
/* Operation wrapper: */
struct __trt__AddAudioSourceConfiguration
{
public:
	_trt__AddAudioSourceConfiguration *trt__AddAudioSourceConfiguration;	/* optional element of type trt:AddAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__AddPTZConfiguration
#define SOAP_TYPE___trt__AddPTZConfiguration (1871)
/* Operation wrapper: */
struct __trt__AddPTZConfiguration
{
public:
	_trt__AddPTZConfiguration *trt__AddPTZConfiguration;	/* optional element of type trt:AddPTZConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__AddVideoAnalyticsConfiguration
#define SOAP_TYPE___trt__AddVideoAnalyticsConfiguration (1875)
/* Operation wrapper: */
struct __trt__AddVideoAnalyticsConfiguration
{
public:
	_trt__AddVideoAnalyticsConfiguration *trt__AddVideoAnalyticsConfiguration;	/* optional element of type trt:AddVideoAnalyticsConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__AddMetadataConfiguration
#define SOAP_TYPE___trt__AddMetadataConfiguration (1879)
/* Operation wrapper: */
struct __trt__AddMetadataConfiguration
{
public:
	_trt__AddMetadataConfiguration *trt__AddMetadataConfiguration;	/* optional element of type trt:AddMetadataConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__AddAudioOutputConfiguration
#define SOAP_TYPE___trt__AddAudioOutputConfiguration (1883)
/* Operation wrapper: */
struct __trt__AddAudioOutputConfiguration
{
public:
	_trt__AddAudioOutputConfiguration *trt__AddAudioOutputConfiguration;	/* optional element of type trt:AddAudioOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__AddAudioDecoderConfiguration
#define SOAP_TYPE___trt__AddAudioDecoderConfiguration (1887)
/* Operation wrapper: */
struct __trt__AddAudioDecoderConfiguration
{
public:
	_trt__AddAudioDecoderConfiguration *trt__AddAudioDecoderConfiguration;	/* optional element of type trt:AddAudioDecoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveVideoEncoderConfiguration
#define SOAP_TYPE___trt__RemoveVideoEncoderConfiguration (1891)
/* Operation wrapper: */
struct __trt__RemoveVideoEncoderConfiguration
{
public:
	_trt__RemoveVideoEncoderConfiguration *trt__RemoveVideoEncoderConfiguration;	/* optional element of type trt:RemoveVideoEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveVideoSourceConfiguration
#define SOAP_TYPE___trt__RemoveVideoSourceConfiguration (1895)
/* Operation wrapper: */
struct __trt__RemoveVideoSourceConfiguration
{
public:
	_trt__RemoveVideoSourceConfiguration *trt__RemoveVideoSourceConfiguration;	/* optional element of type trt:RemoveVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveAudioEncoderConfiguration
#define SOAP_TYPE___trt__RemoveAudioEncoderConfiguration (1899)
/* Operation wrapper: */
struct __trt__RemoveAudioEncoderConfiguration
{
public:
	_trt__RemoveAudioEncoderConfiguration *trt__RemoveAudioEncoderConfiguration;	/* optional element of type trt:RemoveAudioEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveAudioSourceConfiguration
#define SOAP_TYPE___trt__RemoveAudioSourceConfiguration (1903)
/* Operation wrapper: */
struct __trt__RemoveAudioSourceConfiguration
{
public:
	_trt__RemoveAudioSourceConfiguration *trt__RemoveAudioSourceConfiguration;	/* optional element of type trt:RemoveAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemovePTZConfiguration
#define SOAP_TYPE___trt__RemovePTZConfiguration (1907)
/* Operation wrapper: */
struct __trt__RemovePTZConfiguration
{
public:
	_trt__RemovePTZConfiguration *trt__RemovePTZConfiguration;	/* optional element of type trt:RemovePTZConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveVideoAnalyticsConfiguration
#define SOAP_TYPE___trt__RemoveVideoAnalyticsConfiguration (1911)
/* Operation wrapper: */
struct __trt__RemoveVideoAnalyticsConfiguration
{
public:
	_trt__RemoveVideoAnalyticsConfiguration *trt__RemoveVideoAnalyticsConfiguration;	/* optional element of type trt:RemoveVideoAnalyticsConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveMetadataConfiguration
#define SOAP_TYPE___trt__RemoveMetadataConfiguration (1915)
/* Operation wrapper: */
struct __trt__RemoveMetadataConfiguration
{
public:
	_trt__RemoveMetadataConfiguration *trt__RemoveMetadataConfiguration;	/* optional element of type trt:RemoveMetadataConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveAudioOutputConfiguration
#define SOAP_TYPE___trt__RemoveAudioOutputConfiguration (1919)
/* Operation wrapper: */
struct __trt__RemoveAudioOutputConfiguration
{
public:
	_trt__RemoveAudioOutputConfiguration *trt__RemoveAudioOutputConfiguration;	/* optional element of type trt:RemoveAudioOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveAudioDecoderConfiguration
#define SOAP_TYPE___trt__RemoveAudioDecoderConfiguration (1923)
/* Operation wrapper: */
struct __trt__RemoveAudioDecoderConfiguration
{
public:
	_trt__RemoveAudioDecoderConfiguration *trt__RemoveAudioDecoderConfiguration;	/* optional element of type trt:RemoveAudioDecoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__DeleteProfile
#define SOAP_TYPE___trt__DeleteProfile (1927)
/* Operation wrapper: */
struct __trt__DeleteProfile
{
public:
	_trt__DeleteProfile *trt__DeleteProfile;	/* optional element of type trt:DeleteProfile */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoSourceConfigurations
#define SOAP_TYPE___trt__GetVideoSourceConfigurations (1931)
/* Operation wrapper: */
struct __trt__GetVideoSourceConfigurations
{
public:
	_trt__GetVideoSourceConfigurations *trt__GetVideoSourceConfigurations;	/* optional element of type trt:GetVideoSourceConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoEncoderConfigurations
#define SOAP_TYPE___trt__GetVideoEncoderConfigurations (1935)
/* Operation wrapper: */
struct __trt__GetVideoEncoderConfigurations
{
public:
	_trt__GetVideoEncoderConfigurations *trt__GetVideoEncoderConfigurations;	/* optional element of type trt:GetVideoEncoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioSourceConfigurations
#define SOAP_TYPE___trt__GetAudioSourceConfigurations (1939)
/* Operation wrapper: */
struct __trt__GetAudioSourceConfigurations
{
public:
	_trt__GetAudioSourceConfigurations *trt__GetAudioSourceConfigurations;	/* optional element of type trt:GetAudioSourceConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioEncoderConfigurations
#define SOAP_TYPE___trt__GetAudioEncoderConfigurations (1943)
/* Operation wrapper: */
struct __trt__GetAudioEncoderConfigurations
{
public:
	_trt__GetAudioEncoderConfigurations *trt__GetAudioEncoderConfigurations;	/* optional element of type trt:GetAudioEncoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoAnalyticsConfigurations
#define SOAP_TYPE___trt__GetVideoAnalyticsConfigurations (1947)
/* Operation wrapper: */
struct __trt__GetVideoAnalyticsConfigurations
{
public:
	_trt__GetVideoAnalyticsConfigurations *trt__GetVideoAnalyticsConfigurations;	/* optional element of type trt:GetVideoAnalyticsConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetMetadataConfigurations
#define SOAP_TYPE___trt__GetMetadataConfigurations (1951)
/* Operation wrapper: */
struct __trt__GetMetadataConfigurations
{
public:
	_trt__GetMetadataConfigurations *trt__GetMetadataConfigurations;	/* optional element of type trt:GetMetadataConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioOutputConfigurations
#define SOAP_TYPE___trt__GetAudioOutputConfigurations (1955)
/* Operation wrapper: */
struct __trt__GetAudioOutputConfigurations
{
public:
	_trt__GetAudioOutputConfigurations *trt__GetAudioOutputConfigurations;	/* optional element of type trt:GetAudioOutputConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioDecoderConfigurations
#define SOAP_TYPE___trt__GetAudioDecoderConfigurations (1959)
/* Operation wrapper: */
struct __trt__GetAudioDecoderConfigurations
{
public:
	_trt__GetAudioDecoderConfigurations *trt__GetAudioDecoderConfigurations;	/* optional element of type trt:GetAudioDecoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoSourceConfiguration
#define SOAP_TYPE___trt__GetVideoSourceConfiguration (1963)
/* Operation wrapper: */
struct __trt__GetVideoSourceConfiguration
{
public:
	_trt__GetVideoSourceConfiguration *trt__GetVideoSourceConfiguration;	/* optional element of type trt:GetVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoEncoderConfiguration
#define SOAP_TYPE___trt__GetVideoEncoderConfiguration (1967)
/* Operation wrapper: */
struct __trt__GetVideoEncoderConfiguration
{
public:
	_trt__GetVideoEncoderConfiguration *trt__GetVideoEncoderConfiguration;	/* optional element of type trt:GetVideoEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioSourceConfiguration
#define SOAP_TYPE___trt__GetAudioSourceConfiguration (1971)
/* Operation wrapper: */
struct __trt__GetAudioSourceConfiguration
{
public:
	_trt__GetAudioSourceConfiguration *trt__GetAudioSourceConfiguration;	/* optional element of type trt:GetAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioEncoderConfiguration
#define SOAP_TYPE___trt__GetAudioEncoderConfiguration (1975)
/* Operation wrapper: */
struct __trt__GetAudioEncoderConfiguration
{
public:
	_trt__GetAudioEncoderConfiguration *trt__GetAudioEncoderConfiguration;	/* optional element of type trt:GetAudioEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoAnalyticsConfiguration
#define SOAP_TYPE___trt__GetVideoAnalyticsConfiguration (1979)
/* Operation wrapper: */
struct __trt__GetVideoAnalyticsConfiguration
{
public:
	_trt__GetVideoAnalyticsConfiguration *trt__GetVideoAnalyticsConfiguration;	/* optional element of type trt:GetVideoAnalyticsConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetMetadataConfiguration
#define SOAP_TYPE___trt__GetMetadataConfiguration (1983)
/* Operation wrapper: */
struct __trt__GetMetadataConfiguration
{
public:
	_trt__GetMetadataConfiguration *trt__GetMetadataConfiguration;	/* optional element of type trt:GetMetadataConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioOutputConfiguration
#define SOAP_TYPE___trt__GetAudioOutputConfiguration (1987)
/* Operation wrapper: */
struct __trt__GetAudioOutputConfiguration
{
public:
	_trt__GetAudioOutputConfiguration *trt__GetAudioOutputConfiguration;	/* optional element of type trt:GetAudioOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioDecoderConfiguration
#define SOAP_TYPE___trt__GetAudioDecoderConfiguration (1991)
/* Operation wrapper: */
struct __trt__GetAudioDecoderConfiguration
{
public:
	_trt__GetAudioDecoderConfiguration *trt__GetAudioDecoderConfiguration;	/* optional element of type trt:GetAudioDecoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleVideoEncoderConfigurations
#define SOAP_TYPE___trt__GetCompatibleVideoEncoderConfigurations (1995)
/* Operation wrapper: */
struct __trt__GetCompatibleVideoEncoderConfigurations
{
public:
	_trt__GetCompatibleVideoEncoderConfigurations *trt__GetCompatibleVideoEncoderConfigurations;	/* optional element of type trt:GetCompatibleVideoEncoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleVideoSourceConfigurations
#define SOAP_TYPE___trt__GetCompatibleVideoSourceConfigurations (1999)
/* Operation wrapper: */
struct __trt__GetCompatibleVideoSourceConfigurations
{
public:
	_trt__GetCompatibleVideoSourceConfigurations *trt__GetCompatibleVideoSourceConfigurations;	/* optional element of type trt:GetCompatibleVideoSourceConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleAudioEncoderConfigurations
#define SOAP_TYPE___trt__GetCompatibleAudioEncoderConfigurations (2003)
/* Operation wrapper: */
struct __trt__GetCompatibleAudioEncoderConfigurations
{
public:
	_trt__GetCompatibleAudioEncoderConfigurations *trt__GetCompatibleAudioEncoderConfigurations;	/* optional element of type trt:GetCompatibleAudioEncoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleAudioSourceConfigurations
#define SOAP_TYPE___trt__GetCompatibleAudioSourceConfigurations (2007)
/* Operation wrapper: */
struct __trt__GetCompatibleAudioSourceConfigurations
{
public:
	_trt__GetCompatibleAudioSourceConfigurations *trt__GetCompatibleAudioSourceConfigurations;	/* optional element of type trt:GetCompatibleAudioSourceConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleVideoAnalyticsConfigurations
#define SOAP_TYPE___trt__GetCompatibleVideoAnalyticsConfigurations (2011)
/* Operation wrapper: */
struct __trt__GetCompatibleVideoAnalyticsConfigurations
{
public:
	_trt__GetCompatibleVideoAnalyticsConfigurations *trt__GetCompatibleVideoAnalyticsConfigurations;	/* optional element of type trt:GetCompatibleVideoAnalyticsConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleMetadataConfigurations
#define SOAP_TYPE___trt__GetCompatibleMetadataConfigurations (2015)
/* Operation wrapper: */
struct __trt__GetCompatibleMetadataConfigurations
{
public:
	_trt__GetCompatibleMetadataConfigurations *trt__GetCompatibleMetadataConfigurations;	/* optional element of type trt:GetCompatibleMetadataConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleAudioOutputConfigurations
#define SOAP_TYPE___trt__GetCompatibleAudioOutputConfigurations (2019)
/* Operation wrapper: */
struct __trt__GetCompatibleAudioOutputConfigurations
{
public:
	_trt__GetCompatibleAudioOutputConfigurations *trt__GetCompatibleAudioOutputConfigurations;	/* optional element of type trt:GetCompatibleAudioOutputConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleAudioDecoderConfigurations
#define SOAP_TYPE___trt__GetCompatibleAudioDecoderConfigurations (2023)
/* Operation wrapper: */
struct __trt__GetCompatibleAudioDecoderConfigurations
{
public:
	_trt__GetCompatibleAudioDecoderConfigurations *trt__GetCompatibleAudioDecoderConfigurations;	/* optional element of type trt:GetCompatibleAudioDecoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__SetVideoSourceConfiguration
#define SOAP_TYPE___trt__SetVideoSourceConfiguration (2027)
/* Operation wrapper: */
struct __trt__SetVideoSourceConfiguration
{
public:
	_trt__SetVideoSourceConfiguration *trt__SetVideoSourceConfiguration;	/* optional element of type trt:SetVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__SetVideoEncoderConfiguration
#define SOAP_TYPE___trt__SetVideoEncoderConfiguration (2031)
/* Operation wrapper: */
struct __trt__SetVideoEncoderConfiguration
{
public:
	_trt__SetVideoEncoderConfiguration *trt__SetVideoEncoderConfiguration;	/* optional element of type trt:SetVideoEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__SetAudioSourceConfiguration
#define SOAP_TYPE___trt__SetAudioSourceConfiguration (2035)
/* Operation wrapper: */
struct __trt__SetAudioSourceConfiguration
{
public:
	_trt__SetAudioSourceConfiguration *trt__SetAudioSourceConfiguration;	/* optional element of type trt:SetAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__SetAudioEncoderConfiguration
#define SOAP_TYPE___trt__SetAudioEncoderConfiguration (2039)
/* Operation wrapper: */
struct __trt__SetAudioEncoderConfiguration
{
public:
	_trt__SetAudioEncoderConfiguration *trt__SetAudioEncoderConfiguration;	/* optional element of type trt:SetAudioEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__SetVideoAnalyticsConfiguration
#define SOAP_TYPE___trt__SetVideoAnalyticsConfiguration (2043)
/* Operation wrapper: */
struct __trt__SetVideoAnalyticsConfiguration
{
public:
	_trt__SetVideoAnalyticsConfiguration *trt__SetVideoAnalyticsConfiguration;	/* optional element of type trt:SetVideoAnalyticsConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__SetMetadataConfiguration
#define SOAP_TYPE___trt__SetMetadataConfiguration (2047)
/* Operation wrapper: */
struct __trt__SetMetadataConfiguration
{
public:
	_trt__SetMetadataConfiguration *trt__SetMetadataConfiguration;	/* optional element of type trt:SetMetadataConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__SetAudioOutputConfiguration
#define SOAP_TYPE___trt__SetAudioOutputConfiguration (2051)
/* Operation wrapper: */
struct __trt__SetAudioOutputConfiguration
{
public:
	_trt__SetAudioOutputConfiguration *trt__SetAudioOutputConfiguration;	/* optional element of type trt:SetAudioOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__SetAudioDecoderConfiguration
#define SOAP_TYPE___trt__SetAudioDecoderConfiguration (2055)
/* Operation wrapper: */
struct __trt__SetAudioDecoderConfiguration
{
public:
	_trt__SetAudioDecoderConfiguration *trt__SetAudioDecoderConfiguration;	/* optional element of type trt:SetAudioDecoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoSourceConfigurationOptions
#define SOAP_TYPE___trt__GetVideoSourceConfigurationOptions (2059)
/* Operation wrapper: */
struct __trt__GetVideoSourceConfigurationOptions
{
public:
	_trt__GetVideoSourceConfigurationOptions *trt__GetVideoSourceConfigurationOptions;	/* optional element of type trt:GetVideoSourceConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoEncoderConfigurationOptions
#define SOAP_TYPE___trt__GetVideoEncoderConfigurationOptions (2063)
/* Operation wrapper: */
struct __trt__GetVideoEncoderConfigurationOptions
{
public:
	_trt__GetVideoEncoderConfigurationOptions *trt__GetVideoEncoderConfigurationOptions;	/* optional element of type trt:GetVideoEncoderConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioSourceConfigurationOptions
#define SOAP_TYPE___trt__GetAudioSourceConfigurationOptions (2067)
/* Operation wrapper: */
struct __trt__GetAudioSourceConfigurationOptions
{
public:
	_trt__GetAudioSourceConfigurationOptions *trt__GetAudioSourceConfigurationOptions;	/* optional element of type trt:GetAudioSourceConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioEncoderConfigurationOptions
#define SOAP_TYPE___trt__GetAudioEncoderConfigurationOptions (2071)
/* Operation wrapper: */
struct __trt__GetAudioEncoderConfigurationOptions
{
public:
	_trt__GetAudioEncoderConfigurationOptions *trt__GetAudioEncoderConfigurationOptions;	/* optional element of type trt:GetAudioEncoderConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___trt__GetMetadataConfigurationOptions
#define SOAP_TYPE___trt__GetMetadataConfigurationOptions (2075)
/* Operation wrapper: */
struct __trt__GetMetadataConfigurationOptions
{
public:
	_trt__GetMetadataConfigurationOptions *trt__GetMetadataConfigurationOptions;	/* optional element of type trt:GetMetadataConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioOutputConfigurationOptions
#define SOAP_TYPE___trt__GetAudioOutputConfigurationOptions (2079)
/* Operation wrapper: */
struct __trt__GetAudioOutputConfigurationOptions
{
public:
	_trt__GetAudioOutputConfigurationOptions *trt__GetAudioOutputConfigurationOptions;	/* optional element of type trt:GetAudioOutputConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioDecoderConfigurationOptions
#define SOAP_TYPE___trt__GetAudioDecoderConfigurationOptions (2083)
/* Operation wrapper: */
struct __trt__GetAudioDecoderConfigurationOptions
{
public:
	_trt__GetAudioDecoderConfigurationOptions *trt__GetAudioDecoderConfigurationOptions;	/* optional element of type trt:GetAudioDecoderConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___trt__GetGuaranteedNumberOfVideoEncoderInstances
#define SOAP_TYPE___trt__GetGuaranteedNumberOfVideoEncoderInstances (2087)
/* Operation wrapper: */
struct __trt__GetGuaranteedNumberOfVideoEncoderInstances
{
public:
	_trt__GetGuaranteedNumberOfVideoEncoderInstances *trt__GetGuaranteedNumberOfVideoEncoderInstances;	/* optional element of type trt:GetGuaranteedNumberOfVideoEncoderInstances */
};
#endif

#ifndef SOAP_TYPE___trt__GetStreamUri
#define SOAP_TYPE___trt__GetStreamUri (2091)
/* Operation wrapper: */
struct __trt__GetStreamUri
{
public:
	_trt__GetStreamUri *trt__GetStreamUri;	/* optional element of type trt:GetStreamUri */
};
#endif

#ifndef SOAP_TYPE___trt__StartMulticastStreaming
#define SOAP_TYPE___trt__StartMulticastStreaming (2095)
/* Operation wrapper: */
struct __trt__StartMulticastStreaming
{
public:
	_trt__StartMulticastStreaming *trt__StartMulticastStreaming;	/* optional element of type trt:StartMulticastStreaming */
};
#endif

#ifndef SOAP_TYPE___trt__StopMulticastStreaming
#define SOAP_TYPE___trt__StopMulticastStreaming (2099)
/* Operation wrapper: */
struct __trt__StopMulticastStreaming
{
public:
	_trt__StopMulticastStreaming *trt__StopMulticastStreaming;	/* optional element of type trt:StopMulticastStreaming */
};
#endif

#ifndef SOAP_TYPE___trt__SetSynchronizationPoint
#define SOAP_TYPE___trt__SetSynchronizationPoint (2103)
/* Operation wrapper: */
struct __trt__SetSynchronizationPoint
{
public:
	_trt__SetSynchronizationPoint *trt__SetSynchronizationPoint;	/* optional element of type trt:SetSynchronizationPoint */
};
#endif

#ifndef SOAP_TYPE___trt__GetSnapshotUri
#define SOAP_TYPE___trt__GetSnapshotUri (2107)
/* Operation wrapper: */
struct __trt__GetSnapshotUri
{
public:
	_trt__GetSnapshotUri *trt__GetSnapshotUri;	/* optional element of type trt:GetSnapshotUri */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoSourceModes
#define SOAP_TYPE___trt__GetVideoSourceModes (2111)
/* Operation wrapper: */
struct __trt__GetVideoSourceModes
{
public:
	_trt__GetVideoSourceModes *trt__GetVideoSourceModes;	/* optional element of type trt:GetVideoSourceModes */
};
#endif

#ifndef SOAP_TYPE___trt__SetVideoSourceMode
#define SOAP_TYPE___trt__SetVideoSourceMode (2115)
/* Operation wrapper: */
struct __trt__SetVideoSourceMode
{
public:
	_trt__SetVideoSourceMode *trt__SetVideoSourceMode;	/* optional element of type trt:SetVideoSourceMode */
};
#endif

#ifndef SOAP_TYPE___trt__GetOSDs
#define SOAP_TYPE___trt__GetOSDs (2119)
/* Operation wrapper: */
struct __trt__GetOSDs
{
public:
	_trt__GetOSDs *trt__GetOSDs;	/* optional element of type trt:GetOSDs */
};
#endif

#ifndef SOAP_TYPE___trt__GetOSD
#define SOAP_TYPE___trt__GetOSD (2123)
/* Operation wrapper: */
struct __trt__GetOSD
{
public:
	_trt__GetOSD *trt__GetOSD;	/* optional element of type trt:GetOSD */
};
#endif

#ifndef SOAP_TYPE___trt__GetOSDOptions
#define SOAP_TYPE___trt__GetOSDOptions (2127)
/* Operation wrapper: */
struct __trt__GetOSDOptions
{
public:
	_trt__GetOSDOptions *trt__GetOSDOptions;	/* optional element of type trt:GetOSDOptions */
};
#endif

#ifndef SOAP_TYPE___trt__SetOSD
#define SOAP_TYPE___trt__SetOSD (2131)
/* Operation wrapper: */
struct __trt__SetOSD
{
public:
	_trt__SetOSD *trt__SetOSD;	/* optional element of type trt:SetOSD */
};
#endif

#ifndef SOAP_TYPE___trt__CreateOSD
#define SOAP_TYPE___trt__CreateOSD (2135)
/* Operation wrapper: */
struct __trt__CreateOSD
{
public:
	_trt__CreateOSD *trt__CreateOSD;	/* optional element of type trt:CreateOSD */
};
#endif

#ifndef SOAP_TYPE___trt__DeleteOSD
#define SOAP_TYPE___trt__DeleteOSD (2139)
/* Operation wrapper: */
struct __trt__DeleteOSD
{
public:
	_trt__DeleteOSD *trt__DeleteOSD;	/* optional element of type trt:DeleteOSD */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (2140)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (2142)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (2145)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Envelope
#define SOAP_TYPE_SOAP_ENV__Envelope (76)
typedef char *SOAP_ENV__Envelope;
#endif

#ifndef SOAP_TYPE_xsd__NCName
#define SOAP_TYPE_xsd__NCName (77)
typedef char *xsd__NCName;
#endif

#ifndef SOAP_TYPE_xsd__anySimpleType
#define SOAP_TYPE_xsd__anySimpleType (78)
typedef char *xsd__anySimpleType;
#endif

#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (79)
typedef char *xsd__anyURI;
#endif

#ifndef SOAP_TYPE_xsd__integer
#define SOAP_TYPE_xsd__integer (87)
typedef char *xsd__integer;
#endif

#ifndef SOAP_TYPE_xsd__nonNegativeInteger
#define SOAP_TYPE_xsd__nonNegativeInteger (88)
typedef char *xsd__nonNegativeInteger;
#endif

#ifndef SOAP_TYPE_xsd__token
#define SOAP_TYPE_xsd__token (89)
typedef char *xsd__token;
#endif

#ifndef SOAP_TYPE__xml__lang
#define SOAP_TYPE__xml__lang (90)
typedef char *_xml__lang;
#endif

#ifndef SOAP_TYPE_trt__EncodingTypes
#define SOAP_TYPE_trt__EncodingTypes (915)
typedef char *trt__EncodingTypes;
#endif

#ifndef SOAP_TYPE_tt__IntAttrList
#define SOAP_TYPE_tt__IntAttrList (916)
typedef char *tt__IntAttrList;
#endif

#ifndef SOAP_TYPE_tt__FloatAttrList
#define SOAP_TYPE_tt__FloatAttrList (917)
typedef char *tt__FloatAttrList;
#endif

#ifndef SOAP_TYPE_tt__StringAttrList
#define SOAP_TYPE_tt__StringAttrList (918)
typedef char *tt__StringAttrList;
#endif

#ifndef SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType
#define SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType (919)
typedef char *wsnt__AbsoluteOrRelativeTimeType;
#endif

#ifndef SOAP_TYPE_wsa5__RelationshipTypeOpenEnum
#define SOAP_TYPE_wsa5__RelationshipTypeOpenEnum (920)
typedef char *wsa5__RelationshipTypeOpenEnum;
#endif

#ifndef SOAP_TYPE_wsa5__FaultCodesOpenEnumType
#define SOAP_TYPE_wsa5__FaultCodesOpenEnumType (921)
typedef char *wsa5__FaultCodesOpenEnumType;
#endif

#ifndef SOAP_TYPE_tt__ReferenceToken
#define SOAP_TYPE_tt__ReferenceToken (922)
typedef char *tt__ReferenceToken;
#endif

#ifndef SOAP_TYPE_tt__Name
#define SOAP_TYPE_tt__Name (923)
typedef char *tt__Name;
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceConfigPriority
#define SOAP_TYPE_tt__NetworkInterfaceConfigPriority (933)
typedef char *tt__NetworkInterfaceConfigPriority;
#endif

#ifndef SOAP_TYPE_tt__IANA_IfTypes
#define SOAP_TYPE_tt__IANA_IfTypes (935)
typedef int tt__IANA_IfTypes;
#endif

#ifndef SOAP_TYPE_tt__IPv4Address
#define SOAP_TYPE_tt__IPv4Address (939)
typedef char *tt__IPv4Address;
#endif

#ifndef SOAP_TYPE_tt__IPv6Address
#define SOAP_TYPE_tt__IPv6Address (940)
typedef char *tt__IPv6Address;
#endif

#ifndef SOAP_TYPE_tt__HwAddress
#define SOAP_TYPE_tt__HwAddress (941)
typedef char *tt__HwAddress;
#endif

#ifndef SOAP_TYPE_tt__DNSName
#define SOAP_TYPE_tt__DNSName (943)
typedef char *tt__DNSName;
#endif

#ifndef SOAP_TYPE_tt__Domain
#define SOAP_TYPE_tt__Domain (944)
typedef char *tt__Domain;
#endif

#ifndef SOAP_TYPE_tt__Dot11SSIDType
#define SOAP_TYPE_tt__Dot11SSIDType (947)
typedef xsd__hexBinary tt__Dot11SSIDType;
#endif

#ifndef SOAP_TYPE_tt__Dot11PSK
#define SOAP_TYPE_tt__Dot11PSK (951)
typedef xsd__hexBinary tt__Dot11PSK;
#endif

#ifndef SOAP_TYPE_tt__Dot11PSKPassphrase
#define SOAP_TYPE_tt__Dot11PSKPassphrase (952)
typedef char *tt__Dot11PSKPassphrase;
#endif

#ifndef SOAP_TYPE_tt__AuxiliaryData
#define SOAP_TYPE_tt__AuxiliaryData (965)
typedef char *tt__AuxiliaryData;
#endif

#ifndef SOAP_TYPE_tt__TopicNamespaceLocation
#define SOAP_TYPE_tt__TopicNamespaceLocation (980)
typedef char *tt__TopicNamespaceLocation;
#endif

#ifndef SOAP_TYPE_tt__Description
#define SOAP_TYPE_tt__Description (986)
typedef char *tt__Description;
#endif

#ifndef SOAP_TYPE_tt__XPathExpression
#define SOAP_TYPE_tt__XPathExpression (987)
typedef char *tt__XPathExpression;
#endif

#ifndef SOAP_TYPE_tt__RecordingJobMode
#define SOAP_TYPE_tt__RecordingJobMode (991)
typedef char *tt__RecordingJobMode;
#endif

#ifndef SOAP_TYPE_tt__RecordingJobState
#define SOAP_TYPE_tt__RecordingJobState (992)
typedef char *tt__RecordingJobState;
#endif

#ifndef SOAP_TYPE_tt__AudioClassType
#define SOAP_TYPE_tt__AudioClassType (994)
typedef char *tt__AudioClassType;
#endif

#ifndef SOAP_TYPE_wstop__FullTopicExpression
#define SOAP_TYPE_wstop__FullTopicExpression (998)
typedef char *wstop__FullTopicExpression;
#endif

#ifndef SOAP_TYPE_wstop__ConcreteTopicExpression
#define SOAP_TYPE_wstop__ConcreteTopicExpression (999)
typedef char *wstop__ConcreteTopicExpression;
#endif

#ifndef SOAP_TYPE_wstop__SimpleTopicExpression
#define SOAP_TYPE_wstop__SimpleTopicExpression (1000)
typedef char *wstop__SimpleTopicExpression;
#endif

#ifndef SOAP_TYPE_tt__ReceiverReference
#define SOAP_TYPE_tt__ReceiverReference (1001)
typedef char *tt__ReceiverReference;
#endif

#ifndef SOAP_TYPE_tt__RecordingReference
#define SOAP_TYPE_tt__RecordingReference (1002)
typedef char *tt__RecordingReference;
#endif

#ifndef SOAP_TYPE_tt__TrackReference
#define SOAP_TYPE_tt__TrackReference (1003)
typedef char *tt__TrackReference;
#endif

#ifndef SOAP_TYPE_tt__JobToken
#define SOAP_TYPE_tt__JobToken (1004)
typedef char *tt__JobToken;
#endif

#ifndef SOAP_TYPE_tt__RecordingJobReference
#define SOAP_TYPE_tt__RecordingJobReference (1005)
typedef char *tt__RecordingJobReference;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


extern const char *soap_xsd__duration2s(struct soap *_param_1, const LONG64 _param_2);

extern int soap_s2xsd__duration(struct soap *_param_3, const char *_param_4, LONG64 *_param_5);

extern const char *soap_xsd__duration2s(struct soap *_param_6, const LONG64 _param_7);

extern int soap_s2xsd__duration(struct soap *_param_8, const char *_param_9, LONG64 *_param_10);

#endif

/* End of ptzStub.h */
